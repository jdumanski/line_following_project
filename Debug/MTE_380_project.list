
MTE_380_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004060  08004060  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080040d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080040d8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147ec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e99  00000000  00000000  0003488c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00036728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00037260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a591  00000000  00000000  00037d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca30  00000000  00000000  00052291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3bc  00000000  00000000  0005ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc07d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  000fc0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e48 	.word	0x08003e48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003e48 	.word	0x08003e48

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2iz>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d215      	bcs.n	80009ba <__aeabi_d2iz+0x36>
 800098e:	d511      	bpl.n	80009b4 <__aeabi_d2iz+0x30>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d912      	bls.n	80009c0 <__aeabi_d2iz+0x3c>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009aa:	fa23 f002 	lsr.w	r0, r3, r2
 80009ae:	bf18      	it	ne
 80009b0:	4240      	negne	r0, r0
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d105      	bne.n	80009cc <__aeabi_d2iz+0x48>
 80009c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	bf08      	it	eq
 80009c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	0fdb      	lsrs	r3, r3, #31
 8000d26:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <_ZNSt7__cxx119to_stringEi+0x1c>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	425b      	negs	r3, r3
 8000d32:	e000      	b.n	8000d36 <_ZNSt7__cxx119to_stringEi+0x1e>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000d38:	210a      	movs	r1, #10
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f000 fcbb 	bl	80016b6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8000d40:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8000d42:	7dfa      	ldrb	r2, [r7, #23]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	18d4      	adds	r4, r2, r3
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fbf5 	bl	800353c <_ZNSaIcEC1Ev>
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	222d      	movs	r2, #45	; 0x2d
 8000d58:	4621      	mov	r1, r4
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f002 fcc3 	bl	80036e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fbea 	bl	800353e <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f002 fcec 	bl	800374c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000d74:	4603      	mov	r3, r0
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68f9      	ldr	r1, [r7, #12]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fcda 	bl	8001734 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8000d80:	bf00      	nop
  }
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}

08000d8a <_ZN5ColorC1Ehhh>:
struct Color
{
	uint8_t r = 0;
	uint8_t g = 0;
	uint8_t b = 0;
	Color(uint8_t r, uint8_t g, uint8_t b) : r(r), g(g), b(b){}
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	4608      	mov	r0, r1
 8000d94:	4611      	mov	r1, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	70fb      	strb	r3, [r7, #3]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70bb      	strb	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	78ba      	ldrb	r2, [r7, #2]
 8000dae:	705a      	strb	r2, [r3, #1]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	787a      	ldrb	r2, [r7, #1]
 8000db4:	709a      	strb	r2, [r3, #2]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_Z14USART_TransmitP20__UART_HandleTypeDefPh>:
	double getMagnitude(){
		return sqrt(r*r+g*g+b*b);
	}
};

void USART_Transmit(UART_HandleTypeDef *huart, uint8_t *TextString) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
	while (TextString[TextStringLength++] != '\0')
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	73fa      	strb	r2, [r7, #15]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d000      	beq.n	8000df0 <_Z14USART_TransmitP20__UART_HandleTypeDefPh+0x2c>
 8000dee:	e7f0      	b.n	8000dd2 <_Z14USART_TransmitP20__UART_HandleTypeDefPh+0xe>
		;
	TextStringLength--;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f002 f827 	bl	8002e52 <HAL_UART_Transmit>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_Z13calcTotalTimeiii>:

//return frequency
//uses low period

int calcTotalTime(int t1, int t0, int tMax){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	if(t0 <= t1){
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dc03      	bgt.n	8000e28 <_Z13calcTotalTimeiii+0x1c>
		return t1-t0;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	e006      	b.n	8000e36 <_Z13calcTotalTimeiii+0x2a>
	}
	int returnVal = t1 + tMax - t0;
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	441a      	add	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
	return returnVal;
 8000e34:	697b      	ldr	r3, [r7, #20]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <_Z10calcPeriodP12GPIO_TypeDeft>:

int calcPeriod(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
	uint8_t prev = 2; //prev output value (initially set as 2 bc output values can either be 0 or 1
 8000e50:	2302      	movs	r3, #2
 8000e52:	75fb      	strb	r3, [r7, #23]

	//time per count is 0.00001 sec
	const int MAX_TIME = 65535;
 8000e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e58:	60fb      	str	r3, [r7, #12]
	bool started = false;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]

	HAL_TIM_Base_Start(&htim11);
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 8000e60:	f001 fed0 	bl	8002c04 <HAL_TIM_Base_Start>
	int t0 = __HAL_TIM_GET_COUNTER(&htim11);
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	613b      	str	r3, [r7, #16]

	do{
		GPIO_PinState output = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f001 f9ad 	bl	80021d0 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	72fb      	strb	r3, [r7, #11]
		if(output==GPIO_PIN_RESET && prev==1){
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <_Z10calcPeriodP12GPIO_TypeDeft+0x50>
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d106      	bne.n	8000e94 <_Z10calcPeriodP12GPIO_TypeDeft+0x50>
			started = true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	75bb      	strb	r3, [r7, #22]
			t0 = __HAL_TIM_GET_COUNTER(&htim11);
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	e013      	b.n	8000ebc <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
		}else if(started && output==GPIO_PIN_SET && prev==0){
 8000e94:	7dbb      	ldrb	r3, [r7, #22]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d010      	beq.n	8000ebc <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
 8000e9a:	7afb      	ldrb	r3, [r7, #11]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10d      	bne.n	8000ebc <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10a      	bne.n	8000ebc <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
			return calcTotalTime(__HAL_TIM_GET_COUNTER(&htim11), t0, MAX_TIME);
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	6939      	ldr	r1, [r7, #16]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffaa 	bl	8000e0c <_Z13calcTotalTimeiii>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	e01d      	b.n	8000ef8 <_Z10calcPeriodP12GPIO_TypeDeft+0xb4>
		}
		prev = output;
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	75fb      	strb	r3, [r7, #23]
	}while(calcTotalTime(__HAL_TIM_GET_COUNTER(&htim11), t0, MAX_TIME) < MAX_TIME || !started); //if we have started (encountered falling edge)
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff9d 	bl	8000e0c <_Z13calcTotalTimeiii>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	dd05      	ble.n	8000ee8 <_Z10calcPeriodP12GPIO_TypeDeft+0xa4>
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	f083 0301 	eor.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <_Z10calcPeriodP12GPIO_TypeDeft+0xa8>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <_Z10calcPeriodP12GPIO_TypeDeft+0xaa>
 8000eec:	2300      	movs	r3, #0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d000      	beq.n	8000ef4 <_Z10calcPeriodP12GPIO_TypeDeft+0xb0>
	do{
 8000ef2:	e7bb      	b.n	8000e6c <_Z10calcPeriodP12GPIO_TypeDeft+0x28>

	return -1; //if timer counts beyond max val (shouldn't happen -> max val is 0.65535 sec and max freq of output is 2Hz which has half period (since we only measure half period - time when signal is continuously low within a period) of 0.25 sec)
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000008c 	.word	0x2000008c

08000f04 <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	da01      	bge.n	8000f1e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	e000      	b.n	8000f20 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8000f1e:	687b      	ldr	r3, [r7, #4]
    }
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <_Z14normalizeToRGBiii>:

Color normalizeToRGB(int r, int g, int b){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
	if(r<0 || b < 0 || g < 0){
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db05      	blt.n	8000f4e <_Z14normalizeToRGBiii+0x1e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db02      	blt.n	8000f4e <_Z14normalizeToRGBiii+0x1e>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da11      	bge.n	8000f72 <_Z14normalizeToRGBiii+0x42>
		return Color(0, 0, 0);
 8000f4e:	f107 0014 	add.w	r0, r7, #20
 8000f52:	2300      	movs	r3, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	f7ff ff17 	bl	8000d8a <_ZN5ColorC1Ehhh>
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	f107 0214 	add.w	r2, r7, #20
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	4611      	mov	r1, r2
 8000f68:	8019      	strh	r1, [r3, #0]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	0c12      	lsrs	r2, r2, #16
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e072      	b.n	8001058 <_Z14normalizeToRGBiii+0x128>
	}
	double maxChannelVal = std::max(std::max(r, g), b);
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffc1 	bl	8000f04 <_ZSt3maxIiERKT_S2_S2_>
 8000f82:	4602      	mov	r2, r0
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4610      	mov	r0, r2
 8000f8a:	f7ff ffbb 	bl	8000f04 <_ZSt3maxIiERKT_S2_S2_>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fa7a 	bl	800048c <__aeabi_i2d>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t red = r / maxChannelVal * 255;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa72 	bl	800048c <__aeabi_i2d>
 8000fa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fac:	f7ff fc02 	bl	80007b4 <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a32f      	add	r3, pc, #188	; (adr r3, 8001078 <_Z14normalizeToRGBiii+0x148>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff facf 	bl	8000560 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fd03 	bl	80009d4 <__aeabi_d2uiz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	77fb      	strb	r3, [r7, #31]
	uint8_t green = g / maxChannelVal * 255;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa59 	bl	800048c <__aeabi_i2d>
 8000fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fde:	f7ff fbe9 	bl	80007b4 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	a323      	add	r3, pc, #140	; (adr r3, 8001078 <_Z14normalizeToRGBiii+0x148>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fab6 	bl	8000560 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fcea 	bl	80009d4 <__aeabi_d2uiz>
 8001000:	4603      	mov	r3, r0
 8001002:	77bb      	strb	r3, [r7, #30]
	uint8_t blue = b / maxChannelVal * 255;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa40 	bl	800048c <__aeabi_i2d>
 800100c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001010:	f7ff fbd0 	bl	80007b4 <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	a316      	add	r3, pc, #88	; (adr r3, 8001078 <_Z14normalizeToRGBiii+0x148>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fa9d 	bl	8000560 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fcd1 	bl	80009d4 <__aeabi_d2uiz>
 8001032:	4603      	mov	r3, r0
 8001034:	777b      	strb	r3, [r7, #29]
	return Color(red, green, blue);
 8001036:	7f7b      	ldrb	r3, [r7, #29]
 8001038:	7fba      	ldrb	r2, [r7, #30]
 800103a:	7ff9      	ldrb	r1, [r7, #31]
 800103c:	f107 0018 	add.w	r0, r7, #24
 8001040:	f7ff fea3 	bl	8000d8a <_ZN5ColorC1Ehhh>
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	8019      	strh	r1, [r3, #0]
 8001052:	3302      	adds	r3, #2
 8001054:	0c12      	lsrs	r2, r2, #16
 8001056:	701a      	strb	r2, [r3, #0]
}
 8001058:	2300      	movs	r3, #0
 800105a:	7c3a      	ldrb	r2, [r7, #16]
 800105c:	f362 0307 	bfi	r3, r2, #0, #8
 8001060:	7c7a      	ldrb	r2, [r7, #17]
 8001062:	f362 230f 	bfi	r3, r2, #8, #8
 8001066:	7cba      	ldrb	r2, [r7, #18]
 8001068:	f362 4317 	bfi	r3, r2, #16, #8
 800106c:	4618      	mov	r0, r3
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	f3af 8000 	nop.w
 8001078:	00000000 	.word	0x00000000
 800107c:	406fe000 	.word	0x406fe000

08001080 <main>:

int main(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b0da      	sub	sp, #360	; 0x168
 8001084:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001086:	f000 fdc7 	bl	8001c18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800108a:	f000 f9d3 	bl	8001434 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800108e:	f000 fa75 	bl	800157c <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8001092:	f000 fa45 	bl	8001520 <_ZL19MX_USART2_UART_Initv>
	MX_TIM11_Init();
 8001096:	f000 fadf 	bl	8001658 <_ZL13MX_TIM11_Initv>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	GPIO_InitTypeDef freq; //color sensor frequency output
	freq.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	673b      	str	r3, [r7, #112]	; 0x70
	freq.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	677b      	str	r3, [r7, #116]	; 0x74
	freq.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	67bb      	str	r3, [r7, #120]	; 0x78
	freq.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010a6:	2301      	movs	r3, #1
 80010a8:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_GPIO_Init(GPIOA, &freq);
 80010aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ae:	4619      	mov	r1, r3
 80010b0:	48d9      	ldr	r0, [pc, #868]	; (8001418 <main+0x398>)
 80010b2:	f000 ff09 	bl	8001ec8 <HAL_GPIO_Init>

	GPIO_InitTypeDef s2;
	s2.Pin = GPIO_PIN_5;
 80010b6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010be:	2220      	movs	r2, #32
 80010c0:	601a      	str	r2, [r3, #0]
	s2.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ca:	2201      	movs	r2, #1
 80010cc:	605a      	str	r2, [r3, #4]
	s2.Pull = GPIO_NOPULL;
 80010ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
	s2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e2:	2201      	movs	r2, #1
 80010e4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &s2);
 80010e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ea:	4619      	mov	r1, r3
 80010ec:	48ca      	ldr	r0, [pc, #808]	; (8001418 <main+0x398>)
 80010ee:	f000 feeb 	bl	8001ec8 <HAL_GPIO_Init>

	GPIO_InitTypeDef s3;
	s3.Pin = GPIO_PIN_4;
 80010f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010fa:	2210      	movs	r2, #16
 80010fc:	601a      	str	r2, [r3, #0]
	s3.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001102:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001106:	2201      	movs	r2, #1
 8001108:	605a      	str	r2, [r3, #4]
	s3.Pull = GPIO_NOPULL;
 800110a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800110e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
	s3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001116:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800111a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800111e:	2201      	movs	r2, #1
 8001120:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &s3);
 8001122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001126:	4619      	mov	r1, r3
 8001128:	48bb      	ldr	r0, [pc, #748]	; (8001418 <main+0x398>)
 800112a:	f000 fecd 	bl	8001ec8 <HAL_GPIO_Init>

	//by default, s2 and s3 are zero, so we get freq of red as output

	GPIO_InitTypeDef s1;
	s1.Pin = GPIO_PIN_1;
 800112e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001132:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
	s1.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800113e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001142:	2201      	movs	r2, #1
 8001144:	605a      	str	r2, [r3, #4]
	s1.Pull = GPIO_NOPULL;
 8001146:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800114a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	s1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001152:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001156:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800115a:	2201      	movs	r2, #1
 800115c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &s1);
 800115e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001162:	4619      	mov	r1, r3
 8001164:	48ac      	ldr	r0, [pc, #688]	; (8001418 <main+0x398>)
 8001166:	f000 feaf 	bl	8001ec8 <HAL_GPIO_Init>

	GPIO_InitTypeDef s0;
	s0.Pin = GPIO_PIN_0;
 800116a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800116e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
	s0.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800117a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800117e:	2201      	movs	r2, #1
 8001180:	605a      	str	r2, [r3, #4]
	s0.Pull = GPIO_NOPULL;
 8001182:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001186:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	s0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800118e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001192:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001196:	2201      	movs	r2, #1
 8001198:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s0);
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	4619      	mov	r1, r3
 80011a0:	489e      	ldr	r0, [pc, #632]	; (800141c <main+0x39c>)
 80011a2:	f000 fe91 	bl	8001ec8 <HAL_GPIO_Init>

	//set output frequency scaling to 2% (s0 = 1, s1 = 1)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //s1
 80011a6:	2201      	movs	r2, #1
 80011a8:	2102      	movs	r1, #2
 80011aa:	489b      	ldr	r0, [pc, #620]	; (8001418 <main+0x398>)
 80011ac:	f001 f828 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s0
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	4899      	ldr	r0, [pc, #612]	; (800141c <main+0x39c>)
 80011b6:	f001 f823 	bl	8002200 <HAL_GPIO_WritePin>

	//0.00001sec per tick bc hclock is 80MHz - we use prescale factor of 800 (set below), so tim11 is 80MHz/800 = 100KHz -> period of tim11 = 1/100000Hz = 0.00001 sec -> therefore each count in 0.00001 sec
	const double TIMER_PERIOD = 0.00001;
 80011ba:	a395      	add	r3, pc, #596	; (adr r3, 8001410 <main+0x390>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	while (1) {

		//set output to red channel
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //s3
 80011c4:	2200      	movs	r2, #0
 80011c6:	2110      	movs	r1, #16
 80011c8:	4893      	ldr	r0, [pc, #588]	; (8001418 <main+0x398>)
 80011ca:	f001 f819 	bl	8002200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //s2
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4891      	ldr	r0, [pc, #580]	; (8001418 <main+0x398>)
 80011d4:	f001 f814 	bl	8002200 <HAL_GPIO_WritePin>
		int redPeriod = calcPeriod(GPIOA, GPIO_PIN_0);
 80011d8:	2101      	movs	r1, #1
 80011da:	488f      	ldr	r0, [pc, #572]	; (8001418 <main+0x398>)
 80011dc:	f7ff fe32 	bl	8000e44 <_Z10calcPeriodP12GPIO_TypeDeft>
 80011e0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		int redFreq = 1.0 / (2 * redPeriod * TIMER_PERIOD);
 80011e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f94e 	bl	800048c <__aeabi_i2d>
 80011f0:	a387      	add	r3, pc, #540	; (adr r3, 8001410 <main+0x390>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f9b3 	bl	8000560 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	4987      	ldr	r1, [pc, #540]	; (8001420 <main+0x3a0>)
 8001204:	f7ff fad6 	bl	80007b4 <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fbb8 	bl	8000984 <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

		//set output to green channel
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //s3
 800121a:	2201      	movs	r2, #1
 800121c:	2110      	movs	r1, #16
 800121e:	487e      	ldr	r0, [pc, #504]	; (8001418 <main+0x398>)
 8001220:	f000 ffee 	bl	8002200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //s2
 8001224:	2201      	movs	r2, #1
 8001226:	2120      	movs	r1, #32
 8001228:	487b      	ldr	r0, [pc, #492]	; (8001418 <main+0x398>)
 800122a:	f000 ffe9 	bl	8002200 <HAL_GPIO_WritePin>
		int greenPeriod = calcPeriod(GPIOA, GPIO_PIN_0);
 800122e:	2101      	movs	r1, #1
 8001230:	4879      	ldr	r0, [pc, #484]	; (8001418 <main+0x398>)
 8001232:	f7ff fe07 	bl	8000e44 <_Z10calcPeriodP12GPIO_TypeDeft>
 8001236:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
		int greenFreq = 1.0 / (2 * greenPeriod * TIMER_PERIOD);
 800123a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f923 	bl	800048c <__aeabi_i2d>
 8001246:	a372      	add	r3, pc, #456	; (adr r3, 8001410 <main+0x390>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f988 	bl	8000560 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	f04f 0000 	mov.w	r0, #0
 8001258:	4971      	ldr	r1, [pc, #452]	; (8001420 <main+0x3a0>)
 800125a:	f7ff faab 	bl	80007b4 <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fb8d 	bl	8000984 <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

		//set output to blue channel
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //s3
 8001270:	2201      	movs	r2, #1
 8001272:	2110      	movs	r1, #16
 8001274:	4868      	ldr	r0, [pc, #416]	; (8001418 <main+0x398>)
 8001276:	f000 ffc3 	bl	8002200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //s2
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	4866      	ldr	r0, [pc, #408]	; (8001418 <main+0x398>)
 8001280:	f000 ffbe 	bl	8002200 <HAL_GPIO_WritePin>
		int bluePeriod = calcPeriod(GPIOA, GPIO_PIN_0);
 8001284:	2101      	movs	r1, #1
 8001286:	4864      	ldr	r0, [pc, #400]	; (8001418 <main+0x398>)
 8001288:	f7ff fddc 	bl	8000e44 <_Z10calcPeriodP12GPIO_TypeDeft>
 800128c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		int blueFreq = 1.0 / (2 * bluePeriod * TIMER_PERIOD);
 8001290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8f8 	bl	800048c <__aeabi_i2d>
 800129c:	a35c      	add	r3, pc, #368	; (adr r3, 8001410 <main+0x390>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f95d 	bl	8000560 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	495c      	ldr	r1, [pc, #368]	; (8001420 <main+0x3a0>)
 80012b0:	f7ff fa80 	bl	80007b4 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fb62 	bl	8000984 <__aeabi_d2iz>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

		//RGB OK in function, but when it gets to main the values are all weird - why?? - try doing caluclatuons in main instead of fucniton and see what happens
		Color color = normalizeToRGB(redFreq, greenFreq, blueFreq);
 80012c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ca:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80012ce:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80012d2:	f7ff fe2d 	bl	8000f30 <_Z14normalizeToRGBiii>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80012e0:	4611      	mov	r1, r2
 80012e2:	7019      	strb	r1, [r3, #0]
 80012e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80012e8:	7059      	strb	r1, [r3, #1]
 80012ea:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80012ee:	709a      	strb	r2, [r3, #2]
		std::string s = "(" + std::to_string(color.r) + ", " + std::to_string(color.g) + ", " + std::to_string(color.b) + ")";
 80012f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80012f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd08 	bl	8000d18 <_ZNSt7__cxx119to_stringEi>
 8001308:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800130c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001310:	4944      	ldr	r1, [pc, #272]	; (8001424 <main+0x3a4>)
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fa64 	bl	80017e0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001318:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800131c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001320:	4a41      	ldr	r2, [pc, #260]	; (8001428 <main+0x3a8>)
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fa74 	bl	8001810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001328:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800132c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	461a      	mov	r2, r3
 8001334:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fcec 	bl	8000d18 <_ZNSt7__cxx119to_stringEi>
 8001340:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001344:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001348:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa81 	bl	8001854 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001352:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001356:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <main+0x3a8>)
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fa57 	bl	8001810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001362:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001366:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	461a      	mov	r2, r3
 800136e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fccf 	bl	8000d18 <_ZNSt7__cxx119to_stringEi>
 800137a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800137e:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001382:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa64 	bl	8001854 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800138c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001390:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001394:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001398:	4a24      	ldr	r2, [pc, #144]	; (800142c <main+0x3ac>)
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fa38 	bl	8001810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80013a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f9c1 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f9bc 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f9b7 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 f9b2 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013c8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f9ad 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 f9a8 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 f9a3 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 f99e 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		const char* c = s.c_str();
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fa9c 	bl	8003930 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013f8:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
		USART_Transmit(&huart2, (uint8_t*)c);
 80013fc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001400:	480b      	ldr	r0, [pc, #44]	; (8001430 <main+0x3b0>)
 8001402:	f7ff fcdf 	bl	8000dc4 <_Z14USART_TransmitP20__UART_HandleTypeDefPh>
		std::string s = "(" + std::to_string(color.r) + ", " + std::to_string(color.g) + ", " + std::to_string(color.b) + ")";
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f002 f98f 	bl	800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
					USART_Transmit(&huart2, (uint8_t*) "ryein");
		}
		*/
	}
 800140e:	e6d9      	b.n	80011c4 <main+0x144>
 8001410:	88e368f1 	.word	0x88e368f1
 8001414:	3ee4f8b5 	.word	0x3ee4f8b5
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	3ff00000 	.word	0x3ff00000
 8001424:	08003e60 	.word	0x08003e60
 8001428:	08003e64 	.word	0x08003e64
 800142c:	08003e68 	.word	0x08003e68
 8001430:	200000d4 	.word	0x200000d4

08001434 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	; 0x50
 8001438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fbb6 	bl	8003bb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <_Z18SystemClock_Configv+0xe4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <_Z18SystemClock_Configv+0xe4>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <_Z18SystemClock_Configv+0xe4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <_Z18SystemClock_Configv+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <_Z18SystemClock_Configv+0xe8>)
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <_Z18SystemClock_Configv+0xe8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80014a8:	2310      	movs	r3, #16
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80014ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014b2:	2304      	movs	r3, #4
 80014b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b6:	2307      	movs	r3, #7
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 feb8 	bl	8002234 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bf14      	ite	ne
 80014ca:	2301      	movne	r3, #1
 80014cc:	2300      	moveq	r3, #0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <_Z18SystemClock_Configv+0xa4>
		Error_Handler();
 80014d4:	f000 f8ea 	bl	80016ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2102      	movs	r1, #2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 f915 	bl	8002724 <HAL_RCC_ClockConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf14      	ite	ne
 8001500:	2301      	movne	r3, #1
 8001502:	2300      	moveq	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <_Z18SystemClock_Configv+0xda>
		Error_Handler();
 800150a:	f000 f8cf 	bl	80016ac <Error_Handler>
	}
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001528:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001558:	f001 fc2e 	bl	8002db8 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800156c:	f000 f89e 	bl	80016ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000d4 	.word	0x200000d4
 8001578:	40004400 	.word	0x40004400

0800157c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_ZL12MX_GPIO_Initv+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <_ZL12MX_GPIO_Initv+0xd4>)
 8001608:	f000 fdfa 	bl	8002200 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <_ZL12MX_GPIO_Initv+0xd8>)
 8001624:	f000 fc50 	bl	8001ec8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <_ZL12MX_GPIO_Initv+0xd4>)
 8001640:	f000 fc42 	bl	8001ec8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <_ZL13MX_TIM11_Initv>:

static void MX_TIM11_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_ZL13MX_TIM11_Initv+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 800-1;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 8001664:	f240 321f 	movw	r2, #799	; 0x31f
 8001668:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 8001672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001676:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <_ZL13MX_TIM11_Initv+0x4c>)
 8001686:	f001 fa6d 	bl	8002b64 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZL13MX_TIM11_Initv+0x46>
  {
    Error_Handler();
 800169a:	f000 f807 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000008c 	.word	0x2000008c
 80016a8:	40014800 	.word	0x40014800

080016ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>

080016b6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	fb03 f303 	mul.w	r3, r3, r3
 80016ca:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d201      	bcs.n	80016ec <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	e01d      	b.n	8001728 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d202      	bcs.n	80016fa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	e016      	b.n	8001728 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d202      	bcs.n	8001708 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3302      	adds	r3, #2
 8001706:	e00f      	b.n	8001728 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	d202      	bcs.n	8001716 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3303      	adds	r3, #3
 8001714:	e008      	b.n	8001728 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3304      	adds	r3, #4
 8001724:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001726:	e7db      	b.n	80016e0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b63      	cmp	r3, #99	; 0x63
 800174a:	d925      	bls.n	8001798 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001750:	fba3 1302 	umull	r1, r3, r3, r2
 8001754:	095b      	lsrs	r3, r3, #5
 8001756:	2164      	movs	r1, #100	; 0x64
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	440b      	add	r3, r1
 8001778:	4918      	ldr	r1, [pc, #96]	; (80017dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800177a:	5c8a      	ldrb	r2, [r1, r2]
 800177c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b01      	subs	r3, #1
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	4915      	ldr	r1, [pc, #84]	; (80017dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	440a      	add	r2, r1
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3b02      	subs	r3, #2
 8001794:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001796:	e7d6      	b.n	8001746 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b09      	cmp	r3, #9
 800179c:	d910      	bls.n	80017c0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	490b      	ldr	r1, [pc, #44]	; (80017dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80017ae:	5c8a      	ldrb	r2, [r1, r2]
 80017b0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80017be:	e005      	b.n	80017cc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3330      	adds	r3, #48	; 0x30
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	701a      	strb	r2, [r3, #0]
    }
 80017cc:	bf00      	nop
 80017ce:	3724      	adds	r7, #36	; 0x24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	51eb851f 	.word	0x51eb851f
 80017dc:	08003e6c 	.word	0x08003e6c

080017e0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f002 f84f 	bl	8003894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f8a6 	bl	800194a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f001 ff78 	bl	80036f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f002 f870 	bl	8003904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f88f 	bl	800194a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f001 ff61 	bl	80036f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	2301      	movs	r3, #1
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffe7 	bl	800183e <_ZNKSt17integral_constantIbLb1EEcvbEv>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800187c:	e024      	b.n	80018c8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f855 	bl	8003934 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f84f 	bl	8003934 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8001896:	f107 021c 	add.w	r2, r7, #28
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f85d 	bl	8001960 <_ZSteqRKSaIcES1_>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461c      	mov	r4, r3
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fe45 	bl	800353e <_ZNSaIcED1Ev>
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fe40 	bl	800353e <_ZNSaIcED1Ev>
 80018be:	2c00      	cmp	r4, #0
 80018c0:	d002      	beq.n	80018c8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 80018c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02b      	beq.n	8001928 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f001 ff31 	bl	8003738 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80018d6:	4604      	mov	r4, r0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 ff2d 	bl	8003738 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80018de:	4603      	mov	r3, r0
 80018e0:	4423      	add	r3, r4
 80018e2:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f001 ff29 	bl	800373c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d908      	bls.n	8001904 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f001 ff22 	bl	800373c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d801      	bhi.n	8001904 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f001 ffb6 	bl	8003880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f817 	bl	800194a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f001 fee9 	bl	80036f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001926:	e00c      	b.n	8001942 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	68b8      	ldr	r0, [r7, #8]
 800192c:	f001 ffe4 	bl	80038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f809 	bl	800194a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f001 fedb 	bl	80036f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	372c      	adds	r7, #44	; 0x2c
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}

0800194a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
      { return true; }
 800196a:	2301      	movs	r3, #1
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019b6:	2007      	movs	r0, #7
 80019b8:	f000 fa52 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_TIM_Base_MspInit+0x3c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10d      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40014800 	.word	0x40014800
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_UART_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a66:	230c      	movs	r3, #12
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a76:	2307      	movs	r3, #7
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_UART_MspInit+0x8c>)
 8001a82:	f000 fa21 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40004400 	.word	0x40004400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 f8e8 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f001 fff1 	bl	8003af0 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	e7fe      	b.n	8001b32 <_exit+0x12>

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f001 ffc4 	bl	8003af0 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20018000 	.word	0x20018000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000118 	.word	0x20000118
 8001b9c:	20000138 	.word	0x20000138

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f001 ff83 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff fa43 	bl	8001080 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c08:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8001c0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c10:	20000134 	.word	0x20000134

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f90d 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fe94 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f917 	bl	8001eae <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f8ed 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	2000011c 	.word	0x2000011c

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000011c 	.word	0x2000011c

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff47 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff5c 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffb0 	bl	8001e1c <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e159      	b.n	8002198 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 8148 	bne.w	8002192 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d130      	bne.n	8001f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a2 	beq.w	8002192 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <HAL_GPIO_Init+0x2e8>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_GPIO_Init+0x2e8>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <HAL_GPIO_Init+0x2e8>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x2ec>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x202>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_GPIO_Init+0x2f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x1fe>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <HAL_GPIO_Init+0x2f8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x1fa>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <HAL_GPIO_Init+0x2fc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x1f6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a45      	ldr	r2, [pc, #276]	; (80021c8 <HAL_GPIO_Init+0x300>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x1f2>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x204>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x204>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x204>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x204>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x204>
 80020ca:	2300      	movs	r3, #0
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_GPIO_Init+0x2ec>)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_GPIO_Init+0x304>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210e:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <HAL_GPIO_Init+0x304>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_GPIO_Init+0x304>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002138:	4a24      	ldr	r2, [pc, #144]	; (80021cc <HAL_GPIO_Init+0x304>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_GPIO_Init+0x304>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_GPIO_Init+0x304>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_GPIO_Init+0x304>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218c:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <HAL_GPIO_Init+0x304>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3301      	adds	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	f67f aea2 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40013c00 	.word	0x40013c00

080021d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e001      	b.n	80021f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e267      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d075      	beq.n	800233e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d00c      	beq.n	8002278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225e:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d112      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226a:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d05b      	beq.n	800233c <HAL_RCC_OscConfig+0x108>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d157      	bne.n	800233c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e242      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x74>
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a75      	ldr	r2, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xb0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b70      	ldr	r3, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6f      	ldr	r2, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6c      	ldr	r2, [pc, #432]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xb0>
 80022cc:	4b69      	ldr	r3, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a68      	ldr	r2, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a65      	ldr	r2, [pc, #404]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fcfa 	bl	8001ce4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fcf6 	bl	8001ce4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e207      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xc0>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fce6 	bl	8001ce4 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fce2 	bl	8001ce4 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1f3      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0xe8>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002362:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x152>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1c7      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4937      	ldr	r1, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_OscConfig+0x244>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff fc9b 	bl	8001ce4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fc97 	bl	8001ce4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1a8      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4925      	ldr	r1, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x244>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fc7a 	bl	8001ce4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc76 	bl	8001ce4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e187      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_RCC_OscConfig+0x248>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff fc5a 	bl	8001ce4 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f7ff fc56 	bl	8001ce4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e167      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x240>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x200>
 8002452:	e01b      	b.n	800248c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_OscConfig+0x248>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fc43 	bl	8001ce4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	e00e      	b.n	8002480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002462:	f7ff fc3f 	bl	8001ce4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d907      	bls.n	8002480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e150      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
 8002474:	40023800 	.word	0x40023800
 8002478:	42470000 	.word	0x42470000
 800247c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ea      	bne.n	8002462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8097 	beq.w	80025c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <HAL_RCC_OscConfig+0x474>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b74      	ldr	r3, [pc, #464]	; (80026a8 <HAL_RCC_OscConfig+0x474>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a73      	ldr	r2, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x474>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fbff 	bl	8001ce4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7ff fbfb 	bl	8001ce4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e10c      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x474>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x2ea>
 8002510:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a63      	ldr	r2, [pc, #396]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x324>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x30c>
 8002526:	4b5f      	ldr	r3, [pc, #380]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a5e      	ldr	r2, [pc, #376]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a5b      	ldr	r2, [pc, #364]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0x324>
 8002540:	4b58      	ldr	r3, [pc, #352]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a57      	ldr	r2, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	4b55      	ldr	r3, [pc, #340]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002552:	f023 0304 	bic.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff fbc0 	bl	8001ce4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7ff fbbc 	bl	8001ce4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0cb      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ee      	beq.n	8002568 <HAL_RCC_OscConfig+0x334>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7ff fbaa 	bl	8001ce4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7ff fba6 	bl	8001ce4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0b5      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ee      	bne.n	8002594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a1 	beq.w	8002714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d05c      	beq.n	8002698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d141      	bne.n	800266a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_RCC_OscConfig+0x478>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb7a 	bl	8001ce4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff fb76 	bl	8001ce4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e087      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	491b      	ldr	r1, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x478>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7ff fb4f 	bl	8001ce4 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff fb4b 	bl	8001ce4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e05c      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x416>
 8002668:	e054      	b.n	8002714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x478>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fb38 	bl	8001ce4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff fb34 	bl	8001ce4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e045      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_OscConfig+0x470>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
 8002696:	e03d      	b.n	8002714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e038      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000
 80026ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x4ec>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d028      	beq.n	8002710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d121      	bne.n	8002710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0cc      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d90c      	bls.n	8002760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002778:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	494d      	ldr	r1, [pc, #308]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d044      	beq.n	8002844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d119      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e07f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e067      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4934      	ldr	r1, [pc, #208]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002814:	f7ff fa66 	bl	8001ce4 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7ff fa62 	bl	8001ce4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e04f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d20c      	bcs.n	800286c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e032      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4916      	ldr	r1, [pc, #88]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028aa:	f000 f821 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	5ccb      	ldrb	r3, [r1, r3]
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f9c6 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023c00 	.word	0x40023c00
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08003f38 	.word	0x08003f38
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f4:	b094      	sub	sp, #80	; 0x50
 80028f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	647b      	str	r3, [r7, #68]	; 0x44
 80028fc:	2300      	movs	r3, #0
 80028fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002900:	2300      	movs	r3, #0
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d00d      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x40>
 8002914:	2b08      	cmp	r3, #8
 8002916:	f200 80e1 	bhi.w	8002adc <HAL_RCC_GetSysClockFreq+0x1ec>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x34>
 800291e:	2b04      	cmp	r3, #4
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x3a>
 8002922:	e0db      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b73      	ldr	r3, [pc, #460]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002928:	e0db      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x208>)
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292e:	e0d8      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002946:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	2200      	movs	r2, #0
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002950:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
 800295e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4621      	mov	r1, r4
 800297c:	1a51      	subs	r1, r2, r1
 800297e:	6139      	str	r1, [r7, #16]
 8002980:	4629      	mov	r1, r5
 8002982:	eb63 0301 	sbc.w	r3, r3, r1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002994:	4659      	mov	r1, fp
 8002996:	018b      	lsls	r3, r1, #6
 8002998:	4651      	mov	r1, sl
 800299a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299e:	4651      	mov	r1, sl
 80029a0:	018a      	lsls	r2, r1, #6
 80029a2:	4651      	mov	r1, sl
 80029a4:	ebb2 0801 	subs.w	r8, r2, r1
 80029a8:	4659      	mov	r1, fp
 80029aa:	eb63 0901 	sbc.w	r9, r3, r1
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c2:	4690      	mov	r8, r2
 80029c4:	4699      	mov	r9, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	eb18 0303 	adds.w	r3, r8, r3
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	462b      	mov	r3, r5
 80029d0:	eb49 0303 	adc.w	r3, r9, r3
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029e2:	4629      	mov	r1, r5
 80029e4:	024b      	lsls	r3, r1, #9
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ec:	4621      	mov	r1, r4
 80029ee:	024a      	lsls	r2, r1, #9
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f6:	2200      	movs	r2, #0
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a00:	f7fe f808 	bl	8000a14 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a0c:	e058      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	4611      	mov	r1, r2
 8002a1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	0159      	lsls	r1, r3, #5
 8002a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3a:	0150      	lsls	r0, r2, #5
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4641      	mov	r1, r8
 8002a42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a46:	4649      	mov	r1, r9
 8002a48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a60:	ebb2 040a 	subs.w	r4, r2, sl
 8002a64:	eb63 050b 	sbc.w	r5, r3, fp
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	00eb      	lsls	r3, r5, #3
 8002a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a76:	00e2      	lsls	r2, r4, #3
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	18e3      	adds	r3, r4, r3
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	464b      	mov	r3, r9
 8002a84:	eb45 0303 	adc.w	r3, r5, r3
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a96:	4629      	mov	r1, r5
 8002a98:	028b      	lsls	r3, r1, #10
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	028a      	lsls	r2, r1, #10
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	61fa      	str	r2, [r7, #28]
 8002ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab4:	f7fd ffae 	bl	8000a14 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4613      	mov	r3, r2
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3750      	adds	r7, #80	; 0x50
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b18:	f7ff fff0 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a9b      	lsrs	r3, r3, #10
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	08003f48 	.word	0x08003f48

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b40:	f7ff ffdc 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0b5b      	lsrs	r3, r3, #13
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08003f48 	.word	0x08003f48

08002b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e041      	b.n	8002bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe ff1c 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 f888 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d001      	beq.n	8002c1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e03c      	b.n	8002c96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_TIM_Base_Start+0xa0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_TIM_Base_Start+0x5c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d013      	beq.n	8002c60 <HAL_TIM_Base_Start+0x5c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_TIM_Base_Start+0xa4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_TIM_Base_Start+0x5c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_TIM_Base_Start+0xa8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIM_Base_Start+0x5c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_TIM_Base_Start+0xac>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_Base_Start+0x5c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_TIM_Base_Start+0xb0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d010      	beq.n	8002c94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40014000 	.word	0x40014000

08002cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <TIM_Base_SetConfig+0xe4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00f      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <TIM_Base_SetConfig+0xe8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <TIM_Base_SetConfig+0xec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <TIM_Base_SetConfig+0xf0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <TIM_Base_SetConfig+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01b      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d017      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <TIM_Base_SetConfig+0xe8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <TIM_Base_SetConfig+0xec>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00f      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <TIM_Base_SetConfig+0xf0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <TIM_Base_SetConfig+0xf4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <TIM_Base_SetConfig+0xf8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <TIM_Base_SetConfig+0xfc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <TIM_Base_SetConfig+0xe4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800

08002db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e03f      	b.n	8002e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fe14 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f929 	bl	8003054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b08a      	sub	sp, #40	; 0x28
 8002e56:	af02      	add	r7, sp, #8
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d17c      	bne.n	8002f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_Transmit+0x2c>
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e075      	b.n	8002f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Transmit+0x3e>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e06e      	b.n	8002f6e <HAL_UART_Transmit+0x11c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe ff1d 	bl	8001ce4 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec0:	d108      	bne.n	8002ed4 <HAL_UART_Transmit+0x82>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e003      	b.n	8002edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ee4:	e02a      	b.n	8002f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f840 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e036      	b.n	8002f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	3302      	adds	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e007      	b.n	8002f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1cf      	bne.n	8002ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2140      	movs	r1, #64	; 0x40
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f810 	bl	8002f76 <UART_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e006      	b.n	8002f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b090      	sub	sp, #64	; 0x40
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f86:	e050      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d04c      	beq.n	800302a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f96:	f7fe fea5 	bl	8001ce4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d241      	bcs.n	800302a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffa:	623a      	str	r2, [r7, #32]
 8002ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	61bb      	str	r3, [r7, #24]
   return(result);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e5      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e00f      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d09f      	beq.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3740      	adds	r7, #64	; 0x40
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b0c0      	sub	sp, #256	; 0x100
 800305a:	af00      	add	r7, sp, #0
 800305c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	68d9      	ldr	r1, [r3, #12]
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	ea40 0301 	orr.w	r3, r0, r1
 800307c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	431a      	orrs	r2, r3
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030ac:	f021 010c 	bic.w	r1, r1, #12
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	6999      	ldr	r1, [r3, #24]
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	ea40 0301 	orr.w	r3, r0, r1
 80030da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <UART_SetConfig+0x2cc>)
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d005      	beq.n	80030f4 <UART_SetConfig+0xa0>
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <UART_SetConfig+0x2d0>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d104      	bne.n	80030fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7ff fd22 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 80030f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030fc:	e003      	b.n	8003106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fe:	f7ff fd09 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8003102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	f040 810c 	bne.w	800332c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800311e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	1891      	adds	r1, r2, r2
 800312c:	65b9      	str	r1, [r7, #88]	; 0x58
 800312e:	415b      	adcs	r3, r3
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003136:	4621      	mov	r1, r4
 8003138:	eb12 0801 	adds.w	r8, r2, r1
 800313c:	4629      	mov	r1, r5
 800313e:	eb43 0901 	adc.w	r9, r3, r1
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003156:	4690      	mov	r8, r2
 8003158:	4699      	mov	r9, r3
 800315a:	4623      	mov	r3, r4
 800315c:	eb18 0303 	adds.w	r3, r8, r3
 8003160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003164:	462b      	mov	r3, r5
 8003166:	eb49 0303 	adc.w	r3, r9, r3
 800316a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800317a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800317e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003182:	460b      	mov	r3, r1
 8003184:	18db      	adds	r3, r3, r3
 8003186:	653b      	str	r3, [r7, #80]	; 0x50
 8003188:	4613      	mov	r3, r2
 800318a:	eb42 0303 	adc.w	r3, r2, r3
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
 8003190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003198:	f7fd fc3c 	bl	8000a14 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <UART_SetConfig+0x2d4>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011c      	lsls	r4, r3, #4
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031c4:	415b      	adcs	r3, r3
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031cc:	4641      	mov	r1, r8
 80031ce:	eb12 0a01 	adds.w	sl, r2, r1
 80031d2:	4649      	mov	r1, r9
 80031d4:	eb43 0b01 	adc.w	fp, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ec:	4692      	mov	sl, r2
 80031ee:	469b      	mov	fp, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	eb1a 0303 	adds.w	r3, sl, r3
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003218:	460b      	mov	r3, r1
 800321a:	18db      	adds	r3, r3, r3
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
 800321e:	4613      	mov	r3, r2
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
 8003226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800322a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800322e:	f7fd fbf1 	bl	8000a14 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4611      	mov	r1, r2
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <UART_SetConfig+0x2d4>)
 800323a:	fba3 2301 	umull	r2, r3, r3, r1
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2264      	movs	r2, #100	; 0x64
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	1acb      	subs	r3, r1, r3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <UART_SetConfig+0x2d4>)
 8003250:	fba3 2302 	umull	r2, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800325c:	441c      	add	r4, r3
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800326c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	63b9      	str	r1, [r7, #56]	; 0x38
 8003278:	415b      	adcs	r3, r3
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003280:	4641      	mov	r1, r8
 8003282:	1851      	adds	r1, r2, r1
 8003284:	6339      	str	r1, [r7, #48]	; 0x30
 8003286:	4649      	mov	r1, r9
 8003288:	414b      	adcs	r3, r1
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003298:	4659      	mov	r1, fp
 800329a:	00cb      	lsls	r3, r1, #3
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a2:	4651      	mov	r1, sl
 80032a4:	00ca      	lsls	r2, r1, #3
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	4642      	mov	r2, r8
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b4:	464b      	mov	r3, r9
 80032b6:	460a      	mov	r2, r1
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032d4:	460b      	mov	r3, r1
 80032d6:	18db      	adds	r3, r3, r3
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032da:	4613      	mov	r3, r2
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032ea:	f7fd fb93 	bl	8000a14 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <UART_SetConfig+0x2d4>)
 80032f4:	fba3 1302 	umull	r1, r3, r3, r2
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2164      	movs	r1, #100	; 0x64
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <UART_SetConfig+0x2d4>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 0207 	and.w	r2, r3, #7
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4422      	add	r2, r4
 800331a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800331c:	e105      	b.n	800352a <UART_SetConfig+0x4d6>
 800331e:	bf00      	nop
 8003320:	40011000 	.word	0x40011000
 8003324:	40011400 	.word	0x40011400
 8003328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800333a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800333e:	4642      	mov	r2, r8
 8003340:	464b      	mov	r3, r9
 8003342:	1891      	adds	r1, r2, r2
 8003344:	6239      	str	r1, [r7, #32]
 8003346:	415b      	adcs	r3, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800334e:	4641      	mov	r1, r8
 8003350:	1854      	adds	r4, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb43 0501 	adc.w	r5, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003374:	464b      	mov	r3, r9
 8003376:	eb45 0303 	adc.w	r3, r5, r3
 800337a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800338a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800339a:	4629      	mov	r1, r5
 800339c:	008b      	lsls	r3, r1, #2
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a4:	4621      	mov	r1, r4
 80033a6:	008a      	lsls	r2, r1, #2
 80033a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033ac:	f7fd fb32 	bl	8000a14 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4b60      	ldr	r3, [pc, #384]	; (8003538 <UART_SetConfig+0x4e4>)
 80033b6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	011c      	lsls	r4, r3, #4
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	61b9      	str	r1, [r7, #24]
 80033d8:	415b      	adcs	r3, r3
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6139      	str	r1, [r7, #16]
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	67bb      	str	r3, [r7, #120]	; 0x78
 800342a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003438:	4649      	mov	r1, r9
 800343a:	008b      	lsls	r3, r1, #2
 800343c:	4641      	mov	r1, r8
 800343e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003442:	4641      	mov	r1, r8
 8003444:	008a      	lsls	r2, r1, #2
 8003446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800344a:	f7fd fae3 	bl	8000a14 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <UART_SetConfig+0x4e4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	; 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	3332      	adds	r3, #50	; 0x32
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <UART_SetConfig+0x4e4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003472:	441c      	add	r4, r3
 8003474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003478:	2200      	movs	r2, #0
 800347a:	673b      	str	r3, [r7, #112]	; 0x70
 800347c:	677a      	str	r2, [r7, #116]	; 0x74
 800347e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	1891      	adds	r1, r2, r2
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	415b      	adcs	r3, r3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003492:	4641      	mov	r1, r8
 8003494:	1851      	adds	r1, r2, r1
 8003496:	6039      	str	r1, [r7, #0]
 8003498:	4649      	mov	r1, r9
 800349a:	414b      	adcs	r3, r1
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034aa:	4659      	mov	r1, fp
 80034ac:	00cb      	lsls	r3, r1, #3
 80034ae:	4651      	mov	r1, sl
 80034b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b4:	4651      	mov	r1, sl
 80034b6:	00ca      	lsls	r2, r1, #3
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	4603      	mov	r3, r0
 80034be:	4642      	mov	r2, r8
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	663b      	str	r3, [r7, #96]	; 0x60
 80034d8:	667a      	str	r2, [r7, #100]	; 0x64
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034e6:	4649      	mov	r1, r9
 80034e8:	008b      	lsls	r3, r1, #2
 80034ea:	4641      	mov	r1, r8
 80034ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f0:	4641      	mov	r1, r8
 80034f2:	008a      	lsls	r2, r1, #2
 80034f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034f8:	f7fd fa8c 	bl	8000a14 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <UART_SetConfig+0x4e4>)
 8003502:	fba3 1302 	umull	r1, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2164      	movs	r1, #100	; 0x64
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	3332      	adds	r3, #50	; 0x32
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <UART_SetConfig+0x4e4>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4422      	add	r2, r4
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	bf00      	nop
 800352c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003530:	46bd      	mov	sp, r7
 8003532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003536:	bf00      	nop
 8003538:	51eb851f 	.word	0x51eb851f

0800353c <_ZNSaIcEC1Ev>:
 800353c:	4770      	bx	lr

0800353e <_ZNSaIcED1Ev>:
 800353e:	4770      	bx	lr

08003540 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8003540:	b10a      	cbz	r2, 8003546 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8003542:	f000 bb0f 	b.w	8003b64 <memcpy>
 8003546:	4770      	bx	lr

08003548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003548:	b508      	push	{r3, lr}
 800354a:	680b      	ldr	r3, [r1, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d302      	bcc.n	8003558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8003552:	480d      	ldr	r0, [pc, #52]	; (8003588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003554:	f000 fa08 	bl	8003968 <_ZSt20__throw_length_errorPKc>
 8003558:	4293      	cmp	r3, r2
 800355a:	d90b      	bls.n	8003574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800355c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003560:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003564:	d206      	bcs.n	8003574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003566:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800356a:	bf2a      	itet	cs
 800356c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003570:	6008      	strcc	r0, [r1, #0]
 8003572:	600b      	strcs	r3, [r1, #0]
 8003574:	6808      	ldr	r0, [r1, #0]
 8003576:	3001      	adds	r0, #1
 8003578:	d501      	bpl.n	800357e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800357a:	f000 f9ef 	bl	800395c <_ZSt17__throw_bad_allocv>
 800357e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003582:	f000 b9da 	b.w	800393a <_Znwj>
 8003586:	bf00      	nop
 8003588:	08003f50 	.word	0x08003f50

0800358c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800358c:	f850 3b08 	ldr.w	r3, [r0], #8
 8003590:	4283      	cmp	r3, r0
 8003592:	d002      	beq.n	800359a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003594:	4618      	mov	r0, r3
 8003596:	f000 b9ce 	b.w	8003936 <_ZdlPv>
 800359a:	4770      	bx	lr

0800359c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800359c:	b508      	push	{r3, lr}
 800359e:	4603      	mov	r3, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4298      	cmp	r0, r3
 80035a6:	4611      	mov	r1, r2
 80035a8:	d903      	bls.n	80035b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80035ae:	f000 f9de 	bl	800396e <_ZSt24__throw_out_of_range_fmtPKcz>
 80035b2:	bd08      	pop	{r3, pc}
 80035b4:	08003f68 	.word	0x08003f68

080035b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80035b8:	6840      	ldr	r0, [r0, #4]
 80035ba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80035be:	3901      	subs	r1, #1
 80035c0:	1a09      	subs	r1, r1, r0
 80035c2:	4291      	cmp	r1, r2
 80035c4:	b508      	push	{r3, lr}
 80035c6:	d202      	bcs.n	80035ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f9cd 	bl	8003968 <_ZSt20__throw_length_errorPKc>
 80035ce:	bd08      	pop	{r3, pc}

080035d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80035d0:	6803      	ldr	r3, [r0, #0]
 80035d2:	428b      	cmp	r3, r1
 80035d4:	d806      	bhi.n	80035e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80035d6:	6840      	ldr	r0, [r0, #4]
 80035d8:	4418      	add	r0, r3
 80035da:	4281      	cmp	r1, r0
 80035dc:	bf94      	ite	ls
 80035de:	2000      	movls	r0, #0
 80035e0:	2001      	movhi	r0, #1
 80035e2:	4770      	bx	lr
 80035e4:	2001      	movs	r0, #1
 80035e6:	4770      	bx	lr

080035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80035e8:	2a01      	cmp	r2, #1
 80035ea:	b410      	push	{r4}
 80035ec:	d104      	bne.n	80035f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80035ee:	780a      	ldrb	r2, [r1, #0]
 80035f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f4:	7002      	strb	r2, [r0, #0]
 80035f6:	4770      	bx	lr
 80035f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035fc:	f7ff bfa0 	b.w	8003540 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8003600:	2a01      	cmp	r2, #1
 8003602:	b430      	push	{r4, r5}
 8003604:	d103      	bne.n	800360e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8003606:	780b      	ldrb	r3, [r1, #0]
 8003608:	7003      	strb	r3, [r0, #0]
 800360a:	bc30      	pop	{r4, r5}
 800360c:	4770      	bx	lr
 800360e:	2a00      	cmp	r2, #0
 8003610:	d0fb      	beq.n	800360a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003612:	bc30      	pop	{r4, r5}
 8003614:	f000 bab4 	b.w	8003b80 <memmove>

08003618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8003618:	460b      	mov	r3, r1
 800361a:	2b01      	cmp	r3, #1
 800361c:	b410      	push	{r4}
 800361e:	4611      	mov	r1, r2
 8003620:	4604      	mov	r4, r0
 8003622:	d103      	bne.n	800362c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8003624:	7022      	strb	r2, [r4, #0]
 8003626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0fa      	beq.n	8003626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8003630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003634:	461a      	mov	r2, r3
 8003636:	f000 babd 	b.w	8003bb4 <memset>

0800363a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800363a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800363c:	290f      	cmp	r1, #15
 800363e:	4604      	mov	r4, r0
 8003640:	9101      	str	r1, [sp, #4]
 8003642:	4615      	mov	r5, r2
 8003644:	d906      	bls.n	8003654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8003646:	2200      	movs	r2, #0
 8003648:	a901      	add	r1, sp, #4
 800364a:	f7ff ff7d 	bl	8003548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800364e:	9b01      	ldr	r3, [sp, #4]
 8003650:	6020      	str	r0, [r4, #0]
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	9901      	ldr	r1, [sp, #4]
 8003656:	b119      	cbz	r1, 8003660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	f7ff ffdc 	bl	8003618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8003660:	9b01      	ldr	r3, [sp, #4]
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	2100      	movs	r1, #0
 8003668:	54d1      	strb	r1, [r2, r3]
 800366a:	b003      	add	sp, #12
 800366c:	bd30      	pop	{r4, r5, pc}

0800366e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800366e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003672:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003674:	461f      	mov	r7, r3
 8003676:	6843      	ldr	r3, [r0, #4]
 8003678:	eb01 0802 	add.w	r8, r1, r2
 800367c:	1ab2      	subs	r2, r6, r2
 800367e:	441a      	add	r2, r3
 8003680:	eba3 0908 	sub.w	r9, r3, r8
 8003684:	4603      	mov	r3, r0
 8003686:	9201      	str	r2, [sp, #4]
 8003688:	f853 2b08 	ldr.w	r2, [r3], #8
 800368c:	429a      	cmp	r2, r3
 800368e:	bf18      	it	ne
 8003690:	6882      	ldrne	r2, [r0, #8]
 8003692:	460d      	mov	r5, r1
 8003694:	bf08      	it	eq
 8003696:	220f      	moveq	r2, #15
 8003698:	a901      	add	r1, sp, #4
 800369a:	4604      	mov	r4, r0
 800369c:	f7ff ff54 	bl	8003548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80036a0:	4682      	mov	sl, r0
 80036a2:	b11d      	cbz	r5, 80036ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80036a4:	6821      	ldr	r1, [r4, #0]
 80036a6:	462a      	mov	r2, r5
 80036a8:	f7ff ff9e 	bl	80035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80036ac:	b137      	cbz	r7, 80036bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80036ae:	b12e      	cbz	r6, 80036bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80036b0:	4632      	mov	r2, r6
 80036b2:	4639      	mov	r1, r7
 80036b4:	eb0a 0005 	add.w	r0, sl, r5
 80036b8:	f7ff ff96 	bl	80035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80036bc:	f1b9 0f00 	cmp.w	r9, #0
 80036c0:	d007      	beq.n	80036d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80036c2:	6821      	ldr	r1, [r4, #0]
 80036c4:	4435      	add	r5, r6
 80036c6:	464a      	mov	r2, r9
 80036c8:	4441      	add	r1, r8
 80036ca:	eb0a 0005 	add.w	r0, sl, r5
 80036ce:	f7ff ff8b 	bl	80035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7ff ff5a 	bl	800358c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80036d8:	9b01      	ldr	r3, [sp, #4]
 80036da:	f8c4 a000 	str.w	sl, [r4]
 80036de:	60a3      	str	r3, [r4, #8]
 80036e0:	b002      	add	sp, #8
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 80036e6:	b510      	push	{r4, lr}
 80036e8:	f100 0308 	add.w	r3, r0, #8
 80036ec:	4604      	mov	r4, r0
 80036ee:	6003      	str	r3, [r0, #0]
 80036f0:	f7ff ffa3 	bl	800363a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80036f4:	4620      	mov	r0, r4
 80036f6:	bd10      	pop	{r4, pc}

080036f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	460e      	mov	r6, r1
 80036fe:	3008      	adds	r0, #8
 8003700:	6020      	str	r0, [r4, #0]
 8003702:	f856 3b08 	ldr.w	r3, [r6], #8
 8003706:	429e      	cmp	r6, r3
 8003708:	460d      	mov	r5, r1
 800370a:	d10b      	bne.n	8003724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800370c:	2210      	movs	r2, #16
 800370e:	4631      	mov	r1, r6
 8003710:	f7ff ff16 	bl	8003540 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8003714:	686b      	ldr	r3, [r5, #4]
 8003716:	6063      	str	r3, [r4, #4]
 8003718:	2300      	movs	r3, #0
 800371a:	602e      	str	r6, [r5, #0]
 800371c:	606b      	str	r3, [r5, #4]
 800371e:	722b      	strb	r3, [r5, #8]
 8003720:	4620      	mov	r0, r4
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	688b      	ldr	r3, [r1, #8]
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	e7f3      	b.n	8003714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800372c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	f7ff ff2c 	bl	800358c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003734:	4620      	mov	r0, r4
 8003736:	bd10      	pop	{r4, pc}

08003738 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8003738:	6840      	ldr	r0, [r0, #4]
 800373a:	4770      	bx	lr

0800373c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800373c:	4603      	mov	r3, r0
 800373e:	f853 2b08 	ldr.w	r2, [r3], #8
 8003742:	429a      	cmp	r2, r3
 8003744:	bf14      	ite	ne
 8003746:	6880      	ldrne	r0, [r0, #8]
 8003748:	200f      	moveq	r0, #15
 800374a:	4770      	bx	lr

0800374c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800374c:	6800      	ldr	r0, [r0, #0]
 800374e:	4408      	add	r0, r1
 8003750:	4770      	bx	lr
	...

08003754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8003754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800375a:	4614      	mov	r4, r2
 800375c:	4680      	mov	r8, r0
 800375e:	462a      	mov	r2, r5
 8003760:	4689      	mov	r9, r1
 8003762:	461f      	mov	r7, r3
 8003764:	4621      	mov	r1, r4
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8003768:	f7ff ff26 	bl	80035b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800376c:	4642      	mov	r2, r8
 800376e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003772:	f852 6b08 	ldr.w	r6, [r2], #8
 8003776:	4296      	cmp	r6, r2
 8003778:	bf18      	it	ne
 800377a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800377e:	eba5 0b04 	sub.w	fp, r5, r4
 8003782:	eb03 0a0b 	add.w	sl, r3, fp
 8003786:	bf08      	it	eq
 8003788:	220f      	moveq	r2, #15
 800378a:	4552      	cmp	r2, sl
 800378c:	d351      	bcc.n	8003832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 800378e:	444e      	add	r6, r9
 8003790:	4639      	mov	r1, r7
 8003792:	44a1      	add	r9, r4
 8003794:	4640      	mov	r0, r8
 8003796:	eba3 0909 	sub.w	r9, r3, r9
 800379a:	f7ff ff19 	bl	80035d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800379e:	b180      	cbz	r0, 80037c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80037a0:	f1b9 0f00 	cmp.w	r9, #0
 80037a4:	d006      	beq.n	80037b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80037a6:	42ac      	cmp	r4, r5
 80037a8:	d004      	beq.n	80037b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80037aa:	464a      	mov	r2, r9
 80037ac:	1931      	adds	r1, r6, r4
 80037ae:	1970      	adds	r0, r6, r5
 80037b0:	f7ff ff26 	bl	8003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80037b4:	b315      	cbz	r5, 80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80037b6:	462a      	mov	r2, r5
 80037b8:	4639      	mov	r1, r7
 80037ba:	4630      	mov	r0, r6
 80037bc:	f7ff ff14 	bl	80035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80037c0:	e01c      	b.n	80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80037c2:	b135      	cbz	r5, 80037d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80037c4:	42ac      	cmp	r4, r5
 80037c6:	d33c      	bcc.n	8003842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80037c8:	462a      	mov	r2, r5
 80037ca:	4639      	mov	r1, r7
 80037cc:	4630      	mov	r0, r6
 80037ce:	f7ff ff17 	bl	8003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80037d2:	f1b9 0f00 	cmp.w	r9, #0
 80037d6:	d011      	beq.n	80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80037d8:	42ac      	cmp	r4, r5
 80037da:	d00f      	beq.n	80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80037dc:	464a      	mov	r2, r9
 80037de:	1931      	adds	r1, r6, r4
 80037e0:	1970      	adds	r0, r6, r5
 80037e2:	f7ff ff0d 	bl	8003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80037e6:	42ac      	cmp	r4, r5
 80037e8:	d208      	bcs.n	80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80037ea:	4434      	add	r4, r6
 80037ec:	197b      	adds	r3, r7, r5
 80037ee:	429c      	cmp	r4, r3
 80037f0:	d30f      	bcc.n	8003812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80037f2:	462a      	mov	r2, r5
 80037f4:	4639      	mov	r1, r7
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff ff02 	bl	8003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80037fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003800:	f8c8 a004 	str.w	sl, [r8, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	4640      	mov	r0, r8
 8003808:	f803 200a 	strb.w	r2, [r3, sl]
 800380c:	b003      	add	sp, #12
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003812:	42bc      	cmp	r4, r7
 8003814:	d803      	bhi.n	800381e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8003816:	462a      	mov	r2, r5
 8003818:	eb07 010b 	add.w	r1, r7, fp
 800381c:	e7cd      	b.n	80037ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800381e:	1be4      	subs	r4, r4, r7
 8003820:	4622      	mov	r2, r4
 8003822:	4639      	mov	r1, r7
 8003824:	4630      	mov	r0, r6
 8003826:	f7ff feeb 	bl	8003600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800382a:	1b2a      	subs	r2, r5, r4
 800382c:	1971      	adds	r1, r6, r5
 800382e:	1930      	adds	r0, r6, r4
 8003830:	e7c4      	b.n	80037bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8003832:	9500      	str	r5, [sp, #0]
 8003834:	463b      	mov	r3, r7
 8003836:	4622      	mov	r2, r4
 8003838:	4649      	mov	r1, r9
 800383a:	4640      	mov	r0, r8
 800383c:	f7ff ff17 	bl	800366e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003840:	e7dc      	b.n	80037fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003842:	f1b9 0f00 	cmp.w	r9, #0
 8003846:	d0d0      	beq.n	80037ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8003848:	e7c8      	b.n	80037dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800384a:	bf00      	nop
 800384c:	08003fb5 	.word	0x08003fb5

08003850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8003850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003852:	4604      	mov	r4, r0
 8003854:	4615      	mov	r5, r2
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8003858:	9303      	str	r3, [sp, #12]
 800385a:	460e      	mov	r6, r1
 800385c:	f7ff fe9e 	bl	800359c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8003860:	6862      	ldr	r2, [r4, #4]
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	1b92      	subs	r2, r2, r6
 8003866:	4601      	mov	r1, r0
 8003868:	42aa      	cmp	r2, r5
 800386a:	9808      	ldr	r0, [sp, #32]
 800386c:	9000      	str	r0, [sp, #0]
 800386e:	bf28      	it	cs
 8003870:	462a      	movcs	r2, r5
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff ff6e 	bl	8003754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8003878:	b004      	add	sp, #16
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	08003f9f 	.word	0x08003f9f

08003880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8003880:	b507      	push	{r0, r1, r2, lr}
 8003882:	6853      	ldr	r3, [r2, #4]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	f7ff ffe1 	bl	8003850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800388e:	b003      	add	sp, #12
 8003890:	f85d fb04 	ldr.w	pc, [sp], #4

08003894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8003894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003896:	4604      	mov	r4, r0
 8003898:	4610      	mov	r0, r2
 800389a:	9103      	str	r1, [sp, #12]
 800389c:	9202      	str	r2, [sp, #8]
 800389e:	f7fc fc9b 	bl	80001d8 <strlen>
 80038a2:	9b02      	ldr	r3, [sp, #8]
 80038a4:	9000      	str	r0, [sp, #0]
 80038a6:	9903      	ldr	r1, [sp, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ffd0 	bl	8003850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80038b0:	b004      	add	sp, #16
 80038b2:	bd10      	pop	{r4, pc}

080038b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80038b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038b6:	4604      	mov	r4, r0
 80038b8:	4623      	mov	r3, r4
 80038ba:	6840      	ldr	r0, [r0, #4]
 80038bc:	f853 6b08 	ldr.w	r6, [r3], #8
 80038c0:	429e      	cmp	r6, r3
 80038c2:	bf18      	it	ne
 80038c4:	68a3      	ldrne	r3, [r4, #8]
 80038c6:	eb00 0502 	add.w	r5, r0, r2
 80038ca:	bf08      	it	eq
 80038cc:	230f      	moveq	r3, #15
 80038ce:	429d      	cmp	r5, r3
 80038d0:	d80a      	bhi.n	80038e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80038d2:	b112      	cbz	r2, 80038da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80038d4:	4430      	add	r0, r6
 80038d6:	f7ff fe87 	bl	80035e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	6065      	str	r5, [r4, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	4620      	mov	r0, r4
 80038e2:	555a      	strb	r2, [r3, r5]
 80038e4:	b002      	add	sp, #8
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	460b      	mov	r3, r1
 80038ec:	2200      	movs	r2, #0
 80038ee:	4601      	mov	r1, r0
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff febc 	bl	800366e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80038f6:	e7f0      	b.n	80038da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80038f8:	b508      	push	{r3, lr}
 80038fa:	e9d1 1200 	ldrd	r1, r2, [r1]
 80038fe:	f7ff ffd9 	bl	80038b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003902:	bd08      	pop	{r3, pc}

08003904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8003904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	460d      	mov	r5, r1
 800390c:	f7fc fc64 	bl	80001d8 <strlen>
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8003912:	9001      	str	r0, [sp, #4]
 8003914:	4602      	mov	r2, r0
 8003916:	2100      	movs	r1, #0
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff fe4d 	bl	80035b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800391e:	9a01      	ldr	r2, [sp, #4]
 8003920:	4629      	mov	r1, r5
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff ffc6 	bl	80038b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003928:	b003      	add	sp, #12
 800392a:	bd30      	pop	{r4, r5, pc}
 800392c:	08003fce 	.word	0x08003fce

08003930 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8003930:	6800      	ldr	r0, [r0, #0]
 8003932:	4770      	bx	lr

08003934 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8003934:	4770      	bx	lr

08003936 <_ZdlPv>:
 8003936:	f000 b90d 	b.w	8003b54 <free>

0800393a <_Znwj>:
 800393a:	2801      	cmp	r0, #1
 800393c:	bf38      	it	cc
 800393e:	2001      	movcc	r0, #1
 8003940:	b510      	push	{r4, lr}
 8003942:	4604      	mov	r4, r0
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f8fd 	bl	8003b44 <malloc>
 800394a:	b930      	cbnz	r0, 800395a <_Znwj+0x20>
 800394c:	f000 f8c0 	bl	8003ad0 <_ZSt15get_new_handlerv>
 8003950:	b908      	cbnz	r0, 8003956 <_Znwj+0x1c>
 8003952:	f000 f8c5 	bl	8003ae0 <abort>
 8003956:	4780      	blx	r0
 8003958:	e7f4      	b.n	8003944 <_Znwj+0xa>
 800395a:	bd10      	pop	{r4, pc}

0800395c <_ZSt17__throw_bad_allocv>:
 800395c:	b508      	push	{r3, lr}
 800395e:	f000 f8bf 	bl	8003ae0 <abort>

08003962 <_ZSt19__throw_logic_errorPKc>:
 8003962:	b508      	push	{r3, lr}
 8003964:	f000 f8bc 	bl	8003ae0 <abort>

08003968 <_ZSt20__throw_length_errorPKc>:
 8003968:	b508      	push	{r3, lr}
 800396a:	f000 f8b9 	bl	8003ae0 <abort>

0800396e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800396e:	b40f      	push	{r0, r1, r2, r3}
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	f107 0418 	add.w	r4, r7, #24
 800397a:	f854 2b04 	ldr.w	r2, [r4], #4
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	4610      	mov	r0, r2
 8003982:	f7fc fc29 	bl	80001d8 <strlen>
 8003986:	f200 2307 	addw	r3, r0, #519	; 0x207
 800398a:	f023 0307 	bic.w	r3, r3, #7
 800398e:	ebad 0d03 	sub.w	sp, sp, r3
 8003992:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	60fc      	str	r4, [r7, #12]
 800399a:	4623      	mov	r3, r4
 800399c:	4668      	mov	r0, sp
 800399e:	f000 f855 	bl	8003a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80039a2:	f000 f89d 	bl	8003ae0 <abort>
	...

080039a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b09c      	sub	sp, #112	; 0x70
 80039ac:	4606      	mov	r6, r0
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	460c      	mov	r4, r1
 80039b2:	1ba4      	subs	r4, r4, r6
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80039b6:	2269      	movs	r2, #105	; 0x69
 80039b8:	1d38      	adds	r0, r7, #4
 80039ba:	f000 f8d3 	bl	8003b64 <memcpy>
 80039be:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80039c2:	f023 0307 	bic.w	r3, r3, #7
 80039c6:	ebad 0d03 	sub.w	sp, sp, r3
 80039ca:	466d      	mov	r5, sp
 80039cc:	2268      	movs	r2, #104	; 0x68
 80039ce:	1d39      	adds	r1, r7, #4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 f8c7 	bl	8003b64 <memcpy>
 80039d6:	4622      	mov	r2, r4
 80039d8:	4631      	mov	r1, r6
 80039da:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80039de:	442c      	add	r4, r5
 80039e0:	f000 f8c0 	bl	8003b64 <memcpy>
 80039e4:	2300      	movs	r3, #0
 80039e6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7ff ffb9 	bl	8003962 <_ZSt19__throw_logic_errorPKc>
 80039f0:	08003fe3 	.word	0x08003fe3

080039f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80039f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	b084      	sub	sp, #16
 80039fc:	466d      	mov	r5, sp
 80039fe:	f105 040c 	add.w	r4, r5, #12
 8003a02:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003a48 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8003a06:	4623      	mov	r3, r4
 8003a08:	f04f 0c0a 	mov.w	ip, #10
 8003a0c:	fbb2 f6fc 	udiv	r6, r2, ip
 8003a10:	fb0c 2e16 	mls	lr, ip, r6, r2
 8003a14:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8003a18:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8003a1c:	4696      	mov	lr, r2
 8003a1e:	f1be 0f09 	cmp.w	lr, #9
 8003a22:	4632      	mov	r2, r6
 8003a24:	d8f2      	bhi.n	8003a0c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8003a26:	1ae4      	subs	r4, r4, r3
 8003a28:	428c      	cmp	r4, r1
 8003a2a:	d809      	bhi.n	8003a40 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8003a2c:	f1c4 030c 	rsb	r3, r4, #12
 8003a30:	4622      	mov	r2, r4
 8003a32:	18e9      	adds	r1, r5, r3
 8003a34:	f000 f896 	bl	8003b64 <memcpy>
 8003a38:	4620      	mov	r0, r4
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a40:	f04f 34ff 	mov.w	r4, #4294967295
 8003a44:	e7f8      	b.n	8003a38 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8003a46:	bf00      	nop
 8003a48:	0800404c 	.word	0x0800404c

08003a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8003a4c:	3901      	subs	r1, #1
 8003a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a52:	4607      	mov	r7, r0
 8003a54:	4615      	mov	r5, r2
 8003a56:	eb00 0801 	add.w	r8, r0, r1
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	782a      	ldrb	r2, [r5, #0]
 8003a5e:	b392      	cbz	r2, 8003ac6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8003a60:	4544      	cmp	r4, r8
 8003a62:	d22a      	bcs.n	8003aba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003a64:	2a25      	cmp	r2, #37	; 0x25
 8003a66:	d107      	bne.n	8003a78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003a68:	786a      	ldrb	r2, [r5, #1]
 8003a6a:	2a73      	cmp	r2, #115	; 0x73
 8003a6c:	d009      	beq.n	8003a82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8003a6e:	2a7a      	cmp	r2, #122	; 0x7a
 8003a70:	d012      	beq.n	8003a98 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8003a72:	2a25      	cmp	r2, #37	; 0x25
 8003a74:	d100      	bne.n	8003a78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003a76:	3501      	adds	r5, #1
 8003a78:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003a7c:	f804 2b01 	strb.w	r2, [r4], #1
 8003a80:	e7ec      	b.n	8003a5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a86:	3a01      	subs	r2, #1
 8003a88:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003a8c:	b1c9      	cbz	r1, 8003ac2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8003a8e:	4544      	cmp	r4, r8
 8003a90:	d013      	beq.n	8003aba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003a92:	f804 1b01 	strb.w	r1, [r4], #1
 8003a96:	e7f7      	b.n	8003a88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8003a98:	78aa      	ldrb	r2, [r5, #2]
 8003a9a:	2a75      	cmp	r2, #117	; 0x75
 8003a9c:	d1ec      	bne.n	8003a78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003a9e:	461e      	mov	r6, r3
 8003aa0:	eba8 0104 	sub.w	r1, r8, r4
 8003aa4:	f856 2b04 	ldr.w	r2, [r6], #4
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff ffa3 	bl	80039f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	dd03      	ble.n	8003aba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003ab2:	4404      	add	r4, r0
 8003ab4:	3503      	adds	r5, #3
 8003ab6:	4633      	mov	r3, r6
 8003ab8:	e7d0      	b.n	8003a5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003aba:	4621      	mov	r1, r4
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff73 	bl	80039a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8003ac2:	3502      	adds	r5, #2
 8003ac4:	e7ca      	b.n	8003a5c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003ac6:	7022      	strb	r2, [r4, #0]
 8003ac8:	1be0      	subs	r0, r4, r7
 8003aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003ad0 <_ZSt15get_new_handlerv>:
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <_ZSt15get_new_handlerv+0xc>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f3bf 8f5b 	dmb	ish
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000120 	.word	0x20000120

08003ae0 <abort>:
 8003ae0:	b508      	push	{r3, lr}
 8003ae2:	2006      	movs	r0, #6
 8003ae4:	f000 f986 	bl	8003df4 <raise>
 8003ae8:	2001      	movs	r0, #1
 8003aea:	f7fe f819 	bl	8001b20 <_exit>
	...

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4d0d      	ldr	r5, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2600      	movs	r6, #0
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4d0b      	ldr	r5, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f99a 	bl	8003e48 <_init>
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2600      	movs	r6, #0
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004060 	.word	0x08004060
 8003b38:	08004060 	.word	0x08004060
 8003b3c:	08004060 	.word	0x08004060
 8003b40:	08004064 	.word	0x08004064

08003b44 <malloc>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <malloc+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f000 b8a7 	b.w	8003c9c <_malloc_r>
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <free>:
 8003b54:	4b02      	ldr	r3, [pc, #8]	; (8003b60 <free+0xc>)
 8003b56:	4601      	mov	r1, r0
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f000 b833 	b.w	8003bc4 <_free_r>
 8003b5e:	bf00      	nop
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <memcpy>:
 8003b64:	440a      	add	r2, r1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	4770      	bx	lr
 8003b70:	b510      	push	{r4, lr}
 8003b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	d1f9      	bne.n	8003b72 <memcpy+0xe>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <memmove>:
 8003b80:	4288      	cmp	r0, r1
 8003b82:	b510      	push	{r4, lr}
 8003b84:	eb01 0402 	add.w	r4, r1, r2
 8003b88:	d902      	bls.n	8003b90 <memmove+0x10>
 8003b8a:	4284      	cmp	r4, r0
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	d807      	bhi.n	8003ba0 <memmove+0x20>
 8003b90:	1e43      	subs	r3, r0, #1
 8003b92:	42a1      	cmp	r1, r4
 8003b94:	d008      	beq.n	8003ba8 <memmove+0x28>
 8003b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b9e:	e7f8      	b.n	8003b92 <memmove+0x12>
 8003ba0:	4402      	add	r2, r0
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	428a      	cmp	r2, r1
 8003ba6:	d100      	bne.n	8003baa <memmove+0x2a>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bb2:	e7f7      	b.n	8003ba4 <memmove+0x24>

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_free_r>:
 8003bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	d044      	beq.n	8003c54 <_free_r+0x90>
 8003bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bce:	9001      	str	r0, [sp, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8003bd6:	bfb8      	it	lt
 8003bd8:	18e4      	addlt	r4, r4, r3
 8003bda:	f000 f927 	bl	8003e2c <__malloc_lock>
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <_free_r+0x94>)
 8003be0:	9801      	ldr	r0, [sp, #4]
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	b933      	cbnz	r3, 8003bf4 <_free_r+0x30>
 8003be6:	6063      	str	r3, [r4, #4]
 8003be8:	6014      	str	r4, [r2, #0]
 8003bea:	b003      	add	sp, #12
 8003bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bf0:	f000 b922 	b.w	8003e38 <__malloc_unlock>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d908      	bls.n	8003c0a <_free_r+0x46>
 8003bf8:	6825      	ldr	r5, [r4, #0]
 8003bfa:	1961      	adds	r1, r4, r5
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	bf01      	itttt	eq
 8003c00:	6819      	ldreq	r1, [r3, #0]
 8003c02:	685b      	ldreq	r3, [r3, #4]
 8003c04:	1949      	addeq	r1, r1, r5
 8003c06:	6021      	streq	r1, [r4, #0]
 8003c08:	e7ed      	b.n	8003be6 <_free_r+0x22>
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	b10b      	cbz	r3, 8003c14 <_free_r+0x50>
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d9fa      	bls.n	8003c0a <_free_r+0x46>
 8003c14:	6811      	ldr	r1, [r2, #0]
 8003c16:	1855      	adds	r5, r2, r1
 8003c18:	42a5      	cmp	r5, r4
 8003c1a:	d10b      	bne.n	8003c34 <_free_r+0x70>
 8003c1c:	6824      	ldr	r4, [r4, #0]
 8003c1e:	4421      	add	r1, r4
 8003c20:	1854      	adds	r4, r2, r1
 8003c22:	42a3      	cmp	r3, r4
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	d1e0      	bne.n	8003bea <_free_r+0x26>
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	6053      	str	r3, [r2, #4]
 8003c2e:	4421      	add	r1, r4
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	e7da      	b.n	8003bea <_free_r+0x26>
 8003c34:	d902      	bls.n	8003c3c <_free_r+0x78>
 8003c36:	230c      	movs	r3, #12
 8003c38:	6003      	str	r3, [r0, #0]
 8003c3a:	e7d6      	b.n	8003bea <_free_r+0x26>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf04      	itt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	bf04      	itt	eq
 8003c4c:	1949      	addeq	r1, r1, r5
 8003c4e:	6021      	streq	r1, [r4, #0]
 8003c50:	6054      	str	r4, [r2, #4]
 8003c52:	e7ca      	b.n	8003bea <_free_r+0x26>
 8003c54:	b003      	add	sp, #12
 8003c56:	bd30      	pop	{r4, r5, pc}
 8003c58:	20000124 	.word	0x20000124

08003c5c <sbrk_aligned>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4e0e      	ldr	r6, [pc, #56]	; (8003c98 <sbrk_aligned+0x3c>)
 8003c60:	460c      	mov	r4, r1
 8003c62:	6831      	ldr	r1, [r6, #0]
 8003c64:	4605      	mov	r5, r0
 8003c66:	b911      	cbnz	r1, 8003c6e <sbrk_aligned+0x12>
 8003c68:	f000 f88c 	bl	8003d84 <_sbrk_r>
 8003c6c:	6030      	str	r0, [r6, #0]
 8003c6e:	4621      	mov	r1, r4
 8003c70:	4628      	mov	r0, r5
 8003c72:	f000 f887 	bl	8003d84 <_sbrk_r>
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d00a      	beq.n	8003c90 <sbrk_aligned+0x34>
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d007      	beq.n	8003c94 <sbrk_aligned+0x38>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f87c 	bl	8003d84 <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d101      	bne.n	8003c94 <sbrk_aligned+0x38>
 8003c90:	f04f 34ff 	mov.w	r4, #4294967295
 8003c94:	4620      	mov	r0, r4
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	20000128 	.word	0x20000128

08003c9c <_malloc_r>:
 8003c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca0:	1ccd      	adds	r5, r1, #3
 8003ca2:	f025 0503 	bic.w	r5, r5, #3
 8003ca6:	3508      	adds	r5, #8
 8003ca8:	2d0c      	cmp	r5, #12
 8003caa:	bf38      	it	cc
 8003cac:	250c      	movcc	r5, #12
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	db01      	blt.n	8003cb8 <_malloc_r+0x1c>
 8003cb4:	42a9      	cmp	r1, r5
 8003cb6:	d905      	bls.n	8003cc4 <_malloc_r+0x28>
 8003cb8:	230c      	movs	r3, #12
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	2600      	movs	r6, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc4:	4e2e      	ldr	r6, [pc, #184]	; (8003d80 <_malloc_r+0xe4>)
 8003cc6:	f000 f8b1 	bl	8003e2c <__malloc_lock>
 8003cca:	6833      	ldr	r3, [r6, #0]
 8003ccc:	461c      	mov	r4, r3
 8003cce:	bb34      	cbnz	r4, 8003d1e <_malloc_r+0x82>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	f7ff ffc2 	bl	8003c5c <sbrk_aligned>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	4604      	mov	r4, r0
 8003cdc:	d14d      	bne.n	8003d7a <_malloc_r+0xde>
 8003cde:	6834      	ldr	r4, [r6, #0]
 8003ce0:	4626      	mov	r6, r4
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	d140      	bne.n	8003d68 <_malloc_r+0xcc>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4638      	mov	r0, r7
 8003cec:	eb04 0803 	add.w	r8, r4, r3
 8003cf0:	f000 f848 	bl	8003d84 <_sbrk_r>
 8003cf4:	4580      	cmp	r8, r0
 8003cf6:	d13a      	bne.n	8003d6e <_malloc_r+0xd2>
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	3503      	adds	r5, #3
 8003cfc:	1a6d      	subs	r5, r5, r1
 8003cfe:	f025 0503 	bic.w	r5, r5, #3
 8003d02:	3508      	adds	r5, #8
 8003d04:	2d0c      	cmp	r5, #12
 8003d06:	bf38      	it	cc
 8003d08:	250c      	movcc	r5, #12
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f7ff ffa5 	bl	8003c5c <sbrk_aligned>
 8003d12:	3001      	adds	r0, #1
 8003d14:	d02b      	beq.n	8003d6e <_malloc_r+0xd2>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	442b      	add	r3, r5
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	e00e      	b.n	8003d3c <_malloc_r+0xa0>
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	1b52      	subs	r2, r2, r5
 8003d22:	d41e      	bmi.n	8003d62 <_malloc_r+0xc6>
 8003d24:	2a0b      	cmp	r2, #11
 8003d26:	d916      	bls.n	8003d56 <_malloc_r+0xba>
 8003d28:	1961      	adds	r1, r4, r5
 8003d2a:	42a3      	cmp	r3, r4
 8003d2c:	6025      	str	r5, [r4, #0]
 8003d2e:	bf18      	it	ne
 8003d30:	6059      	strne	r1, [r3, #4]
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	bf08      	it	eq
 8003d36:	6031      	streq	r1, [r6, #0]
 8003d38:	5162      	str	r2, [r4, r5]
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	f104 060b 	add.w	r6, r4, #11
 8003d42:	f000 f879 	bl	8003e38 <__malloc_unlock>
 8003d46:	f026 0607 	bic.w	r6, r6, #7
 8003d4a:	1d23      	adds	r3, r4, #4
 8003d4c:	1af2      	subs	r2, r6, r3
 8003d4e:	d0b6      	beq.n	8003cbe <_malloc_r+0x22>
 8003d50:	1b9b      	subs	r3, r3, r6
 8003d52:	50a3      	str	r3, [r4, r2]
 8003d54:	e7b3      	b.n	8003cbe <_malloc_r+0x22>
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	bf0c      	ite	eq
 8003d5c:	6032      	streq	r2, [r6, #0]
 8003d5e:	605a      	strne	r2, [r3, #4]
 8003d60:	e7ec      	b.n	8003d3c <_malloc_r+0xa0>
 8003d62:	4623      	mov	r3, r4
 8003d64:	6864      	ldr	r4, [r4, #4]
 8003d66:	e7b2      	b.n	8003cce <_malloc_r+0x32>
 8003d68:	4634      	mov	r4, r6
 8003d6a:	6876      	ldr	r6, [r6, #4]
 8003d6c:	e7b9      	b.n	8003ce2 <_malloc_r+0x46>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4638      	mov	r0, r7
 8003d74:	f000 f860 	bl	8003e38 <__malloc_unlock>
 8003d78:	e7a1      	b.n	8003cbe <_malloc_r+0x22>
 8003d7a:	6025      	str	r5, [r4, #0]
 8003d7c:	e7de      	b.n	8003d3c <_malloc_r+0xa0>
 8003d7e:	bf00      	nop
 8003d80:	20000124 	.word	0x20000124

08003d84 <_sbrk_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4d06      	ldr	r5, [pc, #24]	; (8003da0 <_sbrk_r+0x1c>)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	602b      	str	r3, [r5, #0]
 8003d90:	f7fd fed0 	bl	8001b34 <_sbrk>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_sbrk_r+0x1a>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_sbrk_r+0x1a>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	2000012c 	.word	0x2000012c

08003da4 <_raise_r>:
 8003da4:	291f      	cmp	r1, #31
 8003da6:	b538      	push	{r3, r4, r5, lr}
 8003da8:	4604      	mov	r4, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	d904      	bls.n	8003db8 <_raise_r+0x14>
 8003dae:	2316      	movs	r3, #22
 8003db0:	6003      	str	r3, [r0, #0]
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dba:	b112      	cbz	r2, 8003dc2 <_raise_r+0x1e>
 8003dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003dc0:	b94b      	cbnz	r3, 8003dd6 <_raise_r+0x32>
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 f830 	bl	8003e28 <_getpid_r>
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4601      	mov	r1, r0
 8003dcc:	4620      	mov	r0, r4
 8003dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd2:	f000 b817 	b.w	8003e04 <_kill_r>
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d00a      	beq.n	8003df0 <_raise_r+0x4c>
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	d103      	bne.n	8003de6 <_raise_r+0x42>
 8003dde:	2316      	movs	r3, #22
 8003de0:	6003      	str	r3, [r0, #0]
 8003de2:	2001      	movs	r0, #1
 8003de4:	e7e7      	b.n	8003db6 <_raise_r+0x12>
 8003de6:	2400      	movs	r4, #0
 8003de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003dec:	4628      	mov	r0, r5
 8003dee:	4798      	blx	r3
 8003df0:	2000      	movs	r0, #0
 8003df2:	e7e0      	b.n	8003db6 <_raise_r+0x12>

08003df4 <raise>:
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <raise+0xc>)
 8003df6:	4601      	mov	r1, r0
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f7ff bfd3 	b.w	8003da4 <_raise_r>
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <_kill_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d07      	ldr	r5, [pc, #28]	; (8003e24 <_kill_r+0x20>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	602b      	str	r3, [r5, #0]
 8003e12:	f7fd fe75 	bl	8001b00 <_kill>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	d102      	bne.n	8003e20 <_kill_r+0x1c>
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	b103      	cbz	r3, 8003e20 <_kill_r+0x1c>
 8003e1e:	6023      	str	r3, [r4, #0]
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	bf00      	nop
 8003e24:	2000012c 	.word	0x2000012c

08003e28 <_getpid_r>:
 8003e28:	f7fd be62 	b.w	8001af0 <_getpid>

08003e2c <__malloc_lock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__malloc_lock+0x8>)
 8003e2e:	f000 b809 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	20000130 	.word	0x20000130

08003e38 <__malloc_unlock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__malloc_unlock+0x8>)
 8003e3a:	f000 b804 	b.w	8003e46 <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	20000130 	.word	0x20000130

08003e44 <__retarget_lock_acquire_recursive>:
 8003e44:	4770      	bx	lr

08003e46 <__retarget_lock_release_recursive>:
 8003e46:	4770      	bx	lr

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
