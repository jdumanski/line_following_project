
MTE_380_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800730c  0800730c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007314  08007314  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800731c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  0800738c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800738c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e292  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002623  00000000  00000000  0003e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00040958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00041b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac02  00000000  00000000  00042d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010830  00000000  00000000  0005d902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5686  00000000  00000000  0006e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001137b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb4  00000000  00000000  00113808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007008 	.word	0x08007008

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08007008 	.word	0x08007008

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b974 	b.w	8000e10 <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9d08      	ldr	r5, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	468e      	mov	lr, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14d      	bne.n	8000bea <__udivmoddi4+0xaa>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4694      	mov	ip, r2
 8000b52:	d969      	bls.n	8000c28 <__udivmoddi4+0xe8>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b152      	cbz	r2, 8000b70 <__udivmoddi4+0x30>
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	f1c2 0120 	rsb	r1, r2, #32
 8000b62:	fa20 f101 	lsr.w	r1, r0, r1
 8000b66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6e:	4094      	lsls	r4, r2
 8000b70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b74:	0c21      	lsrs	r1, r4, #16
 8000b76:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7a:	fa1f f78c 	uxth.w	r7, ip
 8000b7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b86:	fb06 f107 	mul.w	r1, r6, r7
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x64>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b96:	f080 811f 	bcs.w	8000dd8 <__udivmoddi4+0x298>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 811c 	bls.w	8000dd8 <__udivmoddi4+0x298>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 f707 	mul.w	r7, r0, r7
 8000bb8:	42a7      	cmp	r7, r4
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x92>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	f080 810a 	bcs.w	8000ddc <__udivmoddi4+0x29c>
 8000bc8:	42a7      	cmp	r7, r4
 8000bca:	f240 8107 	bls.w	8000ddc <__udivmoddi4+0x29c>
 8000bce:	4464      	add	r4, ip
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd6:	1be4      	subs	r4, r4, r7
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa4>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xc2>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	f000 80ef 	beq.w	8000dd2 <__udivmoddi4+0x292>
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f683 	clz	r6, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d14a      	bne.n	8000ca0 <__udivmoddi4+0x160>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd4>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80f9 	bhi.w	8000e06 <__udivmoddi4+0x2c6>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa4>
 8000c22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa4>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xec>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 8092 	bne.w	8000d5a <__udivmoddi4+0x21a>
 8000c36:	eba1 010c 	sub.w	r1, r1, ip
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	2601      	movs	r6, #1
 8000c44:	0c20      	lsrs	r0, r4, #16
 8000c46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c52:	fb0e f003 	mul.w	r0, lr, r3
 8000c56:	4288      	cmp	r0, r1
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x12c>
 8000c5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x12a>
 8000c64:	4288      	cmp	r0, r1
 8000c66:	f200 80cb 	bhi.w	8000e00 <__udivmoddi4+0x2c0>
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1110 	mls	r1, r7, r0, r1
 8000c78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x156>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x154>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f200 80bb 	bhi.w	8000e0a <__udivmoddi4+0x2ca>
 8000c94:	4608      	mov	r0, r1
 8000c96:	eba4 040e 	sub.w	r4, r4, lr
 8000c9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9e:	e79c      	b.n	8000bda <__udivmoddi4+0x9a>
 8000ca0:	f1c6 0720 	rsb	r7, r6, #32
 8000ca4:	40b3      	lsls	r3, r6
 8000ca6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000caa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cae:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	40f9      	lsrs	r1, r7
 8000cba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc6:	0c20      	lsrs	r0, r4, #16
 8000cc8:	fa1f fe8c 	uxth.w	lr, ip
 8000ccc:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	fa02 f206 	lsl.w	r2, r2, r6
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b8>
 8000ce0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce8:	f080 8088 	bcs.w	8000dfc <__udivmoddi4+0x2bc>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f240 8085 	bls.w	8000dfc <__udivmoddi4+0x2bc>
 8000cf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d00:	fb09 1110 	mls	r1, r9, r0, r1
 8000d04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	458e      	cmp	lr, r1
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1e2>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d18:	d26c      	bcs.n	8000df4 <__udivmoddi4+0x2b4>
 8000d1a:	458e      	cmp	lr, r1
 8000d1c:	d96a      	bls.n	8000df4 <__udivmoddi4+0x2b4>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4461      	add	r1, ip
 8000d22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d26:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2a:	eba1 010e 	sub.w	r1, r1, lr
 8000d2e:	42a1      	cmp	r1, r4
 8000d30:	46c8      	mov	r8, r9
 8000d32:	46a6      	mov	lr, r4
 8000d34:	d356      	bcc.n	8000de4 <__udivmoddi4+0x2a4>
 8000d36:	d053      	beq.n	8000de0 <__udivmoddi4+0x2a0>
 8000d38:	b15d      	cbz	r5, 8000d52 <__udivmoddi4+0x212>
 8000d3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d42:	fa01 f707 	lsl.w	r7, r1, r7
 8000d46:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4a:	40f1      	lsrs	r1, r6
 8000d4c:	431f      	orrs	r7, r3
 8000d4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d52:	2600      	movs	r6, #0
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	f1c2 0320 	rsb	r3, r2, #32
 8000d5e:	40d8      	lsrs	r0, r3
 8000d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d64:	fa21 f303 	lsr.w	r3, r1, r3
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4301      	orrs	r1, r0
 8000d6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d78:	fb07 3610 	mls	r6, r7, r0, r3
 8000d7c:	0c0b      	lsrs	r3, r1, #16
 8000d7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d82:	fb00 f60e 	mul.w	r6, r0, lr
 8000d86:	429e      	cmp	r6, r3
 8000d88:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x260>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d96:	d22f      	bcs.n	8000df8 <__udivmoddi4+0x2b8>
 8000d98:	429e      	cmp	r6, r3
 8000d9a:	d92d      	bls.n	8000df8 <__udivmoddi4+0x2b8>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4463      	add	r3, ip
 8000da0:	1b9b      	subs	r3, r3, r6
 8000da2:	b289      	uxth	r1, r1
 8000da4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db0:	fb06 f30e 	mul.w	r3, r6, lr
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x28a>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc0:	d216      	bcs.n	8000df0 <__udivmoddi4+0x2b0>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d914      	bls.n	8000df0 <__udivmoddi4+0x2b0>
 8000dc6:	3e02      	subs	r6, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd0:	e738      	b.n	8000c44 <__udivmoddi4+0x104>
 8000dd2:	462e      	mov	r6, r5
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	e705      	b.n	8000be4 <__udivmoddi4+0xa4>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	e6e3      	b.n	8000ba4 <__udivmoddi4+0x64>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6f8      	b.n	8000bd2 <__udivmoddi4+0x92>
 8000de0:	454b      	cmp	r3, r9
 8000de2:	d2a9      	bcs.n	8000d38 <__udivmoddi4+0x1f8>
 8000de4:	ebb9 0802 	subs.w	r8, r9, r2
 8000de8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dec:	3801      	subs	r0, #1
 8000dee:	e7a3      	b.n	8000d38 <__udivmoddi4+0x1f8>
 8000df0:	4646      	mov	r6, r8
 8000df2:	e7ea      	b.n	8000dca <__udivmoddi4+0x28a>
 8000df4:	4620      	mov	r0, r4
 8000df6:	e794      	b.n	8000d22 <__udivmoddi4+0x1e2>
 8000df8:	4640      	mov	r0, r8
 8000dfa:	e7d1      	b.n	8000da0 <__udivmoddi4+0x260>
 8000dfc:	46d0      	mov	r8, sl
 8000dfe:	e77b      	b.n	8000cf8 <__udivmoddi4+0x1b8>
 8000e00:	3b02      	subs	r3, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	e732      	b.n	8000c6c <__udivmoddi4+0x12c>
 8000e06:	4630      	mov	r0, r6
 8000e08:	e709      	b.n	8000c1e <__udivmoddi4+0xde>
 8000e0a:	4464      	add	r4, ip
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	e742      	b.n	8000c96 <__udivmoddi4+0x156>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	ed87 0b00 	vstr	d0, [r7]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000e3e:	ec43 2b17 	vmov	d7, r2, r3
 8000e42:	eeb0 0a47 	vmov.f32	s0, s14
 8000e46:	eef0 0a67 	vmov.f32	s1, s15
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	0fdb      	lsrs	r3, r3, #31
 8000e62:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <_ZNSt7__cxx119to_stringEi+0x1c>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	e000      	b.n	8000e72 <_ZNSt7__cxx119to_stringEi+0x1e>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000e74:	210a      	movs	r1, #10
 8000e76:	6938      	ldr	r0, [r7, #16]
 8000e78:	f001 fcc1 	bl	80027fe <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8000e7c:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8000e7e:	7dfa      	ldrb	r2, [r7, #23]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d4      	adds	r4, r2, r3
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f886 	bl	8005f9a <_ZNSaIcEC1Ev>
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	222d      	movs	r2, #45	; 0x2d
 8000e94:	4621      	mov	r1, r4
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f005 fa12 	bl	80062c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 f87b 	bl	8005f9c <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f005 fa3b 	bl	8006326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68f9      	ldr	r1, [r7, #12]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fce0 	bl	800287c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8000ebc:	bf00      	nop
  }
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}

08000ec6 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed4:	d205      	bcs.n	8000ee2 <_ZSt16__deque_buf_sizej+0x1c>
 8000ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	e000      	b.n	8000ee4 <_ZSt16__deque_buf_sizej+0x1e>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZN5ColorC1Eiii>:
struct Color
{
	int r = 0;
	int g = 0;
	int b = 0;
	Color(int r, int g, int b) : r(r), g(g), b(b){}
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_ZN5Color12getMagnitudeEv>:
	double getMagnitude(){
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
		return sqrt(r*r+g*g+b*b);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	fb03 f202 	mul.w	r2, r3, r2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	6849      	ldr	r1, [r1, #4]
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	441a      	add	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	6889      	ldr	r1, [r1, #8]
 8000f48:	fb01 f303 	mul.w	r3, r1, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fcea 	bl	8002928 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000f54:	eeb0 7a40 	vmov.f32	s14, s0
 8000f58:	eef0 7a60 	vmov.f32	s15, s1
	}
 8000f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f60:	eef0 0a67 	vmov.f32	s1, s15
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN5Color10dotProductES_>:
	double dotProduct(Color other){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	4638      	mov	r0, r7
 8000f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		return r*other.r + g*other.g + b*other.b;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	fb03 f202 	mul.w	r2, r3, r2
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	fb01 f303 	mul.w	r3, r1, r3
 8000f8c:	441a      	add	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	fb01 f303 	mul.w	r3, r1, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fa76 	bl	800048c <__aeabi_i2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	ec43 2b17 	vmov	d7, r2, r3
	}
 8000fa8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fac:	eef0 0a67 	vmov.f32	s1, s15
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZN5Color16cosineSimilarityES_>:
	double cosineSimilarity(Color otherC){
 8000fb6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		return dotProduct(otherC)/(getMagnitude()*otherC.getMagnitude());
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff ffcd 	bl	8000f6a <_ZN5Color10dotProductES_>
 8000fd0:	ec55 4b10 	vmov	r4, r5, d0
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ffa2 	bl	8000f1e <_ZN5Color12getMagnitudeEv>
 8000fda:	ec59 8b10 	vmov	r8, r9, d0
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff9c 	bl	8000f1e <_ZN5Color12getMagnitudeEv>
 8000fe6:	ec53 2b10 	vmov	r2, r3, d0
 8000fea:	4640      	mov	r0, r8
 8000fec:	4649      	mov	r1, r9
 8000fee:	f7ff fab7 	bl	8000560 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f7ff fbdb 	bl	80007b4 <__aeabi_ddiv>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	ec43 2b17 	vmov	d7, r2, r3
	}
 8001006:	eeb0 0a47 	vmov.f32	s0, s14
 800100a:	eef0 0a67 	vmov.f32	s1, s15
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001016 <_Z14USART_TransmitP20__UART_HandleTypeDefPh>:
};

void USART_Transmit(UART_HandleTypeDef *huart, uint8_t *TextString) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
	while (TextString[TextStringLength++] != '\0')
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	73fa      	strb	r2, [r7, #15]
 800102a:	461a      	mov	r2, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf14      	ite	ne
 8001036:	2301      	movne	r3, #1
 8001038:	2300      	moveq	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d000      	beq.n	8001042 <_Z14USART_TransmitP20__UART_HandleTypeDefPh+0x2c>
 8001040:	e7f0      	b.n	8001024 <_Z14USART_TransmitP20__UART_HandleTypeDefPh+0xe>
		;
	TextStringLength--;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3b01      	subs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	b29a      	uxth	r2, r3
 800104c:	230a      	movs	r3, #10
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f004 fc1a 	bl	800588a <HAL_UART_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_Z14calcTotalCountiii>:


// calculates total number of counts between start and end count values
//
int calcTotalCount(int c1, int c0, int cMax){
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
	if(c0 <= c1){
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	429a      	cmp	r2, r3
 8001070:	dc03      	bgt.n	800107a <_Z14calcTotalCountiii+0x1c>
		return c1-c0;
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	e004      	b.n	8001084 <_Z14calcTotalCountiii+0x26>
	}
	return c1 + cMax - c0;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	441a      	add	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1ad3      	subs	r3, r2, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_Z10calcPeriodP12GPIO_TypeDeft>:

// returns period
// uses low period
int calcPeriod(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	uint8_t prev = 2; //prev output value (initially set as 2 bc output values can either be 0 or 1
 800109c:	2302      	movs	r3, #2
 800109e:	75fb      	strb	r3, [r7, #23]

	//time per count is 0.00001 sec
	const int MAX_TIME = 65535;
 80010a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a4:	60fb      	str	r3, [r7, #12]
	bool started = false;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75bb      	strb	r3, [r7, #22]

	HAL_TIM_Base_Start(&htim11);
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 80010ac:	f004 f8f6 	bl	800529c <HAL_TIM_Base_Start>
	int t0 = __HAL_TIM_GET_COUNTER(&htim11);
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	613b      	str	r3, [r7, #16]

	do{
		GPIO_PinState output = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f004 f837 	bl	8005130 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	72fb      	strb	r3, [r7, #11]
		if(output==GPIO_PIN_RESET && prev==1){
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <_Z10calcPeriodP12GPIO_TypeDeft+0x50>
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d106      	bne.n	80010e0 <_Z10calcPeriodP12GPIO_TypeDeft+0x50>
			started = true;
 80010d2:	2301      	movs	r3, #1
 80010d4:	75bb      	strb	r3, [r7, #22]
			t0 = __HAL_TIM_GET_COUNTER(&htim11);
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e013      	b.n	8001108 <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
		}else if(started && output==GPIO_PIN_SET && prev==0){
 80010e0:	7dbb      	ldrb	r3, [r7, #22]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d010      	beq.n	8001108 <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10d      	bne.n	8001108 <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10a      	bne.n	8001108 <_Z10calcPeriodP12GPIO_TypeDeft+0x78>
			return calcTotalCount(__HAL_TIM_GET_COUNTER(&htim11), t0, MAX_TIME);
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	6939      	ldr	r1, [r7, #16]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ffad 	bl	800105e <_Z14calcTotalCountiii>
 8001104:	4603      	mov	r3, r0
 8001106:	e01d      	b.n	8001144 <_Z10calcPeriodP12GPIO_TypeDeft+0xb4>
		}
		prev = output;
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	75fb      	strb	r3, [r7, #23]
	}while(calcTotalCount(__HAL_TIM_GET_COUNTER(&htim11), t0, MAX_TIME) < MAX_TIME || !started); //if we have started (encountered falling edge)
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <_Z10calcPeriodP12GPIO_TypeDeft+0xbc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffa0 	bl	800105e <_Z14calcTotalCountiii>
 800111e:	4603      	mov	r3, r0
 8001120:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001124:	4293      	cmp	r3, r2
 8001126:	dd05      	ble.n	8001134 <_Z10calcPeriodP12GPIO_TypeDeft+0xa4>
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <_Z10calcPeriodP12GPIO_TypeDeft+0xa8>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <_Z10calcPeriodP12GPIO_TypeDeft+0xaa>
 8001138:	2300      	movs	r3, #0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d000      	beq.n	8001140 <_Z10calcPeriodP12GPIO_TypeDeft+0xb0>
	do{
 800113e:	e7bb      	b.n	80010b8 <_Z10calcPeriodP12GPIO_TypeDeft+0x28>

	return -1; //if timer counts beyond max val (shouldn't happen -> max val is 0.65535 sec and max freq of output is 2Hz which has half period (since we only measure half period - time when signal is continuously low within a period) of 0.25 sec)
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000011c 	.word	0x2000011c

08001150 <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	da01      	bge.n	800116a <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	e000      	b.n	800116c <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800116a:	687b      	ldr	r3, [r7, #4]
    }
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_Z14normalizeToRGBiii>:

Color normalizeToRGB(int r, int g, int b){
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
	if(r<0 || b < 0 || g < 0){
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db05      	blt.n	8001198 <_Z14normalizeToRGBiii+0x20>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db02      	blt.n	8001198 <_Z14normalizeToRGBiii+0x20>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	da06      	bge.n	80011a6 <_Z14normalizeToRGBiii+0x2e>
		return Color(0, 0, 0);
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff fea6 	bl	8000ef0 <_ZN5ColorC1Eiii>
 80011a4:	e066      	b.n	8001274 <_Z14normalizeToRGBiii+0xfc>
	}
	double maxChannelVal = std::max(std::max(r, g), b);
 80011a6:	1d3a      	adds	r2, r7, #4
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffce 	bl	8001150 <_ZSt3maxIiERKT_S2_S2_>
 80011b4:	4602      	mov	r2, r0
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f7ff ffc8 	bl	8001150 <_ZSt3maxIiERKT_S2_S2_>
 80011c0:	4603      	mov	r3, r0
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f961 	bl	800048c <__aeabi_i2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int red = r / maxChannelVal * 255;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f959 	bl	800048c <__aeabi_i2d>
 80011da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011de:	f7ff fae9 	bl	80007b4 <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a325      	add	r3, pc, #148	; (adr r3, 8001280 <_Z14normalizeToRGBiii+0x108>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f9b6 	bl	8000560 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc60 	bl	8000ac0 <__aeabi_d2iz>
 8001200:	4603      	mov	r3, r0
 8001202:	61fb      	str	r3, [r7, #28]
	int green = g / maxChannelVal * 255;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f940 	bl	800048c <__aeabi_i2d>
 800120c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001210:	f7ff fad0 	bl	80007b4 <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a318      	add	r3, pc, #96	; (adr r3, 8001280 <_Z14normalizeToRGBiii+0x108>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f99d 	bl	8000560 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fc47 	bl	8000ac0 <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
	int blue = b / maxChannelVal * 255;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f927 	bl	800048c <__aeabi_i2d>
 800123e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001242:	f7ff fab7 	bl	80007b4 <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a30c      	add	r3, pc, #48	; (adr r3, 8001280 <_Z14normalizeToRGBiii+0x108>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f984 	bl	8000560 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc2e 	bl	8000ac0 <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	617b      	str	r3, [r7, #20]
	return Color(red, green, blue);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	69f9      	ldr	r1, [r7, #28]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fe3e 	bl	8000ef0 <_ZN5ColorC1Eiii>
}
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	00000000 	.word	0x00000000
 8001284:	406fe000 	.word	0x406fe000

08001288 <_Z13differentiatedddd>:
		return -distance;
	}
	return distance;
}

double differentiate(double fn, double fn_1, double fn_2, double timeStep){
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001292:	ed87 1b04 	vstr	d1, [r7, #16]
 8001296:	ed87 2b02 	vstr	d2, [r7, #8]
 800129a:	ed87 3b00 	vstr	d3, [r7]
	return (3*fn-4*fn_1+fn_2)/(2*timeStep);
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <_Z13differentiatedddd+0x8c>)
 80012a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012a8:	f7ff f95a 	bl	8000560 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4614      	mov	r4, r2
 80012b2:	461d      	mov	r5, r3
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <_Z13differentiatedddd+0x90>)
 80012ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012be:	f7ff f94f 	bl	8000560 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7fe ff91 	bl	80001f0 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012da:	f7fe ff8b 	bl	80001f4 <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	f7fe ff81 	bl	80001f4 <__adddf3>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7ff fa5b 	bl	80007b4 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b17 	vmov	d7, r2, r3
}
 8001306:	eeb0 0a47 	vmov.f32	s0, s14
 800130a:	eef0 0a67 	vmov.f32	s1, s15
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	40080000 	.word	0x40080000
 8001318:	40100000 	.word	0x40100000

0800131c <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	2301      	movs	r3, #1
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd>:

//vector is in order of s3, s2, f
Color extractColorFromSensor(std::vector<std::pair<GPIO_TypeDef*, uint16_t>> pins, double timerPeriod){
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	ed87 0b00 	vstr	d0, [r7]
	//set output to red channel
	HAL_GPIO_WritePin(pins[0].first, pins[0].second, GPIO_PIN_RESET); //s3
 8001342:	2100      	movs	r1, #0
 8001344:	68b8      	ldr	r0, [r7, #8]
 8001346:	f001 fb07 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 800134a:	4603      	mov	r3, r0
 800134c:	681c      	ldr	r4, [r3, #0]
 800134e:	2100      	movs	r1, #0
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f001 fb01 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001356:	4603      	mov	r3, r0
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	4620      	mov	r0, r4
 8001360:	f003 fefe 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pins[1].first, pins[1].second, GPIO_PIN_RESET); //s2
 8001364:	2101      	movs	r1, #1
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f001 faf6 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 800136c:	4603      	mov	r3, r0
 800136e:	681c      	ldr	r4, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f001 faf0 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001378:	4603      	mov	r3, r0
 800137a:	889b      	ldrh	r3, [r3, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	4620      	mov	r0, r4
 8001382:	f003 feed 	bl	8005160 <HAL_GPIO_WritePin>
	int redPeriod = calcPeriod(pins[2].first, pins[2].second);
 8001386:	2102      	movs	r1, #2
 8001388:	68b8      	ldr	r0, [r7, #8]
 800138a:	f001 fae5 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 800138e:	4603      	mov	r3, r0
 8001390:	681c      	ldr	r4, [r3, #0]
 8001392:	2102      	movs	r1, #2
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f001 fadf 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 800139a:	4603      	mov	r3, r0
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fe75 	bl	8001090 <_Z10calcPeriodP12GPIO_TypeDeft>
 80013a6:	6278      	str	r0, [r7, #36]	; 0x24
	int redFreq = 1.0 / (2 * redPeriod * timerPeriod);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f86d 	bl	800048c <__aeabi_i2d>
 80013b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013b6:	f7ff f8d3 	bl	8000560 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	4955      	ldr	r1, [pc, #340]	; (8001518 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd+0x1e4>)
 80013c4:	f7ff f9f6 	bl	80007b4 <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb76 	bl	8000ac0 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	623b      	str	r3, [r7, #32]

	//set output to green channel
	HAL_GPIO_WritePin(pins[0].first, pins[0].second, GPIO_PIN_SET); //s3
 80013d8:	2100      	movs	r1, #0
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f001 fabc 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 80013e0:	4603      	mov	r3, r0
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	2100      	movs	r1, #0
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f001 fab6 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 80013ec:	4603      	mov	r3, r0
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	4620      	mov	r0, r4
 80013f6:	f003 feb3 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pins[1].first, pins[1].second, GPIO_PIN_SET); //s2
 80013fa:	2101      	movs	r1, #1
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f001 faab 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001402:	4603      	mov	r3, r0
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f001 faa5 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 800140e:	4603      	mov	r3, r0
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	4619      	mov	r1, r3
 8001416:	4620      	mov	r0, r4
 8001418:	f003 fea2 	bl	8005160 <HAL_GPIO_WritePin>
	int greenPeriod = calcPeriod(pins[2].first, pins[2].second);
 800141c:	2102      	movs	r1, #2
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f001 fa9a 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001424:	4603      	mov	r3, r0
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	2102      	movs	r1, #2
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f001 fa94 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001430:	4603      	mov	r3, r0
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	4619      	mov	r1, r3
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fe2a 	bl	8001090 <_Z10calcPeriodP12GPIO_TypeDeft>
 800143c:	61f8      	str	r0, [r7, #28]
	int greenFreq = 1.0 / (2 * greenPeriod * timerPeriod);
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f822 	bl	800048c <__aeabi_i2d>
 8001448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144c:	f7ff f888 	bl	8000560 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	492f      	ldr	r1, [pc, #188]	; (8001518 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd+0x1e4>)
 800145a:	f7ff f9ab 	bl	80007b4 <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fb2b 	bl	8000ac0 <__aeabi_d2iz>
 800146a:	4603      	mov	r3, r0
 800146c:	61bb      	str	r3, [r7, #24]

	//set output to blue channel
	HAL_GPIO_WritePin(pins[0].first, pins[0].second, GPIO_PIN_SET); //s3
 800146e:	2100      	movs	r1, #0
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f001 fa71 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001476:	4603      	mov	r3, r0
 8001478:	681c      	ldr	r4, [r3, #0]
 800147a:	2100      	movs	r1, #0
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f001 fa6b 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001482:	4603      	mov	r3, r0
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	4620      	mov	r0, r4
 800148c:	f003 fe68 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pins[1].first, pins[1].second, GPIO_PIN_RESET); //s2
 8001490:	2101      	movs	r1, #1
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f001 fa60 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 8001498:	4603      	mov	r3, r0
 800149a:	681c      	ldr	r4, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f001 fa5a 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 80014a4:	4603      	mov	r3, r0
 80014a6:	889b      	ldrh	r3, [r3, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4620      	mov	r0, r4
 80014ae:	f003 fe57 	bl	8005160 <HAL_GPIO_WritePin>
	int bluePeriod = calcPeriod(pins[2].first, pins[2].second);
 80014b2:	2102      	movs	r1, #2
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f001 fa4f 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 80014ba:	4603      	mov	r3, r0
 80014bc:	681c      	ldr	r4, [r3, #0]
 80014be:	2102      	movs	r1, #2
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f001 fa49 	bl	8002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>
 80014c6:	4603      	mov	r3, r0
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fddf 	bl	8001090 <_Z10calcPeriodP12GPIO_TypeDeft>
 80014d2:	6178      	str	r0, [r7, #20]
	int blueFreq = 1.0 / (2 * bluePeriod * timerPeriod);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffd7 	bl	800048c <__aeabi_i2d>
 80014de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014e2:	f7ff f83d 	bl	8000560 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd+0x1e4>)
 80014f0:	f7ff f960 	bl	80007b4 <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fae0 	bl	8000ac0 <__aeabi_d2iz>
 8001500:	4603      	mov	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

	return normalizeToRGB(redFreq, greenFreq, blueFreq);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	6a39      	ldr	r1, [r7, #32]
 800150c:	f7ff fe34 	bl	8001178 <_Z14normalizeToRGBiii>
}
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	372c      	adds	r7, #44	; 0x2c
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	3ff00000 	.word	0x3ff00000
 800151c:	00000000 	.word	0x00000000

08001520 <_Z9calcError5ColorS_>:

//returns error is deg
double calcError(Color left, Color right){
 8001520:	b082      	sub	sp, #8
 8001522:	b5b0      	push	{r4, r5, r7, lr}
 8001524:	b088      	sub	sp, #32
 8001526:	af00      	add	r7, sp, #0
 8001528:	1d3c      	adds	r4, r7, #4
 800152a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
	Color red(255, 75, 107);
 8001530:	f107 0010 	add.w	r0, r7, #16
 8001534:	236b      	movs	r3, #107	; 0x6b
 8001536:	224b      	movs	r2, #75	; 0x4b
 8001538:	21ff      	movs	r1, #255	; 0xff
 800153a:	f7ff fcd9 	bl	8000ef0 <_ZN5ColorC1Eiii>
	// if left more similar to red, drifting to right, therefore displacement is negative, so error is positive;
	int sign = left.cosineSimilarity(red) > right.cosineSimilarity(red) ? 1 : -1;
 800153e:	1d38      	adds	r0, r7, #4
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	f7ff fd36 	bl	8000fb6 <_ZN5Color16cosineSimilarityES_>
 800154a:	ec55 4b10 	vmov	r4, r5, d0
 800154e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001558:	f7ff fd2d 	bl	8000fb6 <_ZN5Color16cosineSimilarityES_>
 800155c:	ec53 2b10 	vmov	r2, r3, d0
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7ff fa8c 	bl	8000a80 <__aeabi_dcmpgt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <_Z9calcError5ColorS_+0x52>
 800156e:	2301      	movs	r3, #1
 8001570:	e001      	b.n	8001576 <_Z9calcError5ColorS_+0x56>
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	61fb      	str	r3, [r7, #28]
	return sign * (acos(left.cosineSimilarity(right))*180/M_PI);
 8001578:	69f8      	ldr	r0, [r7, #28]
 800157a:	f7fe ff87 	bl	800048c <__aeabi_i2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	1d38      	adds	r0, r7, #4
 8001584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158a:	f7ff fd14 	bl	8000fb6 <_ZN5Color16cosineSimilarityES_>
 800158e:	eeb0 7a40 	vmov.f32	s14, s0
 8001592:	eef0 7a60 	vmov.f32	s15, s1
 8001596:	eeb0 0a47 	vmov.f32	s0, s14
 800159a:	eef0 0a67 	vmov.f32	s1, s15
 800159e:	f004 fffb 	bl	8006598 <acos>
 80015a2:	ec51 0b10 	vmov	r0, r1, d0
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_Z9calcError5ColorS_+0xd8>)
 80015ac:	f7fe ffd8 	bl	8000560 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a30d      	add	r3, pc, #52	; (adr r3, 80015f0 <_Z9calcError5ColorS_+0xd0>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f8f9 	bl	80007b4 <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe ffc9 	bl	8000560 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80015d6:	eeb0 0a47 	vmov.f32	s0, s14
 80015da:	eef0 0a67 	vmov.f32	s1, s15
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015e6:	b002      	add	sp, #8
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	40668000 	.word	0x40668000

080015fc <_Z12averageErrorRKSt5dequeIiSaIiEEi>:

double averageError(std::deque<int> const& errors, int iters=0){
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	if(iters==0){
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <_Z12averageErrorRKSt5dequeIiSaIiEEi+0x1a>
		iters = errors.size();
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 f9b3 	bl	8002978 <_ZNKSt5dequeIiSaIiEE4sizeEv>
 8001612:	4603      	mov	r3, r0
 8001614:	603b      	str	r3, [r7, #0]
	}
	int sum = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
	for(auto it = errors.begin(); i < iters; i++, it++){
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f001 f9b9 	bl	800299c <_ZNKSt5dequeIiSaIiEE5beginEv>
 800162a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	da15      	bge.n	800165e <_Z12averageErrorRKSt5dequeIiSaIiEEi+0x62>
		sum += *it;
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f001 f9ed 	bl	8002a16 <_ZNKSt15_Deque_iteratorIiRKiPS0_EdeEv>
 800163c:	4603      	mov	r3, r0
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001642:	4413      	add	r3, r2
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(auto it = errors.begin(); i < iters; i++, it++){
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	3301      	adds	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	f107 0108 	add.w	r1, r7, #8
 8001654:	2200      	movs	r2, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f001 f9cb 	bl	80029f2 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEi>
 800165c:	e7e5      	b.n	800162a <_Z12averageErrorRKSt5dequeIiSaIiEEi+0x2e>
	}
	return (double)sum/iters;
 800165e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001660:	f7fe ff14 	bl	800048c <__aeabi_i2d>
 8001664:	4604      	mov	r4, r0
 8001666:	460d      	mov	r5, r1
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7fe ff0f 	bl	800048c <__aeabi_i2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7ff f89d 	bl	80007b4 <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001682:	eeb0 0a47 	vmov.f32	s0, s14
 8001686:	eef0 0a67 	vmov.f32	s1, s15
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bdb0      	pop	{r4, r5, r7, pc}

08001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f001 f9f9 	bl	8002a94 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80016a2:	4603      	mov	r3, r0
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f001 f9fd 	bl	8002aaa <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80016b0:	4603      	mov	r3, r0
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	809a      	strh	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	0000      	movs	r0, r0
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <main>:

int main(void) {
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 80016d0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016d2:	f003 fa51 	bl	8004b78 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016d6:	f000 ff6d 	bl	80025b4 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 80016da:	f000 ff3d 	bl	8002558 <_ZL19MX_USART2_UART_Initv>
	MX_TIM11_Init();
 80016de:	f001 f85f 	bl	80027a0 <_ZL13MX_TIM11_Initv>
	MX_TIM10_Init();
 80016e2:	f001 f833 	bl	800274c <_ZL13MX_TIM10_Initv>
	MX_TIM3_Init();
 80016e6:	f000 ffd3 	bl	8002690 <_ZL12MX_TIM3_Initv>
	Tim2_Ch1_Init(); //32-bit resolution
 80016ea:	f002 fcff 	bl	80040ec <Tim2_Ch1_Init>
	Tim4_Ch1_Init();
 80016ee:	f002 fd59 	bl	80041a4 <Tim4_Ch1_Init>

	//Right color sensor -------------------------------------------------------------------------------

	//PC9
	GPIO_InitTypeDef freq_r; // color sensor frequency output
	freq_r.Pin = GPIO_PIN_9;
 80016f2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80016f6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	601a      	str	r2, [r3, #0]
	freq_r.Mode = GPIO_MODE_INPUT;
 8001700:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001704:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
	freq_r.Pull = GPIO_NOPULL;
 800170c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001710:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
	freq_r.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001718:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800171c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &freq_r);
 8001724:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001728:	4619      	mov	r1, r3
 800172a:	48d9      	ldr	r0, [pc, #868]	; (8001a90 <main+0x3c8>)
 800172c:	f003 fb7c 	bl	8004e28 <HAL_GPIO_Init>

	// PC8
	GPIO_InitTypeDef s2_r;
	s2_r.Pin = GPIO_PIN_8;
 8001730:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001734:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173c:	601a      	str	r2, [r3, #0]
	s2_r.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001742:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001746:	2201      	movs	r2, #1
 8001748:	605a      	str	r2, [r3, #4]
	s2_r.Pull = GPIO_NOPULL;
 800174a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800174e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
	s2_r.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001756:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800175a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800175e:	2201      	movs	r2, #1
 8001760:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s2_r);
 8001762:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001766:	4619      	mov	r1, r3
 8001768:	48c9      	ldr	r0, [pc, #804]	; (8001a90 <main+0x3c8>)
 800176a:	f003 fb5d 	bl	8004e28 <HAL_GPIO_Init>

	// PA15
	GPIO_InitTypeDef s3_r;
	s3_r.Pin = GPIO_PIN_15;
 800176e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001772:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800177a:	601a      	str	r2, [r3, #0]
	s3_r.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001780:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001784:	2201      	movs	r2, #1
 8001786:	605a      	str	r2, [r3, #4]
	s3_r.Pull = GPIO_NOPULL;
 8001788:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800178c:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
	s3_r.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001794:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001798:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800179c:	2201      	movs	r2, #1
 800179e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &s3_r);
 80017a0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80017a4:	4619      	mov	r1, r3
 80017a6:	48bb      	ldr	r0, [pc, #748]	; (8001a94 <main+0x3cc>)
 80017a8:	f003 fb3e 	bl	8004e28 <HAL_GPIO_Init>

	//by default, s2 and s3 are zero, so we get freq of red as output
	// PB7
	GPIO_InitTypeDef s1_r;
	s1_r.Pin = GPIO_PIN_7;
 80017ac:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017b0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	601a      	str	r2, [r3, #0]
	s1_r.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017bc:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
	s1_r.Pull = GPIO_NOPULL;
 80017c4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017c8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
	s1_r.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017d0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017d4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80017d8:	2201      	movs	r2, #1
 80017da:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s1_r);
 80017dc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80017e0:	4619      	mov	r1, r3
 80017e2:	48ad      	ldr	r0, [pc, #692]	; (8001a98 <main+0x3d0>)
 80017e4:	f003 fb20 	bl	8004e28 <HAL_GPIO_Init>

	// PC6
	GPIO_InitTypeDef s0_r;
	s0_r.Pin = GPIO_PIN_6;
 80017e8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017ec:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	601a      	str	r2, [r3, #0]
	s0_r.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80017f8:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80017fc:	2201      	movs	r2, #1
 80017fe:	605a      	str	r2, [r3, #4]
	s0_r.Pull = GPIO_NOPULL;
 8001800:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001804:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
	s0_r.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800180c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001810:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001814:	2201      	movs	r2, #1
 8001816:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s0_r);
 8001818:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800181c:	4619      	mov	r1, r3
 800181e:	489c      	ldr	r0, [pc, #624]	; (8001a90 <main+0x3c8>)
 8001820:	f003 fb02 	bl	8004e28 <HAL_GPIO_Init>

	//set output frequency scaling to 2% (s0 = 0, s1 = 1)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //s1
 8001824:	2201      	movs	r2, #1
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	489b      	ldr	r0, [pc, #620]	; (8001a98 <main+0x3d0>)
 800182a:	f003 fc99 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); //s0
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4897      	ldr	r0, [pc, #604]	; (8001a90 <main+0x3c8>)
 8001834:	f003 fc94 	bl	8005160 <HAL_GPIO_WritePin>

	//right color sensor end ---------------------------------------------------------------------------------
	//Left color sensor ---------------------------------------------------------------------------------------
	//PC10
	GPIO_InitTypeDef freq_l; // color sensor frequency output
	freq_l.Pin = GPIO_PIN_10;
 8001838:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800183c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	601a      	str	r2, [r3, #0]
	freq_l.Mode = GPIO_MODE_INPUT;
 8001846:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800184a:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
	freq_l.Pull = GPIO_NOPULL;
 8001852:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001856:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
	freq_l.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800185e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001862:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001866:	2201      	movs	r2, #1
 8001868:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &freq_l);
 800186a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800186e:	4619      	mov	r1, r3
 8001870:	4887      	ldr	r0, [pc, #540]	; (8001a90 <main+0x3c8>)
 8001872:	f003 fad9 	bl	8004e28 <HAL_GPIO_Init>

	// PB12
	GPIO_InitTypeDef s2_l;
	s2_l.Pin = GPIO_PIN_12;
 8001876:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800187a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800187e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001882:	601a      	str	r2, [r3, #0]
	s2_l.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001888:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800188c:	2201      	movs	r2, #1
 800188e:	605a      	str	r2, [r3, #4]
	s2_l.Pull = GPIO_NOPULL;
 8001890:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001894:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
	s2_l.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800189c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80018a4:	2201      	movs	r2, #1
 80018a6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s2_l);
 80018a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018ac:	4619      	mov	r1, r3
 80018ae:	487a      	ldr	r0, [pc, #488]	; (8001a98 <main+0x3d0>)
 80018b0:	f003 faba 	bl	8004e28 <HAL_GPIO_Init>

	// PC12
	GPIO_InitTypeDef s3_l;
	s3_l.Pin = GPIO_PIN_12;
 80018b4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018b8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c0:	601a      	str	r2, [r3, #0]
	s3_l.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018c6:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018ca:	2201      	movs	r2, #1
 80018cc:	605a      	str	r2, [r3, #4]
	s3_l.Pull = GPIO_NOPULL;
 80018ce:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018d2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
	s3_l.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018de:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80018e2:	2201      	movs	r2, #1
 80018e4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s3_l);
 80018e6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80018ea:	4619      	mov	r1, r3
 80018ec:	4868      	ldr	r0, [pc, #416]	; (8001a90 <main+0x3c8>)
 80018ee:	f003 fa9b 	bl	8004e28 <HAL_GPIO_Init>

	//by default, s2 and s3 are zero, so we get freq of red as output
	// PC11
	GPIO_InitTypeDef s1_l;
	s1_l.Pin = GPIO_PIN_11;
 80018f2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80018f6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80018fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018fe:	601a      	str	r2, [r3, #0]
	s1_l.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001904:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001908:	2201      	movs	r2, #1
 800190a:	605a      	str	r2, [r3, #4]
	s1_l.Pull = GPIO_NOPULL;
 800190c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001910:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	s1_l.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001918:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800191c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001920:	2201      	movs	r2, #1
 8001922:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s1_l);
 8001924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001928:	4619      	mov	r1, r3
 800192a:	4859      	ldr	r0, [pc, #356]	; (8001a90 <main+0x3c8>)
 800192c:	f003 fa7c 	bl	8004e28 <HAL_GPIO_Init>

	// PC2
	GPIO_InitTypeDef s0_l;
	s0_l.Pin = GPIO_PIN_2;
 8001930:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001934:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001938:	2204      	movs	r2, #4
 800193a:	601a      	str	r2, [r3, #0]
	s0_l.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001940:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001944:	2201      	movs	r2, #1
 8001946:	605a      	str	r2, [r3, #4]
	s0_l.Pull = GPIO_NOPULL;
 8001948:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800194c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
	s0_l.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001954:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001958:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800195c:	2201      	movs	r2, #1
 800195e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s0_l);
 8001960:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001964:	4619      	mov	r1, r3
 8001966:	484a      	ldr	r0, [pc, #296]	; (8001a90 <main+0x3c8>)
 8001968:	f003 fa5e 	bl	8004e28 <HAL_GPIO_Init>

	//set output frequency scaling to 2% (s0 = 0, s1 = 1)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET); //s1
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001972:	4847      	ldr	r0, [pc, #284]	; (8001a90 <main+0x3c8>)
 8001974:	f003 fbf4 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //s0
 8001978:	2200      	movs	r2, #0
 800197a:	2104      	movs	r1, #4
 800197c:	4844      	ldr	r0, [pc, #272]	; (8001a90 <main+0x3c8>)
 800197e:	f003 fbef 	bl	8005160 <HAL_GPIO_WritePin>
	//left color sensor end -------------------------------------------------------------------------------

	// MIDDLE COLOR SENSOR---------------------------------------------------------------------------------
	// PB4
	GPIO_InitTypeDef freq; // color sensor frequency output
	freq.Pin = GPIO_PIN_4;
 8001982:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001986:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800198a:	2210      	movs	r2, #16
 800198c:	601a      	str	r2, [r3, #0]
	freq.Mode = GPIO_MODE_INPUT;
 800198e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001992:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
	freq.Pull = GPIO_NOPULL;
 800199a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800199e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
	freq.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019a6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019aa:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80019ae:	2201      	movs	r2, #1
 80019b0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &freq);
 80019b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019b6:	4619      	mov	r1, r3
 80019b8:	4837      	ldr	r0, [pc, #220]	; (8001a98 <main+0x3d0>)
 80019ba:	f003 fa35 	bl	8004e28 <HAL_GPIO_Init>

	// PB3
	GPIO_InitTypeDef s2;
	s2.Pin = GPIO_PIN_3;
 80019be:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80019c6:	2208      	movs	r2, #8
 80019c8:	601a      	str	r2, [r3, #0]
	s2.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019ce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80019d2:	2201      	movs	r2, #1
 80019d4:	605a      	str	r2, [r3, #4]
	s2.Pull = GPIO_NOPULL;
 80019d6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
	s2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019e2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80019ea:	2201      	movs	r2, #1
 80019ec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s2);
 80019ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <main+0x3d0>)
 80019f6:	f003 fa17 	bl	8004e28 <HAL_GPIO_Init>

	// PB5
	GPIO_InitTypeDef s3;
	s3.Pin = GPIO_PIN_5;
 80019fa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80019fe:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8001a02:	2220      	movs	r2, #32
 8001a04:	601a      	str	r2, [r3, #0]
	s3.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a0a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8001a0e:	2201      	movs	r2, #1
 8001a10:	605a      	str	r2, [r3, #4]
	s3.Pull = GPIO_NOPULL;
 8001a12:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a16:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
	s3.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a1e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a22:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8001a26:	2201      	movs	r2, #1
 8001a28:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s3);
 8001a2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4819      	ldr	r0, [pc, #100]	; (8001a98 <main+0x3d0>)
 8001a32:	f003 f9f9 	bl	8004e28 <HAL_GPIO_Init>

	//by default, s2 and s3 are zero, so we get freq of red as output
	// PC1
	GPIO_InitTypeDef s1;
	s1.Pin = GPIO_PIN_1;
 8001a36:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a3a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001a3e:	2202      	movs	r2, #2
 8001a40:	601a      	str	r2, [r3, #0]
	s1.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a46:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	605a      	str	r2, [r3, #4]
	s1.Pull = GPIO_NOPULL;
 8001a4e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a52:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
	s1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a5a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a5e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001a62:	2201      	movs	r2, #1
 8001a64:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &s1);
 8001a66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <main+0x3c8>)
 8001a6e:	f003 f9db 	bl	8004e28 <HAL_GPIO_Init>

	// PB0
	GPIO_InitTypeDef s0;
	s0.Pin = GPIO_PIN_0;
 8001a72:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a76:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
	s0.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a82:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001a86:	2201      	movs	r2, #1
 8001a88:	605a      	str	r2, [r3, #4]
	s0.Pull = GPIO_NOPULL;
 8001a8a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001a8e:	e005      	b.n	8001a9c <main+0x3d4>
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	s0.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001aa4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001aa8:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001aac:	2201      	movs	r2, #1
 8001aae:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &s0);
 8001ab0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	48dc      	ldr	r0, [pc, #880]	; (8001e28 <main+0x760>)
 8001ab8:	f003 f9b6 	bl	8004e28 <HAL_GPIO_Init>

	//set output frequency scaling to 2% (s0 = 0, s1 = 1)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //s1
 8001abc:	2201      	movs	r2, #1
 8001abe:	2102      	movs	r1, #2
 8001ac0:	48da      	ldr	r0, [pc, #872]	; (8001e2c <main+0x764>)
 8001ac2:	f003 fb4d 	bl	8005160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	48d7      	ldr	r0, [pc, #860]	; (8001e28 <main+0x760>)
 8001acc:	f003 fb48 	bl	8005160 <HAL_GPIO_WritePin>
	//middle color sensor end -----------------------------------------------------------------------------

	// for both timers:
	// 0.00001sec per tick (count) bc hclock is 84MHz - we use prescale factor of 840 (set below), so tim11 is 84MHz/840 = 100KHz -> period of tim11 = 1/100000Hz = 0.00001 sec -> therefore each count in 0.00001 sec

	const uint32_t CLOCK_SPEED = 84000000; // in Hz
 8001ad0:	4bd7      	ldr	r3, [pc, #860]	; (8001e30 <main+0x768>)
 8001ad2:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc

	int BASE_MOTOR_SPEED = 50;
 8001ad6:	2332      	movs	r3, #50	; 0x32
 8001ad8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
	const uint32_t MAX_TIME = 65535;
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8

	const double TIMER10_PERIOD = 0.00001;
 8001ae4:	a3cc      	add	r3, pc, #816	; (adr r3, 8001e18 <main+0x750>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8001aee:	e9c1 2300 	strd	r2, r3, [r1]
	// double TIMER10_PERIOD = 1.0/((double)CLOCK_SPEED/htim10.Init.Prescaler);
	const double TIMER11_PERIOD = 0.00001;
 8001af2:	a3c9      	add	r3, pc, #804	; (adr r3, 8001e18 <main+0x750>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8001afc:	e9c1 2300 	strd	r2, r3, [r1]
	// double TIMER11_PERIOD = 1.0/((double)CLOCK_SPEED/htim11.Init.Prescaler);
	const double TIMER3_PERIOD = 0.00001;
 8001b00:	a3c5      	add	r3, pc, #788	; (adr r3, 8001e18 <main+0x750>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8001b0a:	e9c1 2300 	strd	r2, r3, [r1]
	//speed: 55, kp: 3.5, ki: 0, kd: 0.01
	//speed: 60, kp = 4.7, kd = 0.032
	//60, 3.5, 0.014
	//60, 4, 0, 0.014 -- does whole course!!!!
	//100 3.3, 0.027 - down straights
	double Kp = 2;//3.75
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8001b1a:	e9c1 2300 	strd	r2, r3, [r1]
	double Ki = 0;//100;
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8001b2a:	e9c1 2300 	strd	r2, r3, [r1]
	double Kd = 0.012;//0.036;//10;
 8001b2e:	a3bc      	add	r3, pc, #752	; (adr r3, 8001e20 <main+0x758>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8001b38:	e9c1 2300 	strd	r2, r3, [r1]

	double cumulativeError = 0;
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]

	double error_n_1 = 0; // error from 1 iteration ago
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
	double error_n_2 = 0; // error from 2 iterations ago
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8001b68:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative_n_1 = 0;
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8001b78:	e9c1 2300 	strd	r2, r3, [r1]
	double derivative_n_2 = 0;
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]

	//Motor_A_Forward(60);
	//Motor_B_Forward(60);

	HAL_TIM_Base_Start(&htim10);
 8001b8c:	48a9      	ldr	r0, [pc, #676]	; (8001e34 <main+0x76c>)
 8001b8e:	f003 fb85 	bl	800529c <HAL_TIM_Base_Start>

	int prevCount_tim10 = __HAL_TIM_GET_COUNTER(&htim10);
 8001b92:	4ba8      	ldr	r3, [pc, #672]	; (8001e34 <main+0x76c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
	int prevCount_tim3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001b9c:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <main+0x770>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	//
	//Motor_A_Forward(100);
	//Motor_B_Forward(100);
	//

	std::deque<int> prevErrors(3, 0);
 8001ba6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001baa:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 ff39 	bl	8002a2e <_ZNSaIiEC1Ev>
 8001bbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bc0:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8001bc4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001bc8:	2103      	movs	r1, #3
 8001bca:	f000 ff48 	bl	8002a5e <_ZNSt5dequeIiSaIiEEC1EjRKiRKS0_>
 8001bce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 ff37 	bl	8002a46 <_ZNSaIiED1Ev>

	HAL_TIM_Base_Start(&htim3);
 8001bd8:	4897      	ldr	r0, [pc, #604]	; (8001e38 <main+0x770>)
 8001bda:	f003 fb5f 	bl	800529c <HAL_TIM_Base_Start>
	int c0 = __HAL_TIM_GET_COUNTER(&htim3);
 8001bde:	4b96      	ldr	r3, [pc, #600]	; (8001e38 <main+0x770>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

	Encoder_A_Init();
 8001be8:	f002 fc1a 	bl	8004420 <Encoder_A_Init>
	Encoder_B_Init();
 8001bec:	f002 fd30 	bl	8004650 <Encoder_B_Init>

	int dl_n_1 = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	int dl_n_2 = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8

	int dr_n_1 = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
	int dr_n_2 = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

	int kdCounter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	bool counting = false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497

	while (1) {

		// pin order: s3, s2, f
		//Color middleColor = extractColorFromSensor({{GPIOB, GPIO_PIN_5},{GPIOB, GPIO_PIN_3}, {GPIOB, GPIO_PIN_4}}, TIMER11_PERIOD);
		Color leftColor = extractColorFromSensor({{GPIOC, GPIO_PIN_12},{GPIOB, GPIO_PIN_12}, {GPIOC, GPIO_PIN_10}}, TIMER11_PERIOD);
 8001c14:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c18:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001c1c:	4a83      	ldr	r2, [pc, #524]	; (8001e2c <main+0x764>)
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c24:	f2a3 3322 	subw	r3, r3, #802	; 0x322
 8001c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	f507 72ff 	add.w	r2, r7, #510	; 0x1fe
 8001c32:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001c36:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fd28 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001c40:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c44:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001c48:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <main+0x760>)
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c50:	f2a3 331a 	subw	r3, r3, #794	; 0x31a
 8001c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	f207 2206 	addw	r2, r7, #518	; 0x206
 8001c5e:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8001c62:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c66:	3308      	adds	r3, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fd11 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001c6e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c72:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8001c76:	4a6d      	ldr	r2, [pc, #436]	; (8001e2c <main+0x764>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001c7e:	f2a3 3312 	subw	r3, r3, #786	; 0x312
 8001c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c86:	801a      	strh	r2, [r3, #0]
 8001c88:	f207 220e 	addw	r2, r7, #526	; 0x20e
 8001c8c:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001c90:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001c94:	3310      	adds	r3, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fcfa 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001c9c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001ca0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001ca4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001cae:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 ff00 	bl	8002ac0 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1Ev>
 8001cc0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cc4:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8001cc8:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 8001ccc:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8001cd0:	ca06      	ldmia	r2, {r1, r2}
 8001cd2:	f000 ff0d 	bl	8002af0 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEC1ESt16initializer_listIS3_ERKS4_>
 8001cd6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001cda:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8001cde:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001ce2:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8001e18 <main+0x750>
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fb23 	bl	8001334 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd>
 8001cee:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 ff1d 	bl	8002b32 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EED1Ev>
 8001cf8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 feeb 	bl	8002ad8 <_ZNSaISt4pairIP12GPIO_TypeDeftEED1Ev>
		Color rightColor = extractColorFromSensor({{GPIOA, GPIO_PIN_15},{GPIOC, GPIO_PIN_8}, {GPIOC, GPIO_PIN_9}}, TIMER11_PERIOD);
 8001d02:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d06:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001d0a:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <main+0x774>)
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d12:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	f207 2246 	addw	r2, r7, #582	; 0x246
 8001d20:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001d24:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fcb1 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001d2e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d32:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001d36:	4a3d      	ldr	r2, [pc, #244]	; (8001e2c <main+0x764>)
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d3e:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d46:	801a      	strh	r2, [r3, #0]
 8001d48:	f207 224e 	addw	r2, r7, #590	; 0x24e
 8001d4c:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001d50:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d54:	3308      	adds	r3, #8
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fc9a 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001d5c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d60:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001d64:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <main+0x764>)
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d6c:	f2a3 23ca 	subw	r3, r3, #714	; 0x2ca
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	f207 2256 	addw	r2, r7, #598	; 0x256
 8001d7a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8001d7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001d82:	3310      	adds	r3, #16
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc83 	bl	8001690 <_ZNSt4pairIP12GPIO_TypeDeftEC1IS1_tLb1EEEOT_OT0_>
 8001d8a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d8e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001d92:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001d9c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001da0:	2203      	movs	r2, #3
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fe89 	bl	8002ac0 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1Ev>
 8001dae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001db2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8001db6:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8001dba:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001dbe:	ca06      	ldmia	r2, {r1, r2}
 8001dc0:	f000 fe96 	bl	8002af0 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEC1ESt16initializer_listIS3_ERKS4_>
 8001dc4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001dc8:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8001dcc:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001dd0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001e18 <main+0x750>
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff faac 	bl	8001334 <_Z22extractColorFromSensorSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEd>
 8001ddc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fea6 	bl	8002b32 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EED1Ev>
 8001de6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fe74 	bl	8002ad8 <_ZNSaISt4pairIP12GPIO_TypeDeftEED1Ev>


		Color red(255, 75, 107);
 8001df0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001df4:	236b      	movs	r3, #107	; 0x6b
 8001df6:	224b      	movs	r2, #75	; 0x4b
 8001df8:	21ff      	movs	r1, #255	; 0xff
 8001dfa:	f7ff f879 	bl	8000ef0 <_ZN5ColorC1Eiii>
		Color green(140, 228, 187);
 8001dfe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001e02:	23bb      	movs	r3, #187	; 0xbb
 8001e04:	22e4      	movs	r2, #228	; 0xe4
 8001e06:	218c      	movs	r1, #140	; 0x8c
 8001e08:	f7ff f872 	bl	8000ef0 <_ZN5ColorC1Eiii>
		Color blue(59, 79, 180);
 8001e0c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001e10:	23b4      	movs	r3, #180	; 0xb4
 8001e12:	224f      	movs	r2, #79	; 0x4f
 8001e14:	213b      	movs	r1, #59	; 0x3b
 8001e16:	e013      	b.n	8001e40 <main+0x778>
 8001e18:	88e368f1 	.word	0x88e368f1
 8001e1c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001e20:	bc6a7efa 	.word	0xbc6a7efa
 8001e24:	3f889374 	.word	0x3f889374
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	0501bd00 	.word	0x0501bd00
 8001e34:	200000d4 	.word	0x200000d4
 8001e38:	2000008c 	.word	0x2000008c
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	f7ff f856 	bl	8000ef0 <_ZN5ColorC1Eiii>
		//int colorCosineForPrint = acos(leftColor.cosineSimilarity(blue))*180/M_PI;
		std::string s = "L(" + std::to_string(leftColor.r) + ", " + std::to_string(leftColor.g) + ", " + std::to_string(leftColor.b) + ")" + "R(" + std::to_string(rightColor.r) + ", " + std::to_string(rightColor.g) + ", " + std::to_string(rightColor.b) + "), "; ////"(" + std::to_string(colorCosineForPrint) + ")";
 8001e44:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e48:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fffb 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001e5e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e66:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8001e6a:	49e7      	ldr	r1, [pc, #924]	; (8002208 <main+0xb40>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fe7b 	bl	8002b68 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001e72:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e7a:	f507 7159 	add.w	r1, r7, #868	; 0x364
 8001e7e:	4ae3      	ldr	r2, [pc, #908]	; (800220c <main+0xb44>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fe89 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001e86:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e8a:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe ffda 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001ea0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001ea4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ea8:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8001eac:	f507 7153 	add.w	r1, r7, #844	; 0x34c
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fe88 	bl	8002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001eb6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001eba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ebe:	f507 714d 	add.w	r1, r7, #820	; 0x334
 8001ec2:	4ad2      	ldr	r2, [pc, #840]	; (800220c <main+0xb44>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fe67 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001eca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001ece:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001ed8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe ffb8 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001ee4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001ee8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001eec:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8001ef0:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fe66 	bl	8002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001efa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001efe:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001f02:	f507 7141 	add.w	r1, r7, #772	; 0x304
 8001f06:	4ac2      	ldr	r2, [pc, #776]	; (8002210 <main+0xb48>)
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fe45 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001f0e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001f16:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8001f1a:	4abe      	ldr	r2, [pc, #760]	; (8002214 <main+0xb4c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fe3b 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001f22:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f26:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f30:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ff8c 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001f3c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f40:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f44:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8001f48:	f507 7135 	add.w	r1, r7, #724	; 0x2d4
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fe3a 	bl	8002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001f52:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f56:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001f5a:	f507 712f 	add.w	r1, r7, #700	; 0x2bc
 8001f5e:	4aab      	ldr	r2, [pc, #684]	; (800220c <main+0xb44>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fe19 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001f66:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f6a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f74:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ff6a 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001f80:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f84:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001f88:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8001f8c:	f507 7129 	add.w	r1, r7, #676	; 0x2a4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fe18 	bl	8002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001f96:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001f9a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001f9e:	f507 7123 	add.w	r1, r7, #652	; 0x28c
 8001fa2:	4a9a      	ldr	r2, [pc, #616]	; (800220c <main+0xb44>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fdf7 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001faa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001fae:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe ff48 	bl	8000e54 <_ZNSt7__cxx119to_stringEi>
 8001fc4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001fc8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001fcc:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 8001fd0:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fdf6 	bl	8002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001fda:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001fde:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8001fe2:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8001fe6:	4a8c      	ldr	r2, [pc, #560]	; (8002218 <main+0xb50>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fdd5 	bl	8002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001fee:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 f987 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ff8:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f982 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002002:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8002006:	4618      	mov	r0, r3
 8002008:	f004 f97d 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800200c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8002010:	4618      	mov	r0, r3
 8002012:	f004 f978 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002016:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800201a:	4618      	mov	r0, r3
 800201c:	f004 f973 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002020:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f96e 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800202a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800202e:	4618      	mov	r0, r3
 8002030:	f004 f969 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002034:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8002038:	4618      	mov	r0, r3
 800203a:	f004 f964 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800203e:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f95f 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002048:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800204c:	4618      	mov	r0, r3
 800204e:	f004 f95a 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002052:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f955 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800205c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8002060:	4618      	mov	r0, r3
 8002062:	f004 f950 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002066:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f94b 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002070:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8002074:	4618      	mov	r0, r3
 8002076:	f004 f946 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800207a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800207e:	4618      	mov	r0, r3
 8002080:	f004 f941 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002084:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f93c 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800208e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f937 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002098:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800209c:	4618      	mov	r0, r3
 800209e:	f004 f932 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		const char* c = s.c_str();
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fa2e 	bl	8006508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80020ac:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
		USART_Transmit(&huart2, (uint8_t*)c);
 80020b0:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 80020b4:	4859      	ldr	r0, [pc, #356]	; (800221c <main+0xb54>)
 80020b6:	f7fe ffae 	bl	8001016 <_Z14USART_TransmitP20__UART_HandleTypeDefPh>

		// positive displacement is to left
		// error is yd-y -> yd=0, so error = -y

		//double error = -colorToDisplacement(leftColor, middleColor, rightColor);
		double error = calcError(leftColor, rightColor);
 80020ba:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80020be:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80020c2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80020c6:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 80020ca:	466e      	mov	r6, sp
 80020cc:	1d19      	adds	r1, r3, #4
 80020ce:	c903      	ldmia	r1, {r0, r1}
 80020d0:	e886 0003 	stmia.w	r6, {r0, r1}
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d8:	f7ff fa22 	bl	8001520 <_Z9calcError5ColorS_>
 80020dc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80020e0:	ed83 0b00 	vstr	d0, [r3]
		prevErrors.push_front(error);
 80020e4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80020e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ec:	f7fe fce8 	bl	8000ac0 <__aeabi_d2iz>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80020f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8002100:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fdd8 	bl	8002cbc <_ZNSt5dequeIiSaIiEE10push_frontEOi>
		prevErrors.pop_back();
 800210c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fde4 	bl	8002cde <_ZNSt5dequeIiSaIiEE8pop_backEv>
		double averagedError = averageError(prevErrors);
 8002116:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fa6d 	bl	80015fc <_Z12averageErrorRKSt5dequeIiSaIiEEi>
 8002122:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8002126:	ed83 0b00 	vstr	d0, [r3]
		//double averagedErrorForD = averageError(prevErrors);
		int currCount_tim10 = __HAL_TIM_GET_COUNTER(&htim10);
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <main+0xb58>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
		double timeStep = calcTotalCount(currCount_tim10, prevCount_tim10, MAX_TIME) * TIMER10_PERIOD;
 8002134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002138:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 800213c:	f8d7 047c 	ldr.w	r0, [r7, #1148]	; 0x47c
 8002140:	f7fe ff8d 	bl	800105e <_Z14calcTotalCountiii>
 8002144:	4603      	mov	r3, r0
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9a0 	bl	800048c <__aeabi_i2d>
 800214c:	a32c      	add	r3, pc, #176	; (adr r3, 8002200 <main+0xb38>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa05 	bl	8000560 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800215e:	e9c1 2300 	strd	r2, r3, [r1]
		prevCount_tim10 = currCount_tim10;
 8002162:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8002166:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
		double errorDerivative = differentiate(averagedError, error_n_1, error_n_2, timeStep);
 800216a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800216e:	ed93 3b00 	vldr	d3, [r3]
 8002172:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8002176:	ed93 2b00 	vldr	d2, [r3]
 800217a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800217e:	ed93 1b00 	vldr	d1, [r3]
 8002182:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8002186:	ed93 0b00 	vldr	d0, [r3]
 800218a:	f7ff f87d 	bl	8001288 <_Z13differentiatedddd>
 800218e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002192:	ed83 0b00 	vstr	d0, [r3]
		error_n_2 = error_n_1;
 8002196:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80021a2:	e9c1 2300 	strd	r2, r3, [r1]
		error_n_1 = averagedError;
 80021a6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80021b2:	e9c1 2300 	strd	r2, r3, [r1]
		cumulativeError += averagedError * timeStep;
 80021b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 80021c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021c6:	f7fe f9cb 	bl	8000560 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 80021d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021d6:	f7fe f80d 	bl	80001f4 <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 80021e2:	e9c1 2300 	strd	r2, r3, [r1]
			}else{
				kdCounter--;
			}
		}
		*/
		int increment = Kp*averagedError + Ki*cumulativeError + Kd*errorDerivative;
 80021e6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 80021f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021f6:	f7fe f9b3 	bl	8000560 <__aeabi_dmul>
 80021fa:	e013      	b.n	8002224 <main+0xb5c>
 80021fc:	f3af 8000 	nop.w
 8002200:	88e368f1 	.word	0x88e368f1
 8002204:	3ee4f8b5 	.word	0x3ee4f8b5
 8002208:	08007020 	.word	0x08007020
 800220c:	08007024 	.word	0x08007024
 8002210:	08007028 	.word	0x08007028
 8002214:	0800702c 	.word	0x0800702c
 8002218:	08007030 	.word	0x08007030
 800221c:	20000164 	.word	0x20000164
 8002220:	200000d4 	.word	0x200000d4
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4690      	mov	r8, r2
 800222a:	4699      	mov	r9, r3
 800222c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8002238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800223c:	f7fe f990 	bl	8000560 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4640      	mov	r0, r8
 8002246:	4649      	mov	r1, r9
 8002248:	f7fd ffd4 	bl	80001f4 <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4690      	mov	r8, r2
 8002252:	4699      	mov	r9, r3
 8002254:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8002260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002264:	f7fe f97c 	bl	8000560 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4640      	mov	r0, r8
 800226e:	4649      	mov	r1, r9
 8002270:	f7fd ffc0 	bl	80001f4 <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc20 	bl	8000ac0 <__aeabi_d2iz>
 8002280:	4603      	mov	r3, r0
 8002282:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464

		//A=right
		//B=left

		int errorForPrint = averagedError;
 8002286:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800228a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800228e:	f7fe fc17 	bl	8000ac0 <__aeabi_d2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
		//int integralForPrint = cumulativeError * 10000;
		int derivativeForPrint = errorDerivative;
 8002298:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800229c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a0:	f7fe fc0e 	bl	8000ac0 <__aeabi_d2iz>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

		//std::string s = "(" + std::to_string(sdfp) + ")";//;", " + std::to_string(integralForPrint) + ")";//", " + std::to_string(derivativeForPrint) + ")";
		//const char* c = s.c_str();
		//USART_Transmit(&huart2, (uint8_t*)c);

		if(increment < 0){
 80022aa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da25      	bge.n	80022fe <main+0xc36>
			Motor_A_Forward(std::max(0, BASE_MOTOR_SPEED-abs(increment)));
 80022b2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80022b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfb8      	it	lt
 80022c6:	425b      	neglt	r3, r3
 80022c8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80022d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80022dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe ff34 	bl	8001150 <_ZSt3maxIiERKT_S2_S2_>
 80022e8:	4603      	mov	r3, r0
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 f85f 	bl	80043b0 <Motor_A_Forward>
			Motor_B_Forward(BASE_MOTOR_SPEED);
 80022f2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 f876 	bl	80043e8 <Motor_B_Forward>
 80022fc:	e024      	b.n	8002348 <main+0xc80>

		}else{
			Motor_A_Forward(BASE_MOTOR_SPEED);
 80022fe:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002302:	4618      	mov	r0, r3
 8002304:	f002 f854 	bl	80043b0 <Motor_A_Forward>
			Motor_B_Forward(std::max(0, BASE_MOTOR_SPEED-abs(increment)));
 8002308:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800230c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8002318:	2b00      	cmp	r3, #0
 800231a:	bfb8      	it	lt
 800231c:	425b      	neglt	r3, r3
 800231e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8002332:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe ff09 	bl	8001150 <_ZSt3maxIiERKT_S2_S2_>
 800233e:	4603      	mov	r3, r0
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f002 f850 	bl	80043e8 <Motor_B_Forward>
		//const char* c = s.c_str();
		//USART_Transmit(&huart2, (uint8_t*)c);

		// if drift to left, y displacement is positive, and so will derivative and integral, so increment will be negative

		int currCount_tim3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002348:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <main+0xe80>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		double timeStep_tim3 = calcTotalCount(currCount_tim3, prevCount_tim3, 65535)*0.0001;
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 800235a:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 800235e:	f7fe fe7e 	bl	800105e <_Z14calcTotalCountiii>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f891 	bl	800048c <__aeabi_i2d>
 800236a:	a373      	add	r3, pc, #460	; (adr r3, 8002538 <main+0xe70>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8f6 	bl	8000560 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800237c:	e9c1 2300 	strd	r2, r3, [r1]
		prevCount_tim3 = currCount_tim3;
 8002380:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8002384:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0

		//std::string s = "(" + std::to_string(intTime) + ")";//;", " + std::to_string(integralForPrint) + ")";//", " + std::to_string(derivativeForPrint) + ")";
		//const char* c = s.c_str();
		//USART_Transmit(&huart2, (uint8_t*)c);

		uint16_t wheelDiam_mm = 65;
 8002388:	2341      	movs	r3, #65	; 0x41
 800238a:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
		int dr = Motor_A_Dist_mm(wheelDiam_mm);
 800238e:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	; 0x44e
 8002392:	4618      	mov	r0, r3
 8002394:	f002 f91c 	bl	80045d0 <Motor_A_Dist_mm>
 8002398:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
		int dl = Motor_B_Dist_mm(wheelDiam_mm);
 800239c:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	; 0x44e
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 fa2d 	bl	8004800 <Motor_B_Dist_mm>
 80023a6:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
		double vr = differentiate(dr, dr_n_1, dr_n_2, timeStep_tim3);
 80023aa:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 80023ae:	f7fe f86d 	bl	800048c <__aeabi_i2d>
 80023b2:	4680      	mov	r8, r0
 80023b4:	4689      	mov	r9, r1
 80023b6:	f8d7 04e4 	ldr.w	r0, [r7, #1252]	; 0x4e4
 80023ba:	f7fe f867 	bl	800048c <__aeabi_i2d>
 80023be:	4682      	mov	sl, r0
 80023c0:	468b      	mov	fp, r1
 80023c2:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 80023c6:	f7fe f861 	bl	800048c <__aeabi_i2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80023d2:	ed91 3b00 	vldr	d3, [r1]
 80023d6:	ec43 2b12 	vmov	d2, r2, r3
 80023da:	ec4b ab11 	vmov	d1, sl, fp
 80023de:	ec49 8b10 	vmov	d0, r8, r9
 80023e2:	f7fe ff51 	bl	8001288 <_Z13differentiatedddd>
 80023e6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80023ea:	ed83 0b00 	vstr	d0, [r3]
		double vl = differentiate(dl, dl_n_1, dl_n_2, timeStep_tim3);
 80023ee:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 80023f2:	f7fe f84b 	bl	800048c <__aeabi_i2d>
 80023f6:	4680      	mov	r8, r0
 80023f8:	4689      	mov	r9, r1
 80023fa:	f8d7 04ec 	ldr.w	r0, [r7, #1260]	; 0x4ec
 80023fe:	f7fe f845 	bl	800048c <__aeabi_i2d>
 8002402:	4682      	mov	sl, r0
 8002404:	468b      	mov	fp, r1
 8002406:	f8d7 04e8 	ldr.w	r0, [r7, #1256]	; 0x4e8
 800240a:	f7fe f83f 	bl	800048c <__aeabi_i2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002416:	ed91 3b00 	vldr	d3, [r1]
 800241a:	ec43 2b12 	vmov	d2, r2, r3
 800241e:	ec4b ab11 	vmov	d1, sl, fp
 8002422:	ec49 8b10 	vmov	d0, r8, r9
 8002426:	f7fe ff2f 	bl	8001288 <_Z13differentiatedddd>
 800242a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800242e:	ed83 0b00 	vstr	d0, [r3]
		int velPrint = abs(vl-vr);
 8002432:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 800243e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002442:	f7fd fed5 	bl	80001f0 <__aeabi_dsub>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	ec43 2b17 	vmov	d7, r2, r3
 800244e:	eeb0 0a47 	vmov.f32	s0, s14
 8002452:	eef0 0a67 	vmov.f32	s1, s15
 8002456:	f7fe fce9 	bl	8000e2c <_ZSt3absd>
 800245a:	ec53 2b10 	vmov	r2, r3, d0
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb2d 	bl	8000ac0 <__aeabi_d2iz>
 8002466:	4603      	mov	r3, r0
 8002468:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

		int vel = vl;
 800246c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002474:	f7fe fb24 	bl	8000ac0 <__aeabi_d2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		//int vel2 = vr;
		//std::string s2 = "," + std::to_string(vel2) + ")";//;", " + std::to_string(integralForPrint) + ")";//", " + std::to_string(derivativeForPrint) + ")";
		//const char* c2 = s2.c_str();
		//USART_Transmit(&huart2, (uint8_t*)c2);

		dr_n_2 = dr_n_1;
 800247e:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002482:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
		dr_n_1 = dr;
 8002486:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800248a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
		dl_n_2 = dl_n_1;
 800248e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002492:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
		dl_n_1 = dl;
 8002496:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800249a:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec

		if(fabs(vr-vl) > 150){
 800249e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80024aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ae:	f7fd fe9f 	bl	80001f0 <__aeabi_dsub>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024bc:	a320      	add	r3, pc, #128	; (adr r3, 8002540 <main+0xe78>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fe fadb 	bl	8000a80 <__aeabi_dcmpgt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d029      	beq.n	8002524 <main+0xe5c>
			std::string s2 = "slowing!!";//;", " + std::to_string(integralForPrint) + ")";//", " + std::to_string(derivativeForPrint) + ")";
 80024d0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fd60 	bl	8005f9a <_ZNSaIcEC1Ev>
 80024da:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	491a      	ldr	r1, [pc, #104]	; (800254c <main+0xe84>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f838 	bl	8006558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80024e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fd55 	bl	8005f9c <_ZNSaIcED1Ev>
			const char* c2 = s2.c_str();
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 f807 	bl	8006508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80024fa:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
			USART_Transmit(&huart2, (uint8_t*)c2);
 80024fe:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
 8002502:	4813      	ldr	r0, [pc, #76]	; (8002550 <main+0xe88>)
 8002504:	f7fe fd87 	bl	8001016 <_Z14USART_TransmitP20__UART_HandleTypeDefPh>
			BASE_MOTOR_SPEED = 46;
 8002508:	232e      	movs	r3, #46	; 0x2e
 800250a:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
			Kp = 2.5;
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <main+0xe8c>)
 8002514:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
			std::string s2 = "slowing!!";//;", " + std::to_string(integralForPrint) + ")";//", " + std::to_string(derivativeForPrint) + ")";
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fef1 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string s = "L(" + std::to_string(leftColor.r) + ", " + std::to_string(leftColor.g) + ", " + std::to_string(leftColor.b) + ")" + "R(" + std::to_string(rightColor.r) + ", " + std::to_string(rightColor.g) + ", " + std::to_string(rightColor.b) + "), "; ////"(" + std::to_string(colorCosineForPrint) + ")";
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	4618      	mov	r0, r3
 800252a:	f003 feec 	bl	8006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			//Ki = 0;//100;
			//Kd = 0.014;//10;
		}
	}
 800252e:	f7ff bb71 	b.w	8001c14 <main+0x54c>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	eb1c432d 	.word	0xeb1c432d
 800253c:	3f1a36e2 	.word	0x3f1a36e2
 8002540:	00000000 	.word	0x00000000
 8002544:	4062c000 	.word	0x4062c000
 8002548:	2000008c 	.word	0x2000008c
 800254c:	08007034 	.word	0x08007034
 8002550:	20000164 	.word	0x20000164
 8002554:	40040000 	.word	0x40040000

08002558 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002560:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8002590:	f003 f92e 	bl	80057f0 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 80025a4:	f000 f926 	bl	80027f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000164 	.word	0x20000164
 80025b0:	40004400 	.word	0x40004400

080025b4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <_ZL12MX_GPIO_Initv+0xd0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2120      	movs	r1, #32
 800263e:	4812      	ldr	r0, [pc, #72]	; (8002688 <_ZL12MX_GPIO_Initv+0xd4>)
 8002640:	f002 fd8e 	bl	8005160 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002648:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800264a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800264e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	480c      	ldr	r0, [pc, #48]	; (800268c <_ZL12MX_GPIO_Initv+0xd8>)
 800265c:	f002 fbe4 	bl	8004e28 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002660:	2320      	movs	r3, #32
 8002662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4804      	ldr	r0, [pc, #16]	; (8002688 <_ZL12MX_GPIO_Initv+0xd4>)
 8002678:	f002 fbd6 	bl	8004e28 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020800 	.word	0x40020800

08002690 <_ZL12MX_TIM3_Initv>:

static void MX_TIM3_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <_ZL12MX_TIM3_Initv+0xb8>)
 80026b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026b4:	f240 623f 	movw	r2, #1599	; 0x63f
 80026b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d4:	481b      	ldr	r0, [pc, #108]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026d6:	f002 fd91 	bl	80051fc <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80026ea:	f000 f883 	bl	80027f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	4619      	mov	r1, r3
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 80026fc:	f002 fe28 	bl	8005350 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8002710:	f000 f870 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <_ZL12MX_TIM3_Initv+0xb4>)
 8002722:	f002 fff7 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf14      	ite	ne
 800272c:	2301      	movne	r3, #1
 800272e:	2300      	moveq	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8002736:	f000 f85d 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000008c 	.word	0x2000008c
 8002748:	40000400 	.word	0x40000400

0800274c <_ZL13MX_TIM10_Initv>:

static void MX_TIM10_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <_ZL13MX_TIM10_Initv+0x50>)
 8002754:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 8002758:	f240 3247 	movw	r2, #839	; 0x347
 800275c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 8002766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <_ZL13MX_TIM10_Initv+0x4c>)
 800277a:	f002 fd3f 	bl	80051fc <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <_ZL13MX_TIM10_Initv+0x46>
  {
    Error_Handler();
 800278e:	f000 f831 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200000d4 	.word	0x200000d4
 800279c:	40014400 	.word	0x40014400

080027a0 <_ZL13MX_TIM11_Initv>:

static void MX_TIM11_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_ZL13MX_TIM11_Initv+0x50>)
 80027a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 840-1;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027ac:	f240 3247 	movw	r2, #839	; 0x347
 80027b0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027be:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <_ZL13MX_TIM11_Initv+0x4c>)
 80027ce:	f002 fd15 	bl	80051fc <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZL13MX_TIM11_Initv+0x46>
  {
    Error_Handler();
 80027e2:	f000 f807 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000011c 	.word	0x2000011c
 80027f0:	40014800 	.word	0x40014800

080027f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027fc:	e7fe      	b.n	80027fc <Error_Handler+0x8>

080027fe <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	fb03 f303 	mul.w	r3, r3, r3
 8002812:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d201      	bcs.n	8002834 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	e01d      	b.n	8002870 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d202      	bcs.n	8002842 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	e016      	b.n	8002870 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d202      	bcs.n	8002850 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3302      	adds	r3, #2
 800284e:	e00f      	b.n	8002870 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	d202      	bcs.n	800285e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3303      	adds	r3, #3
 800285c:	e008      	b.n	8002870 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3304      	adds	r3, #4
 800286c:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 800286e:	e7db      	b.n	8002828 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b63      	cmp	r3, #99	; 0x63
 8002892:	d925      	bls.n	80028e0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	; 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	440b      	add	r3, r1
 80028c0:	4918      	ldr	r1, [pc, #96]	; (8002924 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80028c2:	5c8a      	ldrb	r2, [r1, r2]
 80028c4:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	4915      	ldr	r1, [pc, #84]	; (8002924 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	440a      	add	r2, r1
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3b02      	subs	r3, #2
 80028dc:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80028de:	e7d6      	b.n	800288e <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d910      	bls.n	8002908 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	490b      	ldr	r1, [pc, #44]	; (8002924 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80028f6:	5c8a      	ldrb	r2, [r1, r2]
 80028f8:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4413      	add	r3, r2
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8002906:	e005      	b.n	8002914 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	701a      	strb	r2, [r3, #0]
    }
 8002914:	bf00      	nop
 8002916:	3724      	adds	r7, #36	; 0x24
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	51eb851f 	.word	0x51eb851f
 8002924:	080070a4 	.word	0x080070a4

08002928 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fd fdab 	bl	800048c <__aeabi_i2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b10 	vmov	d0, r2, r3
 800293e:	f003 fe5f 	bl	8006600 <sqrt>
 8002942:	eeb0 7a40 	vmov.f32	s14, s0
 8002946:	eef0 7a60 	vmov.f32	s15, s1
 800294a:	eeb0 0a47 	vmov.f32	s0, s14
 800294e:	eef0 0a67 	vmov.f32	s1, s15
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
      }
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_ZNKSt5dequeIiSaIiEE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0218 	add.w	r2, r3, #24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3308      	adds	r3, #8
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 f9c8 	bl	8002d22 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
 8002992:	4603      	mov	r3, r0
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_ZNKSt5dequeIiSaIiEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	3308      	adds	r3, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f9dc 	bl	8002d6a <_ZNSt15_Deque_iteratorIiRKiPS0_EC1IS_IiRiPiEvEERKT_>
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZNSt15_Deque_iteratorIiRKiPS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
	_Self __tmp = *this;
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ffda 	bl	80029ba <_ZNSt15_Deque_iteratorIiRKiPS0_EC1ERKS3_>
	++*this;
 8002a06:	68b8      	ldr	r0, [r7, #8]
 8002a08:	f000 f9cb 	bl	8002da2 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv>
	return __tmp;
 8002a0c:	bf00      	nop
      }
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZNKSt15_Deque_iteratorIiRKiPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f9d2 	bl	8002de0 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_ZNSaIiED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9d1 	bl	8002df6 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNSt5dequeIiSaIiEEC1EjRKiRKS0_>:
      deque(size_type __n, const value_type& __value,
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
      : _Base(__a, _S_check_init_len(__n, __a))
 8002a6c:	68fc      	ldr	r4, [r7, #12]
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	68b8      	ldr	r0, [r7, #8]
 8002a72:	f000 f9cb 	bl	8002e0c <_ZNSt5dequeIiSaIiEE17_S_check_init_lenEjRKS0_>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6839      	ldr	r1, [r7, #0]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 f9e1 	bl	8002e44 <_ZNSt11_Deque_baseIiSaIiEEC1ERKS0_j>
      { _M_fill_initialize(__value); }
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9f1 	bl	8002e6c <_ZNSt5dequeIiSaIiEE18_M_fill_initializeERKi>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa10 	bl	8002eee <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEEC1Ev>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZNSaISt4pairIP12GPIO_TypeDeftEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fa0f 	bl	8002f04 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEED1Ev>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EEC1ESt16initializer_listIS3_ERKS4_>:
      vector(initializer_list<value_type> __l,
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	1d38      	adds	r0, r7, #4
 8002afa:	e880 0006 	stmia.w	r0, {r1, r2}
 8002afe:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa14 	bl	8002f32 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EEC1ERKS4_>
	_M_range_initialize(__l.begin(), __l.end(),
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fa38 	bl	8002f82 <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE5beginEv>
 8002b12:	4604      	mov	r4, r0
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fa3f 	bl	8002f9a <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE3endEv>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	462b      	mov	r3, r5
 8002b20:	4621      	mov	r1, r4
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa4b 	bl	8002fbe <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag>
      }
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}

08002b32 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002b32:	b5b0      	push	{r4, r5, r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681c      	ldr	r4, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fa73 	bl	8003030 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_get_Tp_allocatorEv>
 8002b4a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4629      	mov	r1, r5
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 fa78 	bl	8003046 <_ZSt8_DestroyIPSt4pairIP12GPIO_TypeDeftES3_EvT_S5_RSaIT0_E>
      }
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f9f9 	bl	8002f50 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EED1Ev>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bdb0      	pop	{r4, r5, r7, pc}

08002b68 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	2100      	movs	r1, #0
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f003 fc77 	bl	800646c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fa6e 	bl	8003062 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f003 fba1 	bl	80062d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	f003 fc98 	bl	80064dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa57 	bl	8003062 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f003 fb8a 	bl	80062d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8002bc6:	b590      	push	{r4, r7, lr}
 8002bc8:	b08b      	sub	sp, #44	; 0x2c
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fb9d 	bl	800131c <_ZNKSt17integral_constantIbLb1EEcvbEv>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bee:	e024      	b.n	8002c3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fc88 	bl	800650c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fc82 	bl	800650c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8002c08:	f107 021c 	add.w	r2, r7, #28
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa30 	bl	8003078 <_ZSteqRKSaIcES1_>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461c      	mov	r4, r3
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f9bb 	bl	8005f9c <_ZNSaIcED1Ev>
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f9b6 	bl	8005f9c <_ZNSaIcED1Ev>
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	d002      	beq.n	8002c3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 8002c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02b      	beq.n	8002c9a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f003 fb65 	bl	8006312 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f003 fb61 	bl	8006312 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4423      	add	r3, r4
 8002c54:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f003 fb5d 	bl	8006316 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d908      	bls.n	8002c76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f003 fb56 	bl	8006316 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d801      	bhi.n	8002c76 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f003 fbe9 	bl	8006458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f9ea 	bl	8003062 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4619      	mov	r1, r3
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f003 fb1d 	bl	80062d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002c98:	e00c      	b.n	8002cb4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68b8      	ldr	r0, [r7, #8]
 8002c9e:	f003 fc17 	bl	80064d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f9dc 	bl	8003062 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f003 fb0f 	bl	80062d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	372c      	adds	r7, #44	; 0x2c
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}

08002cbc <_ZNSt5dequeIiSaIiEE10push_frontEOi>:
	  _M_push_front_aux(__x);
      }

#if __cplusplus >= 201103L
      void
      push_front(value_type&& __x)
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f000 f9e2 	bl	8003090 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f9e8 	bl	80030a6 <_ZNSt5dequeIiSaIiEE13emplace_frontIJiEEEvDpOT_>
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZNSt5dequeIiSaIiEE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d010      	beq.n	8002d14 <_ZNSt5dequeIiSaIiEE8pop_backEv+0x36>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	1f1a      	subs	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f8ea 	bl	8002ed8 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 f9f4 	bl	80030fa <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8002d12:	e002      	b.n	8002d1a <_ZNSt5dequeIiSaIiEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f9fd 	bl	8003114 <_ZNSt5dequeIiSaIiEE15_M_pop_back_auxEv>
      }
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002d2c:	f000 fa1b 	bl	8003166 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	109b      	asrs	r3, r3, #2
 8002d40:	3b01      	subs	r3, #1
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6852      	ldr	r2, [r2, #4]
 8002d4e:	1a8a      	subs	r2, r1, r2
 8002d50:	1092      	asrs	r2, r2, #2
 8002d52:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	6891      	ldr	r1, [r2, #8]
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	1a8a      	subs	r2, r1, r2
 8002d5e:	1092      	asrs	r2, r2, #2
 8002d60:	4413      	add	r3, r2
      }
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_ZNSt15_Deque_iteratorIiRKiPS0_EC1IS_IiRiPiEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10a      	bne.n	8002dd6 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv+0x34>
	    _M_set_node(_M_node + 1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9d4 	bl	8003176 <_ZNSt15_Deque_iteratorIiRKiPS0_E11_M_set_nodeEPPi>
	    _M_cur = _M_first;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
	return *this;
 8002dd6:	687b      	ldr	r3, [r7, #4]
      }
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_ZNSt5dequeIiSaIiEE17_S_check_init_lenEjRKS0_>:
			      std::__iterator_category(__first));
	}
#endif

      static size_t
      _S_check_init_len(size_t __n, const allocator_type& __a)
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(__a))
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f000 f9c6 	bl	80031a8 <_ZNSt5dequeIiSaIiEE11_S_max_sizeERKS0_>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bf8c      	ite	hi
 8002e24:	2301      	movhi	r3, #1
 8002e26:	2300      	movls	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <_ZNSt5dequeIiSaIiEE17_S_check_init_lenEjRKS0_+0x28>
	  __throw_length_error(
 8002e2e:	4804      	ldr	r0, [pc, #16]	; (8002e40 <_ZNSt5dequeIiSaIiEE17_S_check_init_lenEjRKS0_+0x34>)
 8002e30:	f003 f8bb 	bl	8005faa <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));
	return __n;
 8002e34:	687b      	ldr	r3, [r7, #4]
      }
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08007040 	.word	0x08007040

08002e44 <_ZNSt11_Deque_baseIiSaIiEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f9c1 	bl	80031dc <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f9cf 	bl	8003200 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_ZNSt5dequeIiSaIiEE18_M_fill_initializeERKi>:
    }
#endif

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = this->_M_impl._M_start._M_node;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	       __cur < this->_M_impl._M_finish._M_node;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d216      	bcs.n	8002eb4 <_ZNSt5dequeIiSaIiEE18_M_fill_initializeERKi+0x48>
	       ++__cur)
	    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	681d      	ldr	r5, [r3, #0]
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	f000 fa36 	bl	80032fe <_ZNSt5dequeIiSaIiEE14_S_buffer_sizeEv>
 8002e92:	4603      	mov	r3, r0
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441c      	add	r4, r3
					__value, _M_get_Tp_allocator());
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f81c 	bl	8002ed8 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002ea0:	4603      	mov	r3, r0
	    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 fa31 	bl	800330e <_ZSt22__uninitialized_fill_aIPiiiEvT_S1_RKT0_RSaIT1_E>
	  for (__cur = this->_M_impl._M_start._M_node;
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	3304      	adds	r3, #4
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb2:	e7e3      	b.n	8002e7c <_ZNSt5dequeIiSaIiEE18_M_fill_initializeERKi+0x10>
	  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69dc      	ldr	r4, [r3, #28]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699d      	ldr	r5, [r3, #24]
				      this->_M_impl._M_finish._M_cur,
				      __value, _M_get_Tp_allocator());
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f80a 	bl	8002ed8 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002ec4:	4603      	mov	r3, r0
	  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4629      	mov	r1, r5
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f000 fa1f 	bl	800330e <_ZSt22__uninitialized_fill_aIPiiiEvT_S1_RKT0_RSaIT1_E>
	{
	  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
			_M_get_Tp_allocator());
	  __throw_exception_again;
	}
    }
 8002ed0:	bf00      	nop
 8002ed2:	3730      	adds	r7, #48	; 0x30
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}

08002ed8 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fdd8 	bl	8002ad8 <_ZNSaISt4pairIP12GPIO_TypeDeftEED1Ev>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EEC1ERKS4_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f9f4 	bl	800332e <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE12_Vector_implC1ERKS4_>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9f1 	bl	8003352 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE13_M_deallocateEPS3_j>
      }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ffd1 	bl	8002f1a <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE12_Vector_implD1Ev>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002f9a:	b590      	push	{r4, r7, lr}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffed 	bl	8002f82 <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE5beginEv>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9e4 	bl	8003378 <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE4sizeEv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4423      	add	r3, r4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}

08002fbe <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002fbe:	b590      	push	{r4, r7, lr}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f000 f9de 	bl	8003390 <_ZSt8distanceIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E15difference_typeES7_S7_>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002fd8:	68fc      	ldr	r4, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f827 	bl	8003030 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_get_Tp_allocatorEv>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f000 f9e6 	bl	80033b8 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE17_S_check_init_lenEjRKS4_>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 fa09 	bl	8003408 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE11_M_allocateEj>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	441a      	add	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f80d 	bl	8003030 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_get_Tp_allocatorEv>
 8003016:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8003018:	4622      	mov	r2, r4
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68b8      	ldr	r0, [r7, #8]
 800301e:	f000 fa07 	bl	8003430 <_ZSt22__uninitialized_copy_aIPKSt4pairIP12GPIO_TypeDeftEPS3_S3_ET0_T_S8_S7_RSaIT1_E>
 8003022:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
	}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <_ZSt8_DestroyIPSt4pairIP12GPIO_TypeDeftES3_EvT_S5_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f9fc 	bl	8003452 <_ZSt8_DestroyIPSt4pairIP12GPIO_TypeDeftEEvT_S5_>
    }
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
      { return true; }
 8003082:	2301      	movs	r3, #1
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <_ZNSt5dequeIiSaIiEE13emplace_frontIJiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80030a6:	b5b0      	push	{r4, r5, r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d012      	beq.n	80030e2 <_ZNSt5dequeIiSaIiEE13emplace_frontIJiEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 80030bc:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80030c2:	1f1d      	subs	r5, r3, #4
 80030c4:	6838      	ldr	r0, [r7, #0]
 80030c6:	f000 f9d1 	bl	800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4629      	mov	r1, r5
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 f9d6 	bl	8003482 <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	1f1a      	subs	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]
      }
 80030e0:	e007      	b.n	80030f2 <_ZNSt5dequeIiSaIiEE13emplace_frontIJiEEEvDpOT_+0x4c>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f000 f9c2 	bl	800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f9db 	bl	80034a8 <_ZNSt5dequeIiSaIiEE17_M_push_front_auxIJiEEEvDpOT_>
      }
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdb0      	pop	{r4, r5, r7, pc}

080030fa <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa14 	bl	8003534 <_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_>
	}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <_ZNSt5dequeIiSaIiEE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f000 fa10 	bl	800354a <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f103 0218 	add.w	r2, r3, #24
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	3b04      	subs	r3, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 fa19 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	1f1a      	subs	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fec4 	bl	8002ed8 <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003150:	4602      	mov	r2, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7ff ffce 	bl	80030fa <_ZNSt16allocator_traitsISaIiEE7destroyIiEEvRS0_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800316a:	2004      	movs	r0, #4
 800316c:	f7fd feab 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 8003170:	4603      	mov	r3, r0
 8003172:	4618      	mov	r0, r3
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZNSt15_Deque_iteratorIiRKiPS0_E11_M_set_nodeEPPi>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685c      	ldr	r4, [r3, #4]
 8003192:	f000 fa06 	bl	80035a2 <_ZNSt15_Deque_iteratorIiRKiPS0_E14_S_buffer_sizeEv>
 8003196:	4603      	mov	r3, r0
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	18e2      	adds	r2, r4, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
      }
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <_ZNSt5dequeIiSaIiEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
      {
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80031b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031b4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9fb 	bl	80035b2 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 80031bc:	4603      	mov	r3, r0
 80031be:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80031c0:	f107 0208 	add.w	r2, r7, #8
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f9fd 	bl	80035ca <_ZSt3minIjERKT_S2_S2_>
 80031d0:	4603      	mov	r3, r0
 80031d2:	681b      	ldr	r3, [r3, #0]
      }
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa02 	bl	80035f2 <_ZNSaIiEC1ERKS_>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fa0c 	bl	800360e <_ZNSt11_Deque_baseIiSaIiEE16_Deque_impl_dataC1Ev>
	{ }
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800320a:	2004      	movs	r0, #4
 800320c:	f7fd fe5b 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 8003210:	4602      	mov	r2, r0
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	fbb3 f3f2 	udiv	r3, r3, r2
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800321c:	2308      	movs	r3, #8
 800321e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3302      	adds	r3, #2
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	f107 0210 	add.w	r2, r7, #16
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fa05 	bl	8003640 <_ZSt3maxIjERKT_S2_S2_>
 8003236:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa0f 	bl	8003668 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	1acb      	subs	r3, r1, r3
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003260:	4413      	add	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa15 	bl	80036a2 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3308      	adds	r3, #8
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f976 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0218 	add.w	r2, r3, #24
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3b04      	subs	r3, #4
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 f96d 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80032a2:	2004      	movs	r0, #4
 80032a4:	f7fd fe0f 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80032b0:	fb01 f202 	mul.w	r2, r1, r2
 80032b4:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
    }
 80032be:	bf00      	nop
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}

080032c6 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f9fc 	bl	80036d6 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa12 	bl	8003710 <_ZNSt16allocator_traitsISaIPiEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fa01 	bl	80036f8 <_ZNSaIPiED1Ev>
      }
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <_ZNSt5dequeIiSaIiEE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80032fe:	b580      	push	{r7, lr}
 8003300:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003302:	2004      	movs	r0, #4
 8003304:	f7fd fddf 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 8003308:	4603      	mov	r3, r0
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}

0800330e <_ZSt22__uninitialized_fill_aIPiiiEvT_S1_RKT0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
			   const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fa04 	bl	800372e <_ZSt18uninitialized_fillIPiiEvT_S1_RKT0_>
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa08 	bl	8003750 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1ERKS3_>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fa12 	bl	800376c <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
	if (__p)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fa12 	bl	8003794 <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE10deallocateERS4_PS3_j>
      }
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZNKSt16initializer_listISt4pairIP12GPIO_TypeDeftEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZSt8distanceIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E15difference_typeES7_S7_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800339a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa07 	bl	80037b2 <_ZSt19__iterator_categoryIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E17iterator_categoryERKS7_>
      return std::__distance(__first, __last,
 80033a4:	462a      	mov	r2, r5
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 fa0d 	bl	80037c8 <_ZSt10__distanceIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E15difference_typeES7_S7_St26random_access_iterator_tag>
 80033ae:	4603      	mov	r3, r0
    }
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}

080033b8 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE17_S_check_init_lenEjRKS4_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f9c1 	bl	8003750 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1ERKS3_>
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa08 	bl	80037e8 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE11_S_max_sizeERKS4_>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf8c      	ite	hi
 80033e0:	2301      	movhi	r3, #1
 80033e2:	2300      	movls	r3, #0
 80033e4:	b2dc      	uxtb	r4, r3
 80033e6:	f107 030c 	add.w	r3, r7, #12
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fb74 	bl	8002ad8 <_ZNSaISt4pairIP12GPIO_TypeDeftEED1Ev>
 80033f0:	2c00      	cmp	r4, #0
 80033f2:	d002      	beq.n	80033fa <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE17_S_check_init_lenEjRKS4_+0x42>
	  __throw_length_error(
 80033f4:	4803      	ldr	r0, [pc, #12]	; (8003404 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE17_S_check_init_lenEjRKS4_+0x4c>)
 80033f6:	f002 fdd8 	bl	8005faa <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80033fa:	687b      	ldr	r3, [r7, #4]
      }
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	08007070 	.word	0x08007070

08003408 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE11_M_allocateEj+0x1e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f9fd 	bl	800381c <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE8allocateERS4_j>
 8003422:	4603      	mov	r3, r0
 8003424:	e000      	b.n	8003428 <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE11_M_allocateEj+0x20>
 8003426:	2300      	movs	r3, #0
      }
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZSt22__uninitialized_copy_aIPKSt4pairIP12GPIO_TypeDeftEPS3_S3_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9f9 	bl	800383a <_ZSt18uninitialized_copyIPKSt4pairIP12GPIO_TypeDeftEPS3_ET0_T_S8_S7_>
 8003448:	4603      	mov	r3, r0
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZSt8_DestroyIPSt4pairIP12GPIO_TypeDeftEEvT_S5_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9fd 	bl	800385e <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIP12GPIO_TypeDeftEEEvT_S7_>
    }
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffec 	bl	800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f9ea 	bl	8003874 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>
	}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_ZNSt5dequeIiSaIiEE17_M_push_front_auxIJiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fa60 	bl	8002978 <_ZNKSt5dequeIiSaIiEE4sizeEv>
 80034b8:	4604      	mov	r4, r0
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9f0 	bl	80038a0 <_ZNKSt5dequeIiSaIiEE8max_sizeEv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	429c      	cmp	r4, r3
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <_ZNSt5dequeIiSaIiEE17_M_push_front_auxIJiEEEvDpOT_+0x2e>
	  __throw_length_error(
 80034d0:	4817      	ldr	r0, [pc, #92]	; (8003530 <_ZNSt5dequeIiSaIiEE17_M_push_front_auxIJiEEEvDpOT_+0x88>)
 80034d2:	f002 fd6a 	bl	8005faa <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 80034d6:	2101      	movs	r1, #1
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f9f2 	bl	80038c2 <_ZNSt5dequeIiSaIiEE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	1f1c      	subs	r4, r3, #4
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fa03 	bl	80038f2 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 80034ec:	4603      	mov	r3, r0
 80034ee:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 0208 	add.w	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	3b04      	subs	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 f836 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	1f1a      	subs	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 800350e:	687c      	ldr	r4, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689d      	ldr	r5, [r3, #8]
 8003514:	6838      	ldr	r0, [r7, #0]
 8003516:	f7ff ffa9 	bl	800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	4629      	mov	r1, r5
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff ffae 	bl	8003482 <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
      }
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bdb0      	pop	{r4, r5, r7, pc}
 800352e:	bf00      	nop
 8003530:	08007040 	.word	0x08007040

08003534 <_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800354a:	b590      	push	{r4, r7, lr}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003554:	687c      	ldr	r4, [r7, #4]
 8003556:	2004      	movs	r0, #4
 8003558:	f7fd fcb5 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f9d7 	bl	8003916 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685c      	ldr	r4, [r3, #4]
 800358c:	f7ff fdeb 	bl	8003166 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 8003590:	4603      	mov	r3, r0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	18e2      	adds	r2, r4, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
      }
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}

080035a2 <_ZNSt15_Deque_iteratorIiRKiPS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80035a6:	2004      	movs	r0, #4
 80035a8:	f7fd fc8d 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4618      	mov	r0, r3
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9ba 	bl	8003934 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80035c0:	4603      	mov	r3, r0
      }
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d201      	bcs.n	80035e4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	e000      	b.n	80035e6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80035e4:	687b      	ldr	r3, [r7, #4]
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_ZNSaIiEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80035fc:	6839      	ldr	r1, [r7, #0]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9a4 	bl	800394c <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_ZNSt11_Deque_baseIiSaIiEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f99c 	bl	8003964 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3318      	adds	r3, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f997 	bl	8003964 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
	{ }
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d201      	bcs.n	800365a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	e000      	b.n	800365c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800365a:	687b      	ldr	r3, [r7, #4]
    }
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f82c 	bl	80036d6 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	6839      	ldr	r1, [r7, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f984 	bl	8003992 <_ZNSt16allocator_traitsISaIPiEE8allocateERS1_j>
 800368a:	4604      	mov	r4, r0
 800368c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f830 	bl	80036f8 <_ZNSaIPiED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003698:	4623      	mov	r3, r4
      }
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd90      	pop	{r4, r7, pc}

080036a2 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>:
    _Deque_base<_Tp, _Alloc>::
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d209      	bcs.n	80036ce <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f919 	bl	80038f2 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3304      	adds	r3, #4
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e7f1      	b.n	80036b2 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x10>
    }
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f000 f965 	bl	80039b0 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f96b 	bl	80039c6 <_ZNSaIPiEC1IiEERKSaIT_E>
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZNSaIPiED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f96d 	bl	80039e0 <_ZN9__gnu_cxx13new_allocatorIPiED1Ev>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZNSt16allocator_traitsISaIPiEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f968 	bl	80039f6 <_ZN9__gnu_cxx13new_allocatorIPiE10deallocateEPS1_j>
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_ZSt18uninitialized_fillIPiiEvT_S1_RKT0_>:
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
	__uninit_fill(__first, __last, __x);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f967 	bl	8003a16 <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPiiEEvT_S3_RKT0_>
    }
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZNSaISt4pairIP12GPIO_TypeDeftEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f969 	bl	8003a34 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEEC1ERKS5_>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZNSt12_Vector_baseISt4pairIP12GPIO_TypeDeftESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
	{ }
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f951 	bl	8003a4c <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE10deallocateEPS4_j>
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <_ZSt19__iterator_categoryIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E17iterator_categoryERKS7_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80037ba:	bf00      	nop
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_ZSt10__distanceIPKSt4pairIP12GPIO_TypeDeftEENSt15iterator_traitsIT_E15difference_typeES7_S7_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	10db      	asrs	r3, r3, #3
    }
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_ZNSt6vectorISt4pairIP12GPIO_TypeDeftESaIS3_EE11_S_max_sizeERKS4_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80037f0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80037f4:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f938 	bl	8003a6c <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE8max_sizeERKS4_>
 80037fc:	4603      	mov	r3, r0
 80037fe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fedd 	bl	80035ca <_ZSt3minIjERKT_S2_S2_>
 8003810:	4603      	mov	r3, r0
 8003812:	681b      	ldr	r3, [r3, #0]
      }
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003826:	2200      	movs	r2, #0
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f92a 	bl	8003a84 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE8allocateEjPKv>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_ZSt18uninitialized_copyIPKSt4pairIP12GPIO_TypeDeftEPS3_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f936 	bl	8003ac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairIP12GPIO_TypeDeftEPS5_EET0_T_SA_S9_>
 8003854:	4603      	mov	r3, r0
    }
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIP12GPIO_TypeDeftEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fdf3 	bl	800346c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003886:	4603      	mov	r3, r0
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4619      	mov	r1, r3
 800388e:	2004      	movs	r0, #4
 8003890:	f7fd fac0 	bl	8000e14 <_ZnwjPv>
 8003894:	4603      	mov	r3, r0
 8003896:	601c      	str	r4, [r3, #0]
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <_ZNKSt5dequeIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f880 	bl	80039b0 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fc78 	bl	80031a8 <_ZNSt5dequeIiSaIiEE11_S_max_sizeERKS0_>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <_ZNSt5dequeIiSaIiEE23_M_reserve_map_at_frontEj>:
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80038d8:	461a      	mov	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	4293      	cmp	r3, r2
 80038de:	d904      	bls.n	80038ea <_ZNSt5dequeIiSaIiEE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80038e0:	2201      	movs	r2, #1
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f90b 	bl	8003b00 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>
      }
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80038f2:	b590      	push	{r4, r7, lr}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80038fa:	687c      	ldr	r4, [r7, #4]
 80038fc:	2004      	movs	r0, #4
 80038fe:	f7fd fae2 	bl	8000ec6 <_ZSt16__deque_buf_sizej>
 8003902:	4603      	mov	r3, r0
 8003904:	4619      	mov	r1, r3
 8003906:	4620      	mov	r0, r4
 8003908:	f000 f994 	bl	8003c34 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 800390c:	4603      	mov	r3, r0
      }
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}

08003916 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f993 	bl	8003c52 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f998 	bl	8003c72 <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>
 8003942:	4603      	mov	r3, r0
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <_ZNSt16allocator_traitsISaIPiEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800399c:	2200      	movs	r2, #0
 800399e:	6839      	ldr	r1, [r7, #0]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f972 	bl	8003c8a <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <_ZNSaIPiEC1IiEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f978 	bl	8003cc6 <_ZN9__gnu_cxx13new_allocatorIPiEC1Ev>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZN9__gnu_cxx13new_allocatorIPiED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <_ZN9__gnu_cxx13new_allocatorIPiE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4619      	mov	r1, r3
 8003a08:	68b8      	ldr	r0, [r7, #8]
 8003a0a:	f002 fab3 	bl	8005f74 <_ZdlPvj>
      }
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPiiEEvT_S3_RKT0_>:
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
        { std::fill(__first, __last, __x); }
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f958 	bl	8003cdc <_ZSt4fillIPiiEvT_S1_RKT0_>
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68b8      	ldr	r0, [r7, #8]
 8003a60:	f002 fa88 	bl	8005f74 <_ZdlPvj>
      }
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZNSt16allocator_traitsISaISt4pairIP12GPIO_TypeDeftEEE8max_sizeERKS4_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f940 	bl	8003cfa <_ZNK9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE8max_sizeEv>
 8003a7a:	4603      	mov	r3, r0
      }
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f93e 	bl	8003d12 <_ZNK9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE11_M_max_sizeEv>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	bf8c      	ite	hi
 8003a9e:	2301      	movhi	r3, #1
 8003aa0:	2300      	movls	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <_ZN9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003aa8:	f002 fa79 	bl	8005f9e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 fa61 	bl	8005f78 <_Znwj>
 8003ab6:	4603      	mov	r3, r0
      }
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairIP12GPIO_TypeDeftEPS5_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d00e      	beq.n	8003af6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairIP12GPIO_TypeDeftEPS5_EET0_T_SA_S9_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f000 f926 	bl	8003d2a <_ZSt11__addressofISt4pairIP12GPIO_TypeDeftEEPT_RS4_>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f92c 	bl	8003d40 <_ZSt10_ConstructISt4pairIP12GPIO_TypeDeftEJRKS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3308      	adds	r3, #8
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3308      	adds	r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e7ec      	b.n	8003ad0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairIP12GPIO_TypeDeftEPS5_EET0_T_SA_S9_+0x10>
	      return __cur;
 8003af6:	697b      	ldr	r3, [r7, #20]
	}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b08b      	sub	sp, #44	; 0x2c
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	109b      	asrs	r3, r3, #2
 8003b1a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003b1c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	4413      	add	r3, r2
 8003b24:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d92d      	bls.n	8003b8e <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	1acb      	subs	r3, r1, r3
 8003b3e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003b40:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x4e>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	e000      	b.n	8003b50 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x50>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003b52:	4413      	add	r3, r2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d209      	bcs.n	8003b74 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003b68:	3304      	adds	r3, #4
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f000 f8ff 	bl	8003d70 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
 8003b72:	e048      	b.n	8003c06 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003b7c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	4413      	add	r3, r2
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f90a 	bl	8003da0 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>
 8003b8c:	e03b      	b.n	8003c06 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3304      	adds	r3, #4
 8003b96:	f107 0208 	add.w	r2, r7, #8
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fd4f 	bl	8003640 <_ZSt3maxIjERKT_S2_S2_>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003ba8:	3302      	adds	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fd59 	bl	8003668 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 8003bb6:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xce>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	e000      	b.n	8003bd0 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xd0>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003be0:	3304      	adds	r3, #4
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4619      	mov	r1, r3
 8003be6:	f000 f8c3 	bl	8003d70 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f7ff fb66 	bl	80032c6 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>

	  this->_M_impl._M_map = __new_map;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fcaf 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f103 0018 	add.w	r0, r3, #24
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	4413      	add	r3, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7ff fca2 	bl	8003570 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
    }
 8003c2c:	bf00      	nop
 8003c2e:	372c      	adds	r7, #44	; 0x2c
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6839      	ldr	r1, [r7, #0]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8c4 	bl	8003dd0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
      deallocate(_Tp* __p, size_type __t)
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4619      	mov	r1, r3
 8003c64:	68b8      	ldr	r0, [r7, #8]
 8003c66:	f002 f985 	bl	8005f74 <_ZdlPvj>
      }
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c7a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8b8 	bl	8003e0c <_ZNK9__gnu_cxx13new_allocatorIPiE11_M_max_sizeEv>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bf8c      	ite	hi
 8003ca4:	2301      	movhi	r3, #1
 8003ca6:	2300      	movls	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003cae:	f002 f976 	bl	8005f9e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 f95e 	bl	8005f78 <_Znwj>
 8003cbc:	4603      	mov	r3, r0
      }
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_ZN9__gnu_cxx13new_allocatorIPiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_ZSt4fillIPiiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f899 	bl	8003e24 <_ZSt8__fill_aIPiiEvT_S1_RKT0_>
    }
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZNK9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f805 	bl	8003d12 <_ZNK9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE11_M_max_sizeEv>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ZNK9__gnu_cxx13new_allocatorISt4pairIP12GPIO_TypeDeftEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003d1a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_ZSt11__addressofISt4pairIP12GPIO_TypeDeftEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_ZSt10_ConstructISt4pairIP12GPIO_TypeDeftEJRKS3_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f000 f879 	bl	8003e42 <_ZSt7forwardIRKSt4pairIP12GPIO_TypeDeftEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003d50:	4604      	mov	r4, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4619      	mov	r1, r3
 8003d56:	2008      	movs	r0, #8
 8003d58:	f7fd f85c 	bl	8000e14 <_ZnwjPv>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4622      	mov	r2, r4
 8003d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}

08003d70 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f86b 	bl	8003e58 <_ZSt12__miter_baseIPPiET_S2_>
 8003d82:	4604      	mov	r4, r0
 8003d84:	68b8      	ldr	r0, [r7, #8]
 8003d86:	f000 f867 	bl	8003e58 <_ZSt12__miter_baseIPPiET_S2_>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 f86c 	bl	8003e6e <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>
 8003d96:	4603      	mov	r3, r0
    }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}

08003da0 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f853 	bl	8003e58 <_ZSt12__miter_baseIPPiET_S2_>
 8003db2:	4604      	mov	r4, r0
 8003db4:	68b8      	ldr	r0, [r7, #8]
 8003db6:	f000 f84f 	bl	8003e58 <_ZSt12__miter_baseIPPiET_S2_>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 f877 	bl	8003eb4 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>
 8003dc6:	4603      	mov	r3, r0
    }
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd90      	pop	{r4, r7, pc}

08003dd0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff48 	bl	8003c72 <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	bf8c      	ite	hi
 8003dea:	2301      	movhi	r3, #1
 8003dec:	2300      	movls	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003df4:	f002 f8d3 	bl	8005f9e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f002 f8bb 	bl	8005f78 <_Znwj>
 8003e02:	4603      	mov	r3, r0
      }
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZNK9__gnu_cxx13new_allocatorIPiE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003e14:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZSt8__fill_aIPiiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f860 	bl	8003efa <_ZSt9__fill_a1IPiiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZSt7forwardIRKSt4pairIP12GPIO_TypeDeftEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_ZSt12__miter_baseIPPiET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003e6e:	b5b0      	push	{r4, r5, r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f857 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003e80:	4604      	mov	r4, r0
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f000 f853 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003e88:	4605      	mov	r5, r0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f84e 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 f853 	bl	8003f44 <_ZSt14__copy_move_a1ILb0EPPiS1_ET1_T0_S3_S2_>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f85d 	bl	8003f64 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>
 8003eaa:	4603      	mov	r3, r0
    }
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}

08003eb4 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f834 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f000 f830 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003ece:	4605      	mov	r5, r0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f82b 	bl	8003f2e <_ZSt12__niter_baseIPPiET_S2_>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4629      	mov	r1, r5
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f000 f84c 	bl	8003f7c <_ZSt23__copy_move_backward_a1ILb0EPPiS1_ET1_T0_S3_S2_>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f83a 	bl	8003f64 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>
 8003ef0:	4603      	mov	r3, r0
    }
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bdb0      	pop	{r4, r5, r7, pc}

08003efa <_ZSt9__fill_a1IPiiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d006      	beq.n	8003f22 <_ZSt9__fill_a1IPiiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e7f4      	b.n	8003f0c <_ZSt9__fill_a1IPiiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_ZSt12__niter_baseIPPiET_S2_>:
    __niter_base(_Iterator __it)
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <_ZSt14__copy_move_a1ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f821 	bl	8003f9c <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZSt12__niter_wrapIPPiET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_ZSt23__copy_move_backward_a1ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f815 	bl	8003fbc <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f815 	bl	8003fdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>
 8003fb2:	4603      	mov	r3, r0
    }
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f822 	bl	8004016 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>
 8003fd2:	4603      	mov	r3, r0
    }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	109b      	asrs	r3, r3, #2
 8003ff0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f002 fe9d 	bl	8006d40 <memmove>
	  return __result + _Num;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
	}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	109b      	asrs	r3, r3, #2
 800402a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	425b      	negs	r3, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	18d0      	adds	r0, r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	461a      	mov	r2, r3
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	f002 fe7c 	bl	8006d40 <memmove>
	  return __result - _Num;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	425b      	negs	r3, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
	}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db0b      	blt.n	8004086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4907      	ldr	r1, [pc, #28]	; (8004094 <__NVIC_EnableIRQ+0x38>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000e100 	.word	0xe000e100

08004098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	; (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <Tim2_Ch1_Init>:
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
}

void Tim2_Ch1_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80040f0:	4b2a      	ldr	r3, [pc, #168]	; (800419c <Tim2_Ch1_Init+0xb0>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <Tim2_Ch1_Init+0xb0>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to alternate function mode*/
	GPIOA->MODER &= ~(1U<<0);
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM2_CH1*/
	GPIOA->AFR[0] |=  (1U<<0);
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 8004126:	f023 0302 	bic.w	r3, r3, #2
 800412a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 8004132:	f023 0304 	bic.w	r3, r3, #4
 8004136:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <Tim2_Ch1_Init+0xb4>)
 800413e:	f023 0308 	bic.w	r3, r3, #8
 8004142:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <Tim2_Ch1_Init+0xb0>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <Tim2_Ch1_Init+0xb0>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 8004150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004154:	2207      	movs	r2, #7
 8004156:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER, TIMER2);
 8004158:	2102      	movs	r1, #2
 800415a:	2064      	movs	r0, #100	; 0x64
 800415c:	f000 f87a 	bl	8004254 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC1_PWM_MODE1; // Register unique to each channel
 8004160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004164:	2260      	movs	r2, #96	; 0x60
 8004166:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, TIMER2); // Register unique to each channel
 8004168:	2102      	movs	r1, #2
 800416a:	2028      	movs	r0, #40	; 0x28
 800416c:	f000 f890 	bl	8004290 <pwm_set_dutycycle>

	/*Enable Timer 2 Channel 1 in compare mode*/
	TIM2->CCER |= CCER_CC1E; // Register unique to each channel
 8004170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 8004180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004184:	2200      	movs	r2, #0
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
 8004188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	40020000 	.word	0x40020000

080041a4 <Tim4_Ch1_Init>:

void Tim4_Ch1_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <Tim4_Ch1_Init+0xa4>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	4a26      	ldr	r2, [pc, #152]	; (8004248 <Tim4_Ch1_Init+0xa4>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 to alternate function mode*/
	GPIOB->MODER &= ~(1U<<12);
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a24      	ldr	r2, [pc, #144]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041be:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041ca:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM4_CH1*/
	GPIOB->AFR[0] &= ~(1U<<24);
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a1e      	ldr	r2, [pc, #120]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<25);
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<26);
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ee:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a15      	ldr	r2, [pc, #84]	; (800424c <Tim4_Ch1_Init+0xa8>)
 80041f6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80041fa:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM4*/
	RCC->APB1ENR |= TIM4EN;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <Tim4_Ch1_Init+0xa4>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <Tim4_Ch1_Init+0xa4>)
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM4->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <Tim4_Ch1_Init+0xac>)
 800420a:	2207      	movs	r2, #7
 800420c:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER, TIMER4);
 800420e:	2104      	movs	r1, #4
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	f000 f81f 	bl	8004254 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM4->CCMR1 = OC1_PWM_MODE1; // Register unique to each channel
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <Tim4_Ch1_Init+0xac>)
 8004218:	2260      	movs	r2, #96	; 0x60
 800421a:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, TIMER4); // Register unique to each channel
 800421c:	2104      	movs	r1, #4
 800421e:	2028      	movs	r0, #40	; 0x28
 8004220:	f000 f836 	bl	8004290 <pwm_set_dutycycle>

	/*Enable Timer 4 Channel 1 in compare mode*/
	TIM4->CCER |= CCER_CC1E; // Register unique to each channel
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <Tim4_Ch1_Init+0xac>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <Tim4_Ch1_Init+0xac>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM4->CNT = 0;
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <Tim4_Ch1_Init+0xac>)
 8004232:	2200      	movs	r2, #0
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM4->CR1 |= CR1_CEN;
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <Tim4_Ch1_Init+0xac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <Tim4_Ch1_Init+0xac>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6013      	str	r3, [r2, #0]
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40020400 	.word	0x40020400
 8004250:	40000800 	.word	0x40000800

08004254 <pwm_set_frequency>:

/*Frequency prescaler dividing down 2Mhz to a usable frequency range
 * 2 000 000 / Freq = Desired Frequency
 */
void pwm_set_frequency(uint32_t Freq, uint32_t timer)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d105      	bne.n	8004270 <pwm_set_frequency+0x1c>
	{
		TIM2->ARR = Freq - 1;
 8004264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c
	else if (timer == 4)
	{
		TIM4->ARR = Freq - 1;
	}

}
 800426e:	e006      	b.n	800427e <pwm_set_frequency+0x2a>
	else if (timer == 4)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d103      	bne.n	800427e <pwm_set_frequency+0x2a>
		TIM4->ARR = Freq - 1;
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <pwm_set_frequency+0x38>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40000800 	.word	0x40000800

08004290 <pwm_set_dutycycle>:

/*Set the duty cycle of the PWM signal*/
void pwm_set_dutycycle(uint32_t DutyCycle, uint32_t timer)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d105      	bne.n	80042ac <pwm_set_dutycycle+0x1c>
	{
		/*Set duty cycle of Timer 2 channel 1 PWM to % of ARR value*/
		TIM2->CCR1 = DutyCycle - 1;
 80042a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6353      	str	r3, [r2, #52]	; 0x34
	else if (timer == 4)
	{
		/*Set duty cycle of Timer 4 channel 1 PWM to % of ARR value*/
		TIM4->CCR1 = DutyCycle - 1;
	}
}
 80042aa:	e006      	b.n	80042ba <pwm_set_dutycycle+0x2a>
	else if (timer == 4)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d103      	bne.n	80042ba <pwm_set_dutycycle+0x2a>
		TIM4->CCR1 = DutyCycle - 1;
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <pwm_set_dutycycle+0x38>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40000800 	.word	0x40000800

080042cc <MotorPin_Init>:

static void MotorPin_Init(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <MotorPin_Init+0xdc>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <MotorPin_Init+0xdc>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 to output mode*/
	GPIOA->MODER |= (1U<<10);
 80042dc:	4b33      	ldr	r3, [pc, #204]	; (80043ac <MotorPin_Init+0xe0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a32      	ldr	r2, [pc, #200]	; (80043ac <MotorPin_Init+0xe0>)
 80042e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <MotorPin_Init+0xe0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <MotorPin_Init+0xe0>)
 80042ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f2:	6013      	str	r3, [r2, #0]
	/*Set PA5 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<10);
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <MotorPin_Init+0xe0>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <MotorPin_Init+0xe0>)
 80042fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fe:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<11);
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <MotorPin_Init+0xe0>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a29      	ldr	r2, [pc, #164]	; (80043ac <MotorPin_Init+0xe0>)
 8004306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800430a:	60d3      	str	r3, [r2, #12]

	/*Set PA4 to output mode*/
	GPIOA->MODER |= (1U<<8);
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <MotorPin_Init+0xe0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <MotorPin_Init+0xe0>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<9);
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <MotorPin_Init+0xe0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a23      	ldr	r2, [pc, #140]	; (80043ac <MotorPin_Init+0xe0>)
 800431e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004322:	6013      	str	r3, [r2, #0]
	/*Set PA4 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<8);
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <MotorPin_Init+0xe0>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <MotorPin_Init+0xe0>)
 800432a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<9);
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <MotorPin_Init+0xe0>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <MotorPin_Init+0xe0>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	60d3      	str	r3, [r2, #12]

	/*Set PA6 to output mode*/
	GPIOA->MODER |= (1U<<12);
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <MotorPin_Init+0xe0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <MotorPin_Init+0xe0>)
 8004342:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<13);
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <MotorPin_Init+0xe0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <MotorPin_Init+0xe0>)
 800434e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004352:	6013      	str	r3, [r2, #0]
	/*Set PA6 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<12);
 8004354:	4b15      	ldr	r3, [pc, #84]	; (80043ac <MotorPin_Init+0xe0>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <MotorPin_Init+0xe0>)
 800435a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800435e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<13);
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <MotorPin_Init+0xe0>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <MotorPin_Init+0xe0>)
 8004366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800436a:	60d3      	str	r3, [r2, #12]

	/*Set PA7 to output mode*/
	GPIOA->MODER |= (1U<<14);
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <MotorPin_Init+0xe0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <MotorPin_Init+0xe0>)
 8004372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004376:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<15);
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <MotorPin_Init+0xe0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <MotorPin_Init+0xe0>)
 800437e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004382:	6013      	str	r3, [r2, #0]
	/*Set PA7 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<14);
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <MotorPin_Init+0xe0>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <MotorPin_Init+0xe0>)
 800438a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800438e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<15);
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <MotorPin_Init+0xe0>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <MotorPin_Init+0xe0>)
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	60d3      	str	r3, [r2, #12]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40020000 	.word	0x40020000

080043b0 <Motor_A_Forward>:


/* NOTE: Have to add deadtime delay to prevent shoothrough*/
void Motor_A_Forward(uint32_t speed)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	MotorPin_Init();
 80043b8:	f7ff ff88 	bl	80042cc <MotorPin_Init>
	GPIOA->ODR |= IN1;
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <Motor_A_Forward+0x34>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <Motor_A_Forward+0x34>)
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~IN2;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <Motor_A_Forward+0x34>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <Motor_A_Forward+0x34>)
 80043ce:	f023 0310 	bic.w	r3, r3, #16
 80043d2:	6153      	str	r3, [r2, #20]
	pwm_set_dutycycle(speed, TIMER2);
 80043d4:	2102      	movs	r1, #2
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ff5a 	bl	8004290 <pwm_set_dutycycle>
//	Motor_A_Status();
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40020000 	.word	0x40020000

080043e8 <Motor_B_Forward>:
	}
}

//////////////////////////////////////////////
void Motor_B_Forward(uint32_t speed)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	MotorPin_Init();
 80043f0:	f7ff ff6c 	bl	80042cc <MotorPin_Init>
	GPIOA->ODR |= IN3;
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <Motor_B_Forward+0x34>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <Motor_B_Forward+0x34>)
 80043fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fe:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~IN4;
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <Motor_B_Forward+0x34>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <Motor_B_Forward+0x34>)
 8004406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440a:	6153      	str	r3, [r2, #20]
	pwm_set_dutycycle(speed, TIMER4);
 800440c:	2104      	movs	r1, #4
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff3e 	bl	8004290 <pwm_set_dutycycle>
//	Motor_B_Status();
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40020000 	.word	0x40020000

08004420 <Encoder_A_Init>:
		printf("IN4 ON...\n\r");
	}
}

void Encoder_A_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004424:	b672      	cpsid	i
}
 8004426:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <Encoder_A_Init+0xc8>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <Encoder_A_Init+0xc8>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 to input mode*/
	GPIOA->MODER &= ~(1U<<16);
 8004434:	4b2d      	ldr	r3, [pc, #180]	; (80044ec <Encoder_A_Init+0xcc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <Encoder_A_Init+0xcc>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<17);
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <Encoder_A_Init+0xcc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a29      	ldr	r2, [pc, #164]	; (80044ec <Encoder_A_Init+0xcc>)
 8004446:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800444a:	6013      	str	r3, [r2, #0]
	/*Set PA8 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<16);
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <Encoder_A_Init+0xcc>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <Encoder_A_Init+0xcc>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<17);
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <Encoder_A_Init+0xcc>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <Encoder_A_Init+0xcc>)
 800445e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004462:	60d3      	str	r3, [r2, #12]

	/*Set PA9 to input mode*/
	GPIOA->MODER &= ~(1U<<18);
 8004464:	4b21      	ldr	r3, [pc, #132]	; (80044ec <Encoder_A_Init+0xcc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a20      	ldr	r2, [pc, #128]	; (80044ec <Encoder_A_Init+0xcc>)
 800446a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=	~(1U<<19);
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <Encoder_A_Init+0xcc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <Encoder_A_Init+0xcc>)
 8004476:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800447a:	6013      	str	r3, [r2, #0]
	/*Set PA9 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<18);
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <Encoder_A_Init+0xcc>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <Encoder_A_Init+0xcc>)
 8004482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004486:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<19);
 8004488:	4b18      	ldr	r3, [pc, #96]	; (80044ec <Encoder_A_Init+0xcc>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <Encoder_A_Init+0xcc>)
 800448e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004492:	60d3      	str	r3, [r2, #12]


	/*Enable clock access to SYSCFG*/
	RCC->APB2ENR |= SYSCFGEN;
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <Encoder_A_Init+0xc8>)
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <Encoder_A_Init+0xc8>)
 800449a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTA on EXTI8*/
	SYSCFG->EXTICR[2] &= ~EXTI8; //EXTICR[3:0] chooses from the four configuration registers
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <Encoder_A_Init+0xd0>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <Encoder_A_Init+0xd0>)
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	6113      	str	r3, [r2, #16]

	/*Unmask EXTI8*/
	EXTI->IMR |= IMR_MR8;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]
	/*Select rising edge trigger*/
	EXTI->RTSR |= RTSR_TR8;
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c2:	6093      	str	r3, [r2, #8]
	/*Select falling edge trigger*/
	EXTI->FTSR |= FTSR_TR8;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <Encoder_A_Init+0xd4>)
 80044ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ce:	60d3      	str	r3, [r2, #12]

	/*Set priority of EXTI8 in NVIC*/
	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2017      	movs	r0, #23
 80044d4:	f7ff fde0 	bl	8004098 <__NVIC_SetPriority>
	/*Enable EXTI8 line in NVIC*/
	NVIC_EnableIRQ(EXTI9_5_IRQn); //EXTI9_5_IRQn selects external Line[9:5] interrupts
 80044d8:	2017      	movs	r0, #23
 80044da:	f7ff fdbf 	bl	800405c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80044de:	b662      	cpsie	i
}
 80044e0:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020000 	.word	0x40020000
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40013c00 	.word	0x40013c00

080044f8 <exti8_callback>:

static void exti8_callback(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
	long int last_state_A = GPIOA->IDR & Encoder_A_Pin8;
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <exti8_callback+0x84>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	607b      	str	r3, [r7, #4]
	if ((Encoder_A_Pin8_Last == GPIO_PIN_CUSTOM_RESET) && (last_state_A == GPIO_PIN_CUSTOM_SET))
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <exti8_callback+0x88>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <exti8_callback+0x52>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b20      	cmp	r3, #32
 8004514:	d119      	bne.n	800454a <exti8_callback+0x52>
	{
		long int val_A = GPIOA->IDR & Encoder_A_Pin9;
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <exti8_callback+0x84>)
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451e:	603b      	str	r3, [r7, #0]
		if ((val_A == GPIO_PIN_CUSTOM_RESET) && direction_A)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <exti8_callback+0x3e>
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <exti8_callback+0x8c>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <exti8_callback+0x3e>
		{
			direction_A = 0; // Reverse
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <exti8_callback+0x8c>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e009      	b.n	800454a <exti8_callback+0x52>
		}
		else if ((val_A == GPIO_PIN_CUSTOM_SET) && (direction_A == 0))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b20      	cmp	r3, #32
 800453a:	d106      	bne.n	800454a <exti8_callback+0x52>
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <exti8_callback+0x8c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <exti8_callback+0x52>
		{
			direction_A = 1; // Forward
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <exti8_callback+0x8c>)
 8004546:	2201      	movs	r2, #1
 8004548:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_A_Pin8_Last = last_state_A;
 800454a:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <exti8_callback+0x88>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6013      	str	r3, [r2, #0]

	if (!direction_A)
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <exti8_callback+0x8c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <exti8_callback+0x6c>
		Encoder_A_counts++;
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <exti8_callback+0x90>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <exti8_callback+0x90>)
 8004560:	6013      	str	r3, [r2, #0]
	else
		Encoder_A_counts--;
}
 8004562:	e004      	b.n	800456e <exti8_callback+0x76>
		Encoder_A_counts--;
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <exti8_callback+0x90>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3b01      	subs	r3, #1
 800456a:	4a07      	ldr	r2, [pc, #28]	; (8004588 <exti8_callback+0x90>)
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40020000 	.word	0x40020000
 8004580:	200001a8 	.word	0x200001a8
 8004584:	200001b8 	.word	0x200001b8
 8004588:	200001ac 	.word	0x200001ac

0800458c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_A_Pin8)!=0) //If Pending register on Line 8 is triggered
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <EXTI9_5_IRQHandler+0x24>)
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <EXTI9_5_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_A_Pin8;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <EXTI9_5_IRQHandler+0x24>)
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <EXTI9_5_IRQHandler+0x24>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6153      	str	r3, [r2, #20]

		exti8_callback();
 80045a8:	f7ff ffa6 	bl	80044f8 <exti8_callback>
	}

}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40013c00 	.word	0x40013c00

080045b4 <get_Encoder_A_counts>:

int get_Encoder_A_counts(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
	return Encoder_A_counts;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <get_Encoder_A_counts+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200001ac 	.word	0x200001ac
 80045cc:	00000000 	.word	0x00000000

080045d0 <Motor_A_Dist_mm>:
{
	Encoder_A_counts = 0;
}

int Motor_A_Dist_mm(uint16_t diameter)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
	Motor_A_Distance = (2*PI*(diameter/2)*get_Encoder_A_counts())/PPR;
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fb ff53 	bl	800048c <__aeabi_i2d>
 80045e6:	a318      	add	r3, pc, #96	; (adr r3, 8004648 <Motor_A_Dist_mm+0x78>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb ffb8 	bl	8000560 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	f7ff ffdc 	bl	80045b4 <get_Encoder_A_counts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ff44 	bl	800048c <__aeabi_i2d>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb ffa8 	bl	8000560 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <Motor_A_Dist_mm+0x70>)
 800461e:	f7fc f8c9 	bl	80007b4 <__aeabi_ddiv>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fc fa49 	bl	8000ac0 <__aeabi_d2iz>
 800462e:	4603      	mov	r3, r0
 8004630:	4a04      	ldr	r2, [pc, #16]	; (8004644 <Motor_A_Dist_mm+0x74>)
 8004632:	6013      	str	r3, [r2, #0]

	return Motor_A_Distance;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <Motor_A_Dist_mm+0x74>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bdb0      	pop	{r4, r5, r7, pc}
 8004640:	409e0000 	.word	0x409e0000
 8004644:	200001bc 	.word	0x200001bc
 8004648:	c083126f 	.word	0xc083126f
 800464c:	401921ca 	.word	0x401921ca

08004650 <Encoder_B_Init>:

void Encoder_B_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004654:	b672      	cpsid	i
}
 8004656:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <Encoder_B_Init+0xc8>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <Encoder_B_Init+0xc8>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA10 to input mode*/
	GPIOA->MODER &= ~(1U<<20);
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <Encoder_B_Init+0xcc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <Encoder_B_Init+0xcc>)
 800466a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800466e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<21);
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <Encoder_B_Init+0xcc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <Encoder_B_Init+0xcc>)
 8004676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800467a:	6013      	str	r3, [r2, #0]
	/*Set PA10 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<20);
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <Encoder_B_Init+0xcc>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a26      	ldr	r2, [pc, #152]	; (800471c <Encoder_B_Init+0xcc>)
 8004682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<21);
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <Encoder_B_Init+0xcc>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <Encoder_B_Init+0xcc>)
 800468e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004692:	60d3      	str	r3, [r2, #12]

	/*Set PA11 to input mode*/
	GPIOA->MODER &= ~(1U<<22);
 8004694:	4b21      	ldr	r3, [pc, #132]	; (800471c <Encoder_B_Init+0xcc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <Encoder_B_Init+0xcc>)
 800469a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800469e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=	~(1U<<23);
 80046a0:	4b1e      	ldr	r3, [pc, #120]	; (800471c <Encoder_B_Init+0xcc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <Encoder_B_Init+0xcc>)
 80046a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046aa:	6013      	str	r3, [r2, #0]
	/*Set PA11 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<22);
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <Encoder_B_Init+0xcc>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	; (800471c <Encoder_B_Init+0xcc>)
 80046b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046b6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<23);
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <Encoder_B_Init+0xcc>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <Encoder_B_Init+0xcc>)
 80046be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046c2:	60d3      	str	r3, [r2, #12]

	/*Enable clock access to SYSCFG*/
	RCC->APB2ENR |= SYSCFGEN;
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <Encoder_B_Init+0xc8>)
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <Encoder_B_Init+0xc8>)
 80046ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ce:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTA on EXTI10*/
	SYSCFG->EXTICR[2] &= ~EXTI10; //EXTICR[3:0] chooses from the four configuration registers
 80046d0:	4b13      	ldr	r3, [pc, #76]	; (8004720 <Encoder_B_Init+0xd0>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <Encoder_B_Init+0xd0>)
 80046d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046da:	6113      	str	r3, [r2, #16]

	/*Unmask EXTI10*/
	EXTI->IMR |= IMR_MR10;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <Encoder_B_Init+0xd4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a10      	ldr	r2, [pc, #64]	; (8004724 <Encoder_B_Init+0xd4>)
 80046e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e6:	6013      	str	r3, [r2, #0]
	/*Select rising edge trigger*/
	EXTI->RTSR |= RTSR_TR10;
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <Encoder_B_Init+0xd4>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <Encoder_B_Init+0xd4>)
 80046ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f2:	6093      	str	r3, [r2, #8]
	/*Select falling edge trigger*/
	EXTI->FTSR |= FTSR_TR10;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <Encoder_B_Init+0xd4>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <Encoder_B_Init+0xd4>)
 80046fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046fe:	60d3      	str	r3, [r2, #12]

	/*Set priority of EXTI10 in NVIC*/
	NVIC_SetPriority(EXTI15_10_IRQn, 0);
 8004700:	2100      	movs	r1, #0
 8004702:	2028      	movs	r0, #40	; 0x28
 8004704:	f7ff fcc8 	bl	8004098 <__NVIC_SetPriority>
	/*Enable EXTI10 line in NVIC*/
	NVIC_EnableIRQ(EXTI15_10_IRQn); //EXTI15_10_IRQn selects external Line[15:10] interrupts
 8004708:	2028      	movs	r0, #40	; 0x28
 800470a:	f7ff fca7 	bl	800405c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800470e:	b662      	cpsie	i
}
 8004710:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40020000 	.word	0x40020000
 8004720:	40013800 	.word	0x40013800
 8004724:	40013c00 	.word	0x40013c00

08004728 <exti10_callback>:

static void exti10_callback(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
	long int last_state_B = GPIOA->IDR & Encoder_B_Pin10;
 800472e:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <exti10_callback+0x84>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	607b      	str	r3, [r7, #4]
	if ((Encoder_B_Pin10_Last == GPIO_PIN_CUSTOM_RESET) && (last_state_B == GPIO_PIN_CUSTOM_SET))
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <exti10_callback+0x88>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11c      	bne.n	800477a <exti10_callback+0x52>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b20      	cmp	r3, #32
 8004744:	d119      	bne.n	800477a <exti10_callback+0x52>
	{
		long int val_B = GPIOA->IDR & Encoder_B_Pin11;
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <exti10_callback+0x84>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	603b      	str	r3, [r7, #0]
		if ((val_B == GPIO_PIN_CUSTOM_RESET) && direction_B)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <exti10_callback+0x3e>
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <exti10_callback+0x8c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <exti10_callback+0x3e>
		{
			direction_B = 0; // Reverse
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <exti10_callback+0x8c>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e009      	b.n	800477a <exti10_callback+0x52>
		}
		else if ((val_B == GPIO_PIN_CUSTOM_SET) && (direction_B == 0))
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b20      	cmp	r3, #32
 800476a:	d106      	bne.n	800477a <exti10_callback+0x52>
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <exti10_callback+0x8c>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <exti10_callback+0x52>
		{
			direction_B = 1; // Forward
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <exti10_callback+0x8c>)
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_B_Pin10_Last = last_state_B;
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <exti10_callback+0x88>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6013      	str	r3, [r2, #0]

	if (!direction_B)
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <exti10_callback+0x8c>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <exti10_callback+0x6c>
		Encoder_B_counts++;
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <exti10_callback+0x90>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <exti10_callback+0x90>)
 8004790:	6013      	str	r3, [r2, #0]
	else
		Encoder_B_counts--;
}
 8004792:	e004      	b.n	800479e <exti10_callback+0x76>
		Encoder_B_counts--;
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <exti10_callback+0x90>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3b01      	subs	r3, #1
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <exti10_callback+0x90>)
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40020000 	.word	0x40020000
 80047b0:	200001b0 	.word	0x200001b0
 80047b4:	200001b9 	.word	0x200001b9
 80047b8:	200001b4 	.word	0x200001b4

080047bc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_B_Pin10)!=0) //If Pending register on Line 10 is triggered
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <EXTI15_10_IRQHandler+0x24>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <EXTI15_10_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_B_Pin10;
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <EXTI15_10_IRQHandler+0x24>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <EXTI15_10_IRQHandler+0x24>)
 80047d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d6:	6153      	str	r3, [r2, #20]

		exti10_callback();
 80047d8:	f7ff ffa6 	bl	8004728 <exti10_callback>
	}

}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40013c00 	.word	0x40013c00

080047e4 <get_Encoder_B_counts>:

int get_Encoder_B_counts(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
	return Encoder_B_counts;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <get_Encoder_B_counts+0x14>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	200001b4 	.word	0x200001b4
 80047fc:	00000000 	.word	0x00000000

08004800 <Motor_B_Dist_mm>:
{
	Encoder_B_counts = 0;
}

int Motor_B_Dist_mm(uint16_t diameter)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	80fb      	strh	r3, [r7, #6]
	Motor_B_Distance = (2*PI*(diameter/2)*get_Encoder_B_counts())/PPR;
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fe3b 	bl	800048c <__aeabi_i2d>
 8004816:	a318      	add	r3, pc, #96	; (adr r3, 8004878 <Motor_B_Dist_mm+0x78>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f7fb fea0 	bl	8000560 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4614      	mov	r4, r2
 8004826:	461d      	mov	r5, r3
 8004828:	f7ff ffdc 	bl	80047e4 <get_Encoder_B_counts>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb fe2c 	bl	800048c <__aeabi_i2d>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4620      	mov	r0, r4
 800483a:	4629      	mov	r1, r5
 800483c:	f7fb fe90 	bl	8000560 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <Motor_B_Dist_mm+0x70>)
 800484e:	f7fb ffb1 	bl	80007b4 <__aeabi_ddiv>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f7fc f931 	bl	8000ac0 <__aeabi_d2iz>
 800485e:	4603      	mov	r3, r0
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <Motor_B_Dist_mm+0x74>)
 8004862:	6013      	str	r3, [r2, #0]

	return Motor_B_Distance;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <Motor_B_Dist_mm+0x74>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bdb0      	pop	{r4, r5, r7, pc}
 8004870:	409e0000 	.word	0x409e0000
 8004874:	200001c0 	.word	0x200001c0
 8004878:	c083126f 	.word	0xc083126f
 800487c:	401921ca 	.word	0x401921ca

08004880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_MspInit+0x4c>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_MspInit+0x4c>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004894:	6453      	str	r3, [r2, #68]	; 0x44
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_MspInit+0x4c>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_MspInit+0x4c>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <HAL_MspInit+0x4c>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_MspInit+0x4c>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048be:	2007      	movs	r0, #7
 80048c0:	f000 fa7e 	bl	8004dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800

080048d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_TIM_Base_MspInit+0x8c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80048fe:	e026      	b.n	800494e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_TIM_Base_MspInit+0x94>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 8004914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004918:	6453      	str	r3, [r2, #68]	; 0x44
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
}
 8004926:	e012      	b.n	800494e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <HAL_TIM_Base_MspInit+0x98>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10d      	bne.n	800494e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 800493c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_TIM_Base_MspInit+0x90>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40000400 	.word	0x40000400
 8004960:	40023800 	.word	0x40023800
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800

0800496c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_UART_MspInit+0x84>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d12b      	bne.n	80049e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_UART_MspInit+0x88>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_UART_MspInit+0x88>)
 8004998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_UART_MspInit+0x88>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_UART_MspInit+0x88>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <HAL_UART_MspInit+0x88>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_UART_MspInit+0x88>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049c6:	230c      	movs	r3, #12
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d6:	2307      	movs	r3, #7
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <HAL_UART_MspInit+0x8c>)
 80049e2:	f000 fa21 	bl	8004e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049e6:	bf00      	nop
 80049e8:	3728      	adds	r7, #40	; 0x28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40004400 	.word	0x40004400
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40020000 	.word	0x40020000

080049fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a00:	e7fe      	b.n	8004a00 <NMI_Handler+0x4>

08004a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a06:	e7fe      	b.n	8004a06 <HardFault_Handler+0x4>

08004a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a0c:	e7fe      	b.n	8004a0c <MemManage_Handler+0x4>

08004a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a12:	e7fe      	b.n	8004a12 <BusFault_Handler+0x4>

08004a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a18:	e7fe      	b.n	8004a18 <UsageFault_Handler+0x4>

08004a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a48:	f000 f8e8 	bl	8004c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return 1;
 8004a54:	2301      	movs	r3, #1
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <_kill>:

int _kill(int pid, int sig)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a6a:	f002 f921 	bl	8006cb0 <__errno>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2216      	movs	r2, #22
 8004a72:	601a      	str	r2, [r3, #0]
  return -1;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_exit>:

void _exit (int status)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ffe7 	bl	8004a60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a92:	e7fe      	b.n	8004a92 <_exit+0x12>

08004a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <_sbrk+0x5c>)
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <_sbrk+0x60>)
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <_sbrk+0x64>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <_sbrk+0x64>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <_sbrk+0x68>)
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ac4:	f002 f8f4 	bl	8006cb0 <__errno>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	220c      	movs	r2, #12
 8004acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e009      	b.n	8004ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <_sbrk+0x64>)
 8004ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20018000 	.word	0x20018000
 8004af4:	00000400 	.word	0x00000400
 8004af8:	200001c4 	.word	0x200001c4
 8004afc:	200001e0 	.word	0x200001e0

08004b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <SystemInit+0x20>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <SystemInit+0x20>)
 8004b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b2a:	490e      	ldr	r1, [pc, #56]	; (8004b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b2c:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b30:	e002      	b.n	8004b38 <LoopCopyDataInit>

08004b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b36:	3304      	adds	r3, #4

08004b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b3c:	d3f9      	bcc.n	8004b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b3e:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b40:	4c0b      	ldr	r4, [pc, #44]	; (8004b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b44:	e001      	b.n	8004b4a <LoopFillZerobss>

08004b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b48:	3204      	adds	r2, #4

08004b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b4c:	d3fb      	bcc.n	8004b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b4e:	f7ff ffd7 	bl	8004b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b52:	f002 f8b3 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b56:	f7fc fdb7 	bl	80016c8 <main>
  bx  lr    
 8004b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004b68:	0800731c 	.word	0x0800731c
  ldr r2, =_sbss
 8004b6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004b70:	200001e0 	.word	0x200001e0

08004b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b74:	e7fe      	b.n	8004b74 <ADC_IRQHandler>
	...

08004b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <HAL_Init+0x40>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <HAL_Init+0x40>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_Init+0x40>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <HAL_Init+0x40>)
 8004b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a07      	ldr	r2, [pc, #28]	; (8004bb8 <HAL_Init+0x40>)
 8004b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ba0:	2003      	movs	r0, #3
 8004ba2:	f000 f90d 	bl	8004dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f000 f808 	bl	8004bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bac:	f7ff fe68 	bl	8004880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023c00 	.word	0x40023c00

08004bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_InitTick+0x54>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_InitTick+0x58>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f917 	bl	8004e0e <HAL_SYSTICK_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00e      	b.n	8004c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d80a      	bhi.n	8004c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	f000 f8ed 	bl	8004dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <HAL_InitTick+0x5c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000000 	.word	0x20000000
 8004c14:	20000008 	.word	0x20000008
 8004c18:	20000004 	.word	0x20000004

08004c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_IncTick+0x20>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_IncTick+0x24>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <HAL_IncTick+0x24>)
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000008 	.word	0x20000008
 8004c40:	200001c8 	.word	0x200001c8

08004c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return uwTick;
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_GetTick+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200001c8 	.word	0x200001c8

08004c5c <__NVIC_SetPriorityGrouping>:
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c8e:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	60d3      	str	r3, [r2, #12]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <__NVIC_GetPriorityGrouping>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <__NVIC_GetPriorityGrouping+0x18>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	f003 0307 	and.w	r3, r3, #7
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <__NVIC_SetPriority>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db0a      	blt.n	8004cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	490c      	ldr	r1, [pc, #48]	; (8004d0c <__NVIC_SetPriority+0x4c>)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ce8:	e00a      	b.n	8004d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <__NVIC_SetPriority+0x50>)
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	761a      	strb	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000e100 	.word	0xe000e100
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f1c3 0307 	rsb	r3, r3, #7
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	bf28      	it	cs
 8004d32:	2304      	movcs	r3, #4
 8004d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d902      	bls.n	8004d44 <NVIC_EncodePriority+0x30>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3b03      	subs	r3, #3
 8004d42:	e000      	b.n	8004d46 <NVIC_EncodePriority+0x32>
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	401a      	ands	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	43d9      	mvns	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d6c:	4313      	orrs	r3, r2
         );
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8c:	d301      	bcc.n	8004d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e00f      	b.n	8004db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <SysTick_Config+0x40>)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d9a:	210f      	movs	r1, #15
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	f7ff ff8e 	bl	8004cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <SysTick_Config+0x40>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <SysTick_Config+0x40>)
 8004dac:	2207      	movs	r2, #7
 8004dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	e000e010 	.word	0xe000e010

08004dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff47 	bl	8004c5c <__NVIC_SetPriorityGrouping>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004de8:	f7ff ff5c 	bl	8004ca4 <__NVIC_GetPriorityGrouping>
 8004dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7ff ff8e 	bl	8004d14 <NVIC_EncodePriority>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff5d 	bl	8004cc0 <__NVIC_SetPriority>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffb0 	bl	8004d7c <SysTick_Config>
 8004e1c:	4603      	mov	r3, r0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e159      	b.n	80050f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e44:	2201      	movs	r2, #1
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	f040 8148 	bne.w	80050f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d005      	beq.n	8004e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d130      	bne.n	8004edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	2203      	movs	r2, #3
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 0201 	and.w	r2, r3, #1
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d017      	beq.n	8004f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d123      	bne.n	8004f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	08da      	lsrs	r2, r3, #3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3208      	adds	r2, #8
 8004f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	220f      	movs	r2, #15
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	08da      	lsrs	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3208      	adds	r2, #8
 8004f66:	69b9      	ldr	r1, [r7, #24]
 8004f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 0203 	and.w	r2, r3, #3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80a2 	beq.w	80050f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	4b57      	ldr	r3, [pc, #348]	; (8005110 <HAL_GPIO_Init+0x2e8>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	4a56      	ldr	r2, [pc, #344]	; (8005110 <HAL_GPIO_Init+0x2e8>)
 8004fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fbe:	4b54      	ldr	r3, [pc, #336]	; (8005110 <HAL_GPIO_Init+0x2e8>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fca:	4a52      	ldr	r2, [pc, #328]	; (8005114 <HAL_GPIO_Init+0x2ec>)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a49      	ldr	r2, [pc, #292]	; (8005118 <HAL_GPIO_Init+0x2f0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d019      	beq.n	800502a <HAL_GPIO_Init+0x202>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a48      	ldr	r2, [pc, #288]	; (800511c <HAL_GPIO_Init+0x2f4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_GPIO_Init+0x1fe>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a47      	ldr	r2, [pc, #284]	; (8005120 <HAL_GPIO_Init+0x2f8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00d      	beq.n	8005022 <HAL_GPIO_Init+0x1fa>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a46      	ldr	r2, [pc, #280]	; (8005124 <HAL_GPIO_Init+0x2fc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <HAL_GPIO_Init+0x1f6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a45      	ldr	r2, [pc, #276]	; (8005128 <HAL_GPIO_Init+0x300>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_GPIO_Init+0x1f2>
 8005016:	2304      	movs	r3, #4
 8005018:	e008      	b.n	800502c <HAL_GPIO_Init+0x204>
 800501a:	2307      	movs	r3, #7
 800501c:	e006      	b.n	800502c <HAL_GPIO_Init+0x204>
 800501e:	2303      	movs	r3, #3
 8005020:	e004      	b.n	800502c <HAL_GPIO_Init+0x204>
 8005022:	2302      	movs	r3, #2
 8005024:	e002      	b.n	800502c <HAL_GPIO_Init+0x204>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_GPIO_Init+0x204>
 800502a:	2300      	movs	r3, #0
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	f002 0203 	and.w	r2, r2, #3
 8005032:	0092      	lsls	r2, r2, #2
 8005034:	4093      	lsls	r3, r2
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800503c:	4935      	ldr	r1, [pc, #212]	; (8005114 <HAL_GPIO_Init+0x2ec>)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800504a:	4b38      	ldr	r3, [pc, #224]	; (800512c <HAL_GPIO_Init+0x304>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <HAL_GPIO_Init+0x304>)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_GPIO_Init+0x304>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <HAL_GPIO_Init+0x304>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800509e:	4b23      	ldr	r3, [pc, #140]	; (800512c <HAL_GPIO_Init+0x304>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050c2:	4a1a      	ldr	r2, [pc, #104]	; (800512c <HAL_GPIO_Init+0x304>)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <HAL_GPIO_Init+0x304>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050ec:	4a0f      	ldr	r2, [pc, #60]	; (800512c <HAL_GPIO_Init+0x304>)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b0f      	cmp	r3, #15
 80050fc:	f67f aea2 	bls.w	8004e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40023800 	.word	0x40023800
 8005114:	40013800 	.word	0x40013800
 8005118:	40020000 	.word	0x40020000
 800511c:	40020400 	.word	0x40020400
 8005120:	40020800 	.word	0x40020800
 8005124:	40020c00 	.word	0x40020c00
 8005128:	40021000 	.word	0x40021000
 800512c:	40013c00 	.word	0x40013c00

08005130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e001      	b.n	8005152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
 800516c:	4613      	mov	r3, r2
 800516e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005170:	787b      	ldrb	r3, [r7, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800517c:	e003      	b.n	8005186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	041a      	lsls	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	619a      	str	r2, [r3, #24]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000000 	.word	0x20000000

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	08007170 	.word	0x08007170

080051d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051d8:	f7ff ffdc 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0b5b      	lsrs	r3, r3, #13
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4903      	ldr	r1, [pc, #12]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40023800 	.word	0x40023800
 80051f8:	08007170 	.word	0x08007170

080051fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e041      	b.n	8005292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fb54 	bl	80048d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f000 f950 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e03c      	b.n	800532e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_TIM_Base_Start+0xa0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_TIM_Base_Start+0x5c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d013      	beq.n	80052f8 <HAL_TIM_Base_Start+0x5c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <HAL_TIM_Base_Start+0xa4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_TIM_Base_Start+0x5c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_TIM_Base_Start+0xa8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_TIM_Base_Start+0x5c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_TIM_Base_Start+0xac>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_Base_Start+0x5c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <HAL_TIM_Base_Start+0xb0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b06      	cmp	r3, #6
 8005308:	d010      	beq.n	800532c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	e007      	b.n	800532c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40014000 	.word	0x40014000

08005350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e0b4      	b.n	80054d6 <HAL_TIM_ConfigClockSource+0x186>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d03e      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0xd4>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	f200 8087 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	f000 8086 	beq.w	80054c2 <HAL_TIM_ConfigClockSource+0x172>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d87f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d01a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0xa6>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d87b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d050      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x11a>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d877      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d03c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0xfa>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d873      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d058      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x13a>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d86f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d064      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d86b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d060      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d867      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05c      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d05a      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053f4:	e062      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 f965 	bl	80056d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	609a      	str	r2, [r3, #8]
      break;
 8005422:	e04f      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f000 f94e 	bl	80056d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005446:	609a      	str	r2, [r3, #8]
      break;
 8005448:	e03c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	461a      	mov	r2, r3
 8005458:	f000 f8c2 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2150      	movs	r1, #80	; 0x50
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f91b 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005468:	e02c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	461a      	mov	r2, r3
 8005478:	f000 f8e1 	bl	800563e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2160      	movs	r1, #96	; 0x60
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f90b 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005488:	e01c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 f8a2 	bl	80055e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f8fb 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f000 f8f2 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054ba:	e003      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <TIM_Base_SetConfig+0xe4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00f      	beq.n	8005518 <TIM_Base_SetConfig+0x38>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d00b      	beq.n	8005518 <TIM_Base_SetConfig+0x38>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <TIM_Base_SetConfig+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_Base_SetConfig+0x38>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a30      	ldr	r2, [pc, #192]	; (80055cc <TIM_Base_SetConfig+0xec>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_Base_SetConfig+0x38>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <TIM_Base_SetConfig+0xf0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d108      	bne.n	800552a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <TIM_Base_SetConfig+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01b      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005538:	d017      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <TIM_Base_SetConfig+0xe8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_Base_SetConfig+0xec>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <TIM_Base_SetConfig+0xf0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <TIM_Base_SetConfig+0xf4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <TIM_Base_SetConfig+0xf8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0x8a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <TIM_Base_SetConfig+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d108      	bne.n	800557c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <TIM_Base_SetConfig+0xe4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d103      	bne.n	80055b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	615a      	str	r2, [r3, #20]
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0210 	bic.w	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e050      	b.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d018      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d013      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a13      	ldr	r2, [pc, #76]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10c      	bne.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40014000 	.word	0x40014000

080057f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e03f      	b.n	8005882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff f8a8 	bl	800496c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f929 	bl	8005a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b08a      	sub	sp, #40	; 0x28
 800588e:	af02      	add	r7, sp, #8
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d17c      	bne.n	80059a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_UART_Transmit+0x2c>
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e075      	b.n	80059a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Transmit+0x3e>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e06e      	b.n	80059a6 <HAL_UART_Transmit+0x11c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2221      	movs	r2, #33	; 0x21
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058de:	f7ff f9b1 	bl	8004c44 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f8:	d108      	bne.n	800590c <HAL_UART_Transmit+0x82>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e003      	b.n	8005914 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800591c:	e02a      	b.n	8005974 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f840 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e036      	b.n	80059a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800594c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	3302      	adds	r3, #2
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e007      	b.n	8005966 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1cf      	bne.n	800591e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2140      	movs	r1, #64	; 0x40
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f810 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e006      	b.n	80059a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b090      	sub	sp, #64	; 0x40
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059be:	e050      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d04c      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x30>
 80059ce:	f7ff f939 	bl	8004c44 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059da:	429a      	cmp	r2, r3
 80059dc:	d241      	bcs.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	613b      	str	r3, [r7, #16]
   return(result);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a32:	623a      	str	r2, [r7, #32]
 8005a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	69f9      	ldr	r1, [r7, #28]
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00f      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d09f      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3740      	adds	r7, #64	; 0x40
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a90:	b0c0      	sub	sp, #256	; 0x100
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	68d9      	ldr	r1, [r3, #12]
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	ea40 0301 	orr.w	r3, r0, r1
 8005ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae4:	f021 010c 	bic.w	r1, r1, #12
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005af2:	430b      	orrs	r3, r1
 8005af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	6999      	ldr	r1, [r3, #24]
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	ea40 0301 	orr.w	r3, r0, r1
 8005b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b8f      	ldr	r3, [pc, #572]	; (8005d58 <UART_SetConfig+0x2cc>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d005      	beq.n	8005b2c <UART_SetConfig+0xa0>
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b8d      	ldr	r3, [pc, #564]	; (8005d5c <UART_SetConfig+0x2d0>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d104      	bne.n	8005b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7ff fb52 	bl	80051d4 <HAL_RCC_GetPCLK2Freq>
 8005b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b34:	e003      	b.n	8005b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b36:	f7ff fb39 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8005b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b48:	f040 810c 	bne.w	8005d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b5e:	4622      	mov	r2, r4
 8005b60:	462b      	mov	r3, r5
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b66:	415b      	adcs	r3, r3
 8005b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b6e:	4621      	mov	r1, r4
 8005b70:	eb12 0801 	adds.w	r8, r2, r1
 8005b74:	4629      	mov	r1, r5
 8005b76:	eb43 0901 	adc.w	r9, r3, r1
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b8e:	4690      	mov	r8, r2
 8005b90:	4699      	mov	r9, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	eb18 0303 	adds.w	r3, r8, r3
 8005b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bba:	460b      	mov	r3, r1
 8005bbc:	18db      	adds	r3, r3, r3
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	eb42 0303 	adc.w	r3, r2, r3
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bd0:	f7fa ff9e 	bl	8000b10 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4b61      	ldr	r3, [pc, #388]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005bda:	fba3 2302 	umull	r2, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	011c      	lsls	r4, r3, #4
 8005be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c04:	4641      	mov	r1, r8
 8005c06:	eb12 0a01 	adds.w	sl, r2, r1
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c24:	4692      	mov	sl, r2
 8005c26:	469b      	mov	fp, r3
 8005c28:	4643      	mov	r3, r8
 8005c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c32:	464b      	mov	r3, r9
 8005c34:	eb4b 0303 	adc.w	r3, fp, r3
 8005c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c50:	460b      	mov	r3, r1
 8005c52:	18db      	adds	r3, r3, r3
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
 8005c56:	4613      	mov	r3, r2
 8005c58:	eb42 0303 	adc.w	r3, r2, r3
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c66:	f7fa ff53 	bl	8000b10 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4b3b      	ldr	r3, [pc, #236]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005c72:	fba3 2301 	umull	r2, r3, r3, r1
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2264      	movs	r2, #100	; 0x64
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	1acb      	subs	r3, r1, r3
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c86:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005c88:	fba3 2302 	umull	r2, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	1891      	adds	r1, r2, r2
 8005cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cb0:	415b      	adcs	r3, r3
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb8:	4641      	mov	r1, r8
 8005cba:	1851      	adds	r1, r2, r1
 8005cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	414b      	adcs	r3, r1
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	00cb      	lsls	r3, r1, #3
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cda:	4651      	mov	r1, sl
 8005cdc:	00ca      	lsls	r2, r1, #3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	189b      	adds	r3, r3, r2
 8005ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cec:	464b      	mov	r3, r9
 8005cee:	460a      	mov	r2, r1
 8005cf0:	eb42 0303 	adc.w	r3, r2, r3
 8005cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	18db      	adds	r3, r3, r3
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d12:	4613      	mov	r3, r2
 8005d14:	eb42 0303 	adc.w	r3, r2, r3
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d22:	f7fa fef5 	bl	8000b10 <__aeabi_uldivmod>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	2164      	movs	r1, #100	; 0x64
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	3332      	adds	r3, #50	; 0x32
 8005d3e:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <UART_SetConfig+0x2d4>)
 8005d40:	fba2 2303 	umull	r2, r3, r2, r3
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	f003 0207 	and.w	r2, r3, #7
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4422      	add	r2, r4
 8005d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d54:	e105      	b.n	8005f62 <UART_SetConfig+0x4d6>
 8005d56:	bf00      	nop
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	40011400 	.word	0x40011400
 8005d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d76:	4642      	mov	r2, r8
 8005d78:	464b      	mov	r3, r9
 8005d7a:	1891      	adds	r1, r2, r2
 8005d7c:	6239      	str	r1, [r7, #32]
 8005d7e:	415b      	adcs	r3, r3
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d86:	4641      	mov	r1, r8
 8005d88:	1854      	adds	r4, r2, r1
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	eb43 0501 	adc.w	r5, r3, r1
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	00eb      	lsls	r3, r5, #3
 8005d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d9e:	00e2      	lsls	r2, r4, #3
 8005da0:	4614      	mov	r4, r2
 8005da2:	461d      	mov	r5, r3
 8005da4:	4643      	mov	r3, r8
 8005da6:	18e3      	adds	r3, r4, r3
 8005da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dac:	464b      	mov	r3, r9
 8005dae:	eb45 0303 	adc.w	r3, r5, r3
 8005db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	008b      	lsls	r3, r1, #2
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ddc:	4621      	mov	r1, r4
 8005dde:	008a      	lsls	r2, r1, #2
 8005de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005de4:	f7fa fe94 	bl	8000b10 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4b60      	ldr	r3, [pc, #384]	; (8005f70 <UART_SetConfig+0x4e4>)
 8005dee:	fba3 2302 	umull	r2, r3, r3, r2
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	011c      	lsls	r4, r3, #4
 8005df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	61b9      	str	r1, [r7, #24]
 8005e10:	415b      	adcs	r3, r3
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e18:	4641      	mov	r1, r8
 8005e1a:	1851      	adds	r1, r2, r1
 8005e1c:	6139      	str	r1, [r7, #16]
 8005e1e:	4649      	mov	r1, r9
 8005e20:	414b      	adcs	r3, r1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e30:	4659      	mov	r1, fp
 8005e32:	00cb      	lsls	r3, r1, #3
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	00ca      	lsls	r2, r1, #3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	4642      	mov	r2, r8
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	460a      	mov	r2, r1
 8005e50:	eb42 0303 	adc.w	r3, r2, r3
 8005e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e70:	4649      	mov	r1, r9
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	008a      	lsls	r2, r1, #2
 8005e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e82:	f7fa fe45 	bl	8000b10 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <UART_SetConfig+0x4e4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a34      	ldr	r2, [pc, #208]	; (8005f70 <UART_SetConfig+0x4e4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eaa:	441c      	add	r4, r3
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8005eb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005eba:	4642      	mov	r2, r8
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	1891      	adds	r1, r2, r2
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	415b      	adcs	r3, r3
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eca:	4641      	mov	r1, r8
 8005ecc:	1851      	adds	r1, r2, r1
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	414b      	adcs	r3, r1
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	00cb      	lsls	r3, r1, #3
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eec:	4651      	mov	r1, sl
 8005eee:	00ca      	lsls	r2, r1, #3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	189b      	adds	r3, r3, r2
 8005efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005efc:	464b      	mov	r3, r9
 8005efe:	460a      	mov	r2, r1
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f10:	667a      	str	r2, [r7, #100]	; 0x64
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f1e:	4649      	mov	r1, r9
 8005f20:	008b      	lsls	r3, r1, #2
 8005f22:	4641      	mov	r1, r8
 8005f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f28:	4641      	mov	r1, r8
 8005f2a:	008a      	lsls	r2, r1, #2
 8005f2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f30:	f7fa fdee 	bl	8000b10 <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <UART_SetConfig+0x4e4>)
 8005f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	2164      	movs	r1, #100	; 0x64
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	3332      	adds	r3, #50	; 0x32
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <UART_SetConfig+0x4e4>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4422      	add	r2, r4
 8005f60:	609a      	str	r2, [r3, #8]
}
 8005f62:	bf00      	nop
 8005f64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	51eb851f 	.word	0x51eb851f

08005f74 <_ZdlPvj>:
 8005f74:	f000 bb05 	b.w	8006582 <_ZdlPv>

08005f78 <_Znwj>:
 8005f78:	2801      	cmp	r0, #1
 8005f7a:	bf38      	it	cc
 8005f7c:	2001      	movcc	r0, #1
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 febe 	bl	8006d04 <malloc>
 8005f88:	b930      	cbnz	r0, 8005f98 <_Znwj+0x20>
 8005f8a:	f000 fafd 	bl	8006588 <_ZSt15get_new_handlerv>
 8005f8e:	b908      	cbnz	r0, 8005f94 <_Znwj+0x1c>
 8005f90:	f000 fe86 	bl	8006ca0 <abort>
 8005f94:	4780      	blx	r0
 8005f96:	e7f4      	b.n	8005f82 <_Znwj+0xa>
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <_ZNSaIcEC1Ev>:
 8005f9a:	4770      	bx	lr

08005f9c <_ZNSaIcED1Ev>:
 8005f9c:	4770      	bx	lr

08005f9e <_ZSt17__throw_bad_allocv>:
 8005f9e:	b508      	push	{r3, lr}
 8005fa0:	f000 fe7e 	bl	8006ca0 <abort>

08005fa4 <_ZSt19__throw_logic_errorPKc>:
 8005fa4:	b508      	push	{r3, lr}
 8005fa6:	f000 fe7b 	bl	8006ca0 <abort>

08005faa <_ZSt20__throw_length_errorPKc>:
 8005faa:	b508      	push	{r3, lr}
 8005fac:	f000 fe78 	bl	8006ca0 <abort>

08005fb0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8005fb0:	b40f      	push	{r0, r1, r2, r3}
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	f107 0418 	add.w	r4, r7, #24
 8005fbc:	f854 2b04 	ldr.w	r2, [r4], #4
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fa f908 	bl	80001d8 <strlen>
 8005fc8:	f200 2307 	addw	r3, r0, #519	; 0x207
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	ebad 0d03 	sub.w	sp, sp, r3
 8005fd4:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	60fc      	str	r4, [r7, #12]
 8005fdc:	4623      	mov	r3, r4
 8005fde:	4668      	mov	r0, sp
 8005fe0:	f000 f854 	bl	800608c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8005fe4:	f000 fe5c 	bl	8006ca0 <abort>

08005fe8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b09c      	sub	sp, #112	; 0x70
 8005fec:	4606      	mov	r6, r0
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	1ba4      	subs	r4, r4, r6
 8005ff4:	490e      	ldr	r1, [pc, #56]	; (8006030 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8005ff6:	2269      	movs	r2, #105	; 0x69
 8005ff8:	1d38      	adds	r0, r7, #4
 8005ffa:	f000 fe93 	bl	8006d24 <memcpy>
 8005ffe:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	ebad 0d03 	sub.w	sp, sp, r3
 800600a:	466d      	mov	r5, sp
 800600c:	2268      	movs	r2, #104	; 0x68
 800600e:	1d39      	adds	r1, r7, #4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fe87 	bl	8006d24 <memcpy>
 8006016:	4622      	mov	r2, r4
 8006018:	4631      	mov	r1, r6
 800601a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800601e:	442c      	add	r4, r5
 8006020:	f000 fe80 	bl	8006d24 <memcpy>
 8006024:	2300      	movs	r3, #0
 8006026:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800602a:	4628      	mov	r0, r5
 800602c:	f7ff ffba 	bl	8005fa4 <_ZSt19__throw_logic_errorPKc>
 8006030:	08007178 	.word	0x08007178

08006034 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	af00      	add	r7, sp, #0
 800603a:	b084      	sub	sp, #16
 800603c:	466d      	mov	r5, sp
 800603e:	f105 040c 	add.w	r4, r5, #12
 8006042:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006088 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8006046:	4623      	mov	r3, r4
 8006048:	f04f 0c0a 	mov.w	ip, #10
 800604c:	fbb2 f6fc 	udiv	r6, r2, ip
 8006050:	fb0c 2e16 	mls	lr, ip, r6, r2
 8006054:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8006058:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800605c:	4696      	mov	lr, r2
 800605e:	f1be 0f09 	cmp.w	lr, #9
 8006062:	4632      	mov	r2, r6
 8006064:	d8f2      	bhi.n	800604c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8006066:	1ae4      	subs	r4, r4, r3
 8006068:	428c      	cmp	r4, r1
 800606a:	d809      	bhi.n	8006080 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800606c:	f1c4 030c 	rsb	r3, r4, #12
 8006070:	4622      	mov	r2, r4
 8006072:	18e9      	adds	r1, r5, r3
 8006074:	f000 fe56 	bl	8006d24 <memcpy>
 8006078:	4620      	mov	r0, r4
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006080:	f04f 34ff 	mov.w	r4, #4294967295
 8006084:	e7f8      	b.n	8006078 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8006086:	bf00      	nop
 8006088:	080071e1 	.word	0x080071e1

0800608c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800608c:	3901      	subs	r1, #1
 800608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006092:	4607      	mov	r7, r0
 8006094:	4615      	mov	r5, r2
 8006096:	eb00 0801 	add.w	r8, r0, r1
 800609a:	4604      	mov	r4, r0
 800609c:	782a      	ldrb	r2, [r5, #0]
 800609e:	b392      	cbz	r2, 8006106 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80060a0:	4544      	cmp	r4, r8
 80060a2:	d22a      	bcs.n	80060fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80060a4:	2a25      	cmp	r2, #37	; 0x25
 80060a6:	d107      	bne.n	80060b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80060a8:	786a      	ldrb	r2, [r5, #1]
 80060aa:	2a73      	cmp	r2, #115	; 0x73
 80060ac:	d009      	beq.n	80060c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80060ae:	2a7a      	cmp	r2, #122	; 0x7a
 80060b0:	d012      	beq.n	80060d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80060b2:	2a25      	cmp	r2, #37	; 0x25
 80060b4:	d100      	bne.n	80060b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80060b6:	3501      	adds	r5, #1
 80060b8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80060bc:	f804 2b01 	strb.w	r2, [r4], #1
 80060c0:	e7ec      	b.n	800609c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	3a01      	subs	r2, #1
 80060c8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80060cc:	b1c9      	cbz	r1, 8006102 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80060ce:	4544      	cmp	r4, r8
 80060d0:	d013      	beq.n	80060fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80060d2:	f804 1b01 	strb.w	r1, [r4], #1
 80060d6:	e7f7      	b.n	80060c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80060d8:	78aa      	ldrb	r2, [r5, #2]
 80060da:	2a75      	cmp	r2, #117	; 0x75
 80060dc:	d1ec      	bne.n	80060b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80060de:	461e      	mov	r6, r3
 80060e0:	eba8 0104 	sub.w	r1, r8, r4
 80060e4:	f856 2b04 	ldr.w	r2, [r6], #4
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff ffa3 	bl	8006034 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	dd03      	ble.n	80060fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80060f2:	4404      	add	r4, r0
 80060f4:	3503      	adds	r5, #3
 80060f6:	4633      	mov	r3, r6
 80060f8:	e7d0      	b.n	800609c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80060fa:	4621      	mov	r1, r4
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7ff ff73 	bl	8005fe8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8006102:	3502      	adds	r5, #2
 8006104:	e7ca      	b.n	800609c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8006106:	7022      	strb	r2, [r4, #0]
 8006108:	1be0      	subs	r0, r4, r7
 800610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800610e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800610e:	b10a      	cbz	r2, 8006114 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006110:	f000 be08 	b.w	8006d24 <memcpy>
 8006114:	4770      	bx	lr
	...

08006118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006118:	b508      	push	{r3, lr}
 800611a:	680b      	ldr	r3, [r1, #0]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d302      	bcc.n	8006128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006122:	480d      	ldr	r0, [pc, #52]	; (8006158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006124:	f7ff ff41 	bl	8005faa <_ZSt20__throw_length_errorPKc>
 8006128:	4293      	cmp	r3, r2
 800612a:	d90b      	bls.n	8006144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800612c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006130:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006134:	d206      	bcs.n	8006144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006136:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800613a:	bf2a      	itet	cs
 800613c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8006140:	6008      	strcc	r0, [r1, #0]
 8006142:	600b      	strcs	r3, [r1, #0]
 8006144:	6808      	ldr	r0, [r1, #0]
 8006146:	3001      	adds	r0, #1
 8006148:	d501      	bpl.n	800614e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800614a:	f7ff ff28 	bl	8005f9e <_ZSt17__throw_bad_allocv>
 800614e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006152:	f7ff bf11 	b.w	8005f78 <_Znwj>
 8006156:	bf00      	nop
 8006158:	080071ec 	.word	0x080071ec

0800615c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800615c:	f850 3b08 	ldr.w	r3, [r0], #8
 8006160:	4283      	cmp	r3, r0
 8006162:	d002      	beq.n	800616a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006164:	4618      	mov	r0, r3
 8006166:	f000 ba0c 	b.w	8006582 <_ZdlPv>
 800616a:	4770      	bx	lr

0800616c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800616c:	b508      	push	{r3, lr}
 800616e:	4603      	mov	r3, r0
 8006170:	4608      	mov	r0, r1
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4298      	cmp	r0, r3
 8006176:	4611      	mov	r1, r2
 8006178:	d903      	bls.n	8006182 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800617a:	4602      	mov	r2, r0
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800617e:	f7ff ff17 	bl	8005fb0 <_ZSt24__throw_out_of_range_fmtPKcz>
 8006182:	bd08      	pop	{r3, pc}
 8006184:	08007204 	.word	0x08007204

08006188 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006188:	6840      	ldr	r0, [r0, #4]
 800618a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800618e:	3901      	subs	r1, #1
 8006190:	1a09      	subs	r1, r1, r0
 8006192:	4291      	cmp	r1, r2
 8006194:	b508      	push	{r3, lr}
 8006196:	d202      	bcs.n	800619e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff06 	bl	8005faa <_ZSt20__throw_length_errorPKc>
 800619e:	bd08      	pop	{r3, pc}

080061a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80061a0:	6803      	ldr	r3, [r0, #0]
 80061a2:	428b      	cmp	r3, r1
 80061a4:	d806      	bhi.n	80061b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80061a6:	6840      	ldr	r0, [r0, #4]
 80061a8:	4418      	add	r0, r3
 80061aa:	4281      	cmp	r1, r0
 80061ac:	bf94      	ite	ls
 80061ae:	2000      	movls	r0, #0
 80061b0:	2001      	movhi	r0, #1
 80061b2:	4770      	bx	lr
 80061b4:	2001      	movs	r0, #1
 80061b6:	4770      	bx	lr

080061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80061b8:	2a01      	cmp	r2, #1
 80061ba:	b410      	push	{r4}
 80061bc:	d104      	bne.n	80061c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80061be:	780a      	ldrb	r2, [r1, #0]
 80061c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061c4:	7002      	strb	r2, [r0, #0]
 80061c6:	4770      	bx	lr
 80061c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061cc:	f7ff bf9f 	b.w	800610e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80061d0:	2a01      	cmp	r2, #1
 80061d2:	b430      	push	{r4, r5}
 80061d4:	d103      	bne.n	80061de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80061d6:	780b      	ldrb	r3, [r1, #0]
 80061d8:	7003      	strb	r3, [r0, #0]
 80061da:	bc30      	pop	{r4, r5}
 80061dc:	4770      	bx	lr
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d0fb      	beq.n	80061da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80061e2:	bc30      	pop	{r4, r5}
 80061e4:	f000 bdac 	b.w	8006d40 <memmove>

080061e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80061e8:	460b      	mov	r3, r1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	b410      	push	{r4}
 80061ee:	4611      	mov	r1, r2
 80061f0:	4604      	mov	r4, r0
 80061f2:	d103      	bne.n	80061fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80061f4:	7022      	strb	r2, [r4, #0]
 80061f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0fa      	beq.n	80061f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8006200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006204:	461a      	mov	r2, r3
 8006206:	f000 bdb5 	b.w	8006d74 <memset>

0800620a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800620a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800620c:	290f      	cmp	r1, #15
 800620e:	4604      	mov	r4, r0
 8006210:	9101      	str	r1, [sp, #4]
 8006212:	4615      	mov	r5, r2
 8006214:	d906      	bls.n	8006224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8006216:	2200      	movs	r2, #0
 8006218:	a901      	add	r1, sp, #4
 800621a:	f7ff ff7d 	bl	8006118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	6020      	str	r0, [r4, #0]
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	9901      	ldr	r1, [sp, #4]
 8006226:	b119      	cbz	r1, 8006230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	462a      	mov	r2, r5
 800622c:	f7ff ffdc 	bl	80061e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8006230:	9b01      	ldr	r3, [sp, #4]
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	2100      	movs	r1, #0
 8006238:	54d1      	strb	r1, [r2, r3]
 800623a:	b003      	add	sp, #12
 800623c:	bd30      	pop	{r4, r5, pc}

0800623e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800623e:	b508      	push	{r3, lr}
 8006240:	1a52      	subs	r2, r2, r1
 8006242:	f7ff ffb9 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006246:	bd08      	pop	{r3, pc}

08006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006248:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800624e:	461f      	mov	r7, r3
 8006250:	6843      	ldr	r3, [r0, #4]
 8006252:	eb01 0802 	add.w	r8, r1, r2
 8006256:	1ab2      	subs	r2, r6, r2
 8006258:	441a      	add	r2, r3
 800625a:	eba3 0908 	sub.w	r9, r3, r8
 800625e:	4603      	mov	r3, r0
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	f853 2b08 	ldr.w	r2, [r3], #8
 8006266:	429a      	cmp	r2, r3
 8006268:	bf18      	it	ne
 800626a:	6882      	ldrne	r2, [r0, #8]
 800626c:	460d      	mov	r5, r1
 800626e:	bf08      	it	eq
 8006270:	220f      	moveq	r2, #15
 8006272:	a901      	add	r1, sp, #4
 8006274:	4604      	mov	r4, r0
 8006276:	f7ff ff4f 	bl	8006118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800627a:	4682      	mov	sl, r0
 800627c:	b11d      	cbz	r5, 8006286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800627e:	6821      	ldr	r1, [r4, #0]
 8006280:	462a      	mov	r2, r5
 8006282:	f7ff ff99 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006286:	b137      	cbz	r7, 8006296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8006288:	b12e      	cbz	r6, 8006296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800628a:	4632      	mov	r2, r6
 800628c:	4639      	mov	r1, r7
 800628e:	eb0a 0005 	add.w	r0, sl, r5
 8006292:	f7ff ff91 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006296:	f1b9 0f00 	cmp.w	r9, #0
 800629a:	d007      	beq.n	80062ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800629c:	6821      	ldr	r1, [r4, #0]
 800629e:	4435      	add	r5, r6
 80062a0:	464a      	mov	r2, r9
 80062a2:	4441      	add	r1, r8
 80062a4:	eb0a 0005 	add.w	r0, sl, r5
 80062a8:	f7ff ff86 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7ff ff55 	bl	800615c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	f8c4 a000 	str.w	sl, [r4]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	b002      	add	sp, #8
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	f100 0308 	add.w	r3, r0, #8
 80062c6:	4604      	mov	r4, r0
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f7ff ff9e 	bl	800620a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80062ce:	4620      	mov	r0, r4
 80062d0:	bd10      	pop	{r4, pc}

080062d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	4604      	mov	r4, r0
 80062d6:	460e      	mov	r6, r1
 80062d8:	3008      	adds	r0, #8
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	f856 3b08 	ldr.w	r3, [r6], #8
 80062e0:	429e      	cmp	r6, r3
 80062e2:	460d      	mov	r5, r1
 80062e4:	d10b      	bne.n	80062fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80062e6:	2210      	movs	r2, #16
 80062e8:	4631      	mov	r1, r6
 80062ea:	f7ff ff10 	bl	800610e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80062ee:	686b      	ldr	r3, [r5, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	2300      	movs	r3, #0
 80062f4:	602e      	str	r6, [r5, #0]
 80062f6:	606b      	str	r3, [r5, #4]
 80062f8:	722b      	strb	r3, [r5, #8]
 80062fa:	4620      	mov	r0, r4
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	688b      	ldr	r3, [r1, #8]
 8006302:	60a3      	str	r3, [r4, #8]
 8006304:	e7f3      	b.n	80062ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08006306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006306:	b510      	push	{r4, lr}
 8006308:	4604      	mov	r4, r0
 800630a:	f7ff ff27 	bl	800615c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800630e:	4620      	mov	r0, r4
 8006310:	bd10      	pop	{r4, pc}

08006312 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8006312:	6840      	ldr	r0, [r0, #4]
 8006314:	4770      	bx	lr

08006316 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8006316:	4603      	mov	r3, r0
 8006318:	f853 2b08 	ldr.w	r2, [r3], #8
 800631c:	429a      	cmp	r2, r3
 800631e:	bf14      	ite	ne
 8006320:	6880      	ldrne	r0, [r0, #8]
 8006322:	200f      	moveq	r0, #15
 8006324:	4770      	bx	lr

08006326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	4408      	add	r0, r1
 800632a:	4770      	bx	lr

0800632c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800632c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006332:	4614      	mov	r4, r2
 8006334:	4680      	mov	r8, r0
 8006336:	462a      	mov	r2, r5
 8006338:	4689      	mov	r9, r1
 800633a:	461f      	mov	r7, r3
 800633c:	4621      	mov	r1, r4
 800633e:	4b39      	ldr	r3, [pc, #228]	; (8006424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8006340:	f7ff ff22 	bl	8006188 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8006344:	4642      	mov	r2, r8
 8006346:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800634a:	f852 6b08 	ldr.w	r6, [r2], #8
 800634e:	4296      	cmp	r6, r2
 8006350:	bf18      	it	ne
 8006352:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8006356:	eba5 0b04 	sub.w	fp, r5, r4
 800635a:	eb03 0a0b 	add.w	sl, r3, fp
 800635e:	bf08      	it	eq
 8006360:	220f      	moveq	r2, #15
 8006362:	4552      	cmp	r2, sl
 8006364:	d351      	bcc.n	800640a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8006366:	444e      	add	r6, r9
 8006368:	4639      	mov	r1, r7
 800636a:	44a1      	add	r9, r4
 800636c:	4640      	mov	r0, r8
 800636e:	eba3 0909 	sub.w	r9, r3, r9
 8006372:	f7ff ff15 	bl	80061a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8006376:	b180      	cbz	r0, 800639a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8006378:	f1b9 0f00 	cmp.w	r9, #0
 800637c:	d006      	beq.n	800638c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800637e:	42ac      	cmp	r4, r5
 8006380:	d004      	beq.n	800638c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8006382:	464a      	mov	r2, r9
 8006384:	1931      	adds	r1, r6, r4
 8006386:	1970      	adds	r0, r6, r5
 8006388:	f7ff ff22 	bl	80061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800638c:	b315      	cbz	r5, 80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800638e:	462a      	mov	r2, r5
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ff10 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006398:	e01c      	b.n	80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800639a:	b135      	cbz	r5, 80063aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800639c:	42ac      	cmp	r4, r5
 800639e:	d33c      	bcc.n	800641a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80063a0:	462a      	mov	r2, r5
 80063a2:	4639      	mov	r1, r7
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ff13 	bl	80061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80063aa:	f1b9 0f00 	cmp.w	r9, #0
 80063ae:	d011      	beq.n	80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80063b0:	42ac      	cmp	r4, r5
 80063b2:	d00f      	beq.n	80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80063b4:	464a      	mov	r2, r9
 80063b6:	1931      	adds	r1, r6, r4
 80063b8:	1970      	adds	r0, r6, r5
 80063ba:	f7ff ff09 	bl	80061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80063be:	42ac      	cmp	r4, r5
 80063c0:	d208      	bcs.n	80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80063c2:	4434      	add	r4, r6
 80063c4:	197b      	adds	r3, r7, r5
 80063c6:	429c      	cmp	r4, r3
 80063c8:	d30f      	bcc.n	80063ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80063ca:	462a      	mov	r2, r5
 80063cc:	4639      	mov	r1, r7
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7ff fefe 	bl	80061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80063d4:	f8d8 3000 	ldr.w	r3, [r8]
 80063d8:	f8c8 a004 	str.w	sl, [r8, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	4640      	mov	r0, r8
 80063e0:	f803 200a 	strb.w	r2, [r3, sl]
 80063e4:	b003      	add	sp, #12
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	42bc      	cmp	r4, r7
 80063ec:	d803      	bhi.n	80063f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80063ee:	462a      	mov	r2, r5
 80063f0:	eb07 010b 	add.w	r1, r7, fp
 80063f4:	e7cd      	b.n	8006392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80063f6:	1be4      	subs	r4, r4, r7
 80063f8:	4622      	mov	r2, r4
 80063fa:	4639      	mov	r1, r7
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff fee7 	bl	80061d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8006402:	1b2a      	subs	r2, r5, r4
 8006404:	1971      	adds	r1, r6, r5
 8006406:	1930      	adds	r0, r6, r4
 8006408:	e7c4      	b.n	8006394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800640a:	9500      	str	r5, [sp, #0]
 800640c:	463b      	mov	r3, r7
 800640e:	4622      	mov	r2, r4
 8006410:	4649      	mov	r1, r9
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff ff18 	bl	8006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006418:	e7dc      	b.n	80063d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800641a:	f1b9 0f00 	cmp.w	r9, #0
 800641e:	d0d0      	beq.n	80063c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8006420:	e7c8      	b.n	80063b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8006422:	bf00      	nop
 8006424:	08007251 	.word	0x08007251

08006428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8006428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800642a:	4604      	mov	r4, r0
 800642c:	4615      	mov	r5, r2
 800642e:	4a09      	ldr	r2, [pc, #36]	; (8006454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	460e      	mov	r6, r1
 8006434:	f7ff fe9a 	bl	800616c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8006438:	6862      	ldr	r2, [r4, #4]
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	1b92      	subs	r2, r2, r6
 800643e:	4601      	mov	r1, r0
 8006440:	42aa      	cmp	r2, r5
 8006442:	9808      	ldr	r0, [sp, #32]
 8006444:	9000      	str	r0, [sp, #0]
 8006446:	bf28      	it	cs
 8006448:	462a      	movcs	r2, r5
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff ff6e 	bl	800632c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8006450:	b004      	add	sp, #16
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	0800723b 	.word	0x0800723b

08006458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8006458:	b507      	push	{r0, r1, r2, lr}
 800645a:	6853      	ldr	r3, [r2, #4]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	f7ff ffe1 	bl	8006428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8006466:	b003      	add	sp, #12
 8006468:	f85d fb04 	ldr.w	pc, [sp], #4

0800646c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800646c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800646e:	4604      	mov	r4, r0
 8006470:	4610      	mov	r0, r2
 8006472:	9103      	str	r1, [sp, #12]
 8006474:	9202      	str	r2, [sp, #8]
 8006476:	f7f9 feaf 	bl	80001d8 <strlen>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	9000      	str	r0, [sp, #0]
 800647e:	9903      	ldr	r1, [sp, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff ffd0 	bl	8006428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8006488:	b004      	add	sp, #16
 800648a:	bd10      	pop	{r4, pc}

0800648c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800648c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800648e:	4604      	mov	r4, r0
 8006490:	4623      	mov	r3, r4
 8006492:	6840      	ldr	r0, [r0, #4]
 8006494:	f853 6b08 	ldr.w	r6, [r3], #8
 8006498:	429e      	cmp	r6, r3
 800649a:	bf18      	it	ne
 800649c:	68a3      	ldrne	r3, [r4, #8]
 800649e:	eb00 0502 	add.w	r5, r0, r2
 80064a2:	bf08      	it	eq
 80064a4:	230f      	moveq	r3, #15
 80064a6:	429d      	cmp	r5, r3
 80064a8:	d80a      	bhi.n	80064c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80064aa:	b112      	cbz	r2, 80064b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80064ac:	4430      	add	r0, r6
 80064ae:	f7ff fe83 	bl	80061b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	6065      	str	r5, [r4, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	4620      	mov	r0, r4
 80064ba:	555a      	strb	r2, [r3, r5]
 80064bc:	b002      	add	sp, #8
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	9200      	str	r2, [sp, #0]
 80064c2:	460b      	mov	r3, r1
 80064c4:	2200      	movs	r2, #0
 80064c6:	4601      	mov	r1, r0
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff febd 	bl	8006248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80064ce:	e7f0      	b.n	80064b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080064d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80064d0:	b508      	push	{r3, lr}
 80064d2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80064d6:	f7ff ffd9 	bl	800648c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80064da:	bd08      	pop	{r3, pc}

080064dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80064dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	460d      	mov	r5, r1
 80064e4:	f7f9 fe78 	bl	80001d8 <strlen>
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80064ea:	9001      	str	r0, [sp, #4]
 80064ec:	4602      	mov	r2, r0
 80064ee:	2100      	movs	r1, #0
 80064f0:	4620      	mov	r0, r4
 80064f2:	f7ff fe49 	bl	8006188 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80064f6:	9a01      	ldr	r2, [sp, #4]
 80064f8:	4629      	mov	r1, r5
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7ff ffc6 	bl	800648c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8006500:	b003      	add	sp, #12
 8006502:	bd30      	pop	{r4, r5, pc}
 8006504:	0800726a 	.word	0x0800726a

08006508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8006508:	6800      	ldr	r0, [r0, #0]
 800650a:	4770      	bx	lr

0800650c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 800650c:	4770      	bx	lr
	...

08006510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006510:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006512:	4604      	mov	r4, r0
 8006514:	4616      	mov	r6, r2
 8006516:	460d      	mov	r5, r1
 8006518:	b919      	cbnz	r1, 8006522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800651a:	b112      	cbz	r2, 8006522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800651c:	480d      	ldr	r0, [pc, #52]	; (8006554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800651e:	f7ff fd41 	bl	8005fa4 <_ZSt19__throw_logic_errorPKc>
 8006522:	1b73      	subs	r3, r6, r5
 8006524:	2b0f      	cmp	r3, #15
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	d907      	bls.n	800653a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800652a:	2200      	movs	r2, #0
 800652c:	a901      	add	r1, sp, #4
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fdf2 	bl	8006118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	6020      	str	r0, [r4, #0]
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	4632      	mov	r2, r6
 800653c:	4629      	mov	r1, r5
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	f7ff fe7d 	bl	800623e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	6063      	str	r3, [r4, #4]
 800654a:	2100      	movs	r1, #0
 800654c:	54d1      	strb	r1, [r2, r3]
 800654e:	b002      	add	sp, #8
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	bf00      	nop
 8006554:	0800727f 	.word	0x0800727f

08006558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	f100 0308 	add.w	r3, r0, #8
 800655e:	4604      	mov	r4, r0
 8006560:	6003      	str	r3, [r0, #0]
 8006562:	460d      	mov	r5, r1
 8006564:	b159      	cbz	r1, 800657e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006566:	4608      	mov	r0, r1
 8006568:	f7f9 fe36 	bl	80001d8 <strlen>
 800656c:	182a      	adds	r2, r5, r0
 800656e:	4620      	mov	r0, r4
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	4629      	mov	r1, r5
 8006576:	f7ff ffcb 	bl	8006510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800657a:	4620      	mov	r0, r4
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	2201      	movs	r2, #1
 8006580:	e7f5      	b.n	800656e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006582 <_ZdlPv>:
 8006582:	f000 bbc7 	b.w	8006d14 <free>
	...

08006588 <_ZSt15get_new_handlerv>:
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <_ZSt15get_new_handlerv+0xc>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	f3bf 8f5b 	dmb	ish
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	200001cc 	.word	0x200001cc

08006598 <acos>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	ed2d 8b02 	vpush	{d8}
 800659e:	ec55 4b10 	vmov	r4, r5, d0
 80065a2:	f000 f859 	bl	8006658 <__ieee754_acos>
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	eeb0 8a40 	vmov.f32	s16, s0
 80065b2:	eef0 8a60 	vmov.f32	s17, s1
 80065b6:	f7fa fa6d 	bl	8000a94 <__aeabi_dcmpun>
 80065ba:	b9a8      	cbnz	r0, 80065e8 <acos+0x50>
 80065bc:	ec45 4b10 	vmov	d0, r4, r5
 80065c0:	f000 fb5c 	bl	8006c7c <fabs>
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <acos+0x60>)
 80065c6:	ec51 0b10 	vmov	r0, r1, d0
 80065ca:	2200      	movs	r2, #0
 80065cc:	f7fa fa58 	bl	8000a80 <__aeabi_dcmpgt>
 80065d0:	b150      	cbz	r0, 80065e8 <acos+0x50>
 80065d2:	f000 fb6d 	bl	8006cb0 <__errno>
 80065d6:	ecbd 8b02 	vpop	{d8}
 80065da:	2321      	movs	r3, #33	; 0x21
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e2:	4806      	ldr	r0, [pc, #24]	; (80065fc <acos+0x64>)
 80065e4:	f000 bb54 	b.w	8006c90 <nan>
 80065e8:	eeb0 0a48 	vmov.f32	s0, s16
 80065ec:	eef0 0a68 	vmov.f32	s1, s17
 80065f0:	ecbd 8b02 	vpop	{d8}
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
 80065f6:	bf00      	nop
 80065f8:	3ff00000 	.word	0x3ff00000
 80065fc:	080071e0 	.word	0x080071e0

08006600 <sqrt>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	ed2d 8b02 	vpush	{d8}
 8006606:	ec55 4b10 	vmov	r4, r5, d0
 800660a:	f000 fa85 	bl	8006b18 <__ieee754_sqrt>
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	eeb0 8a40 	vmov.f32	s16, s0
 800661a:	eef0 8a60 	vmov.f32	s17, s1
 800661e:	f7fa fa39 	bl	8000a94 <__aeabi_dcmpun>
 8006622:	b990      	cbnz	r0, 800664a <sqrt+0x4a>
 8006624:	2200      	movs	r2, #0
 8006626:	2300      	movs	r3, #0
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7fa fa0a 	bl	8000a44 <__aeabi_dcmplt>
 8006630:	b158      	cbz	r0, 800664a <sqrt+0x4a>
 8006632:	f000 fb3d 	bl	8006cb0 <__errno>
 8006636:	2321      	movs	r3, #33	; 0x21
 8006638:	6003      	str	r3, [r0, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	f7fa f8b7 	bl	80007b4 <__aeabi_ddiv>
 8006646:	ec41 0b18 	vmov	d8, r0, r1
 800664a:	eeb0 0a48 	vmov.f32	s0, s16
 800664e:	eef0 0a68 	vmov.f32	s1, s17
 8006652:	ecbd 8b02 	vpop	{d8}
 8006656:	bd38      	pop	{r3, r4, r5, pc}

08006658 <__ieee754_acos>:
 8006658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ec55 4b10 	vmov	r4, r5, d0
 8006660:	49b7      	ldr	r1, [pc, #732]	; (8006940 <__ieee754_acos+0x2e8>)
 8006662:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006666:	428b      	cmp	r3, r1
 8006668:	dd1b      	ble.n	80066a2 <__ieee754_acos+0x4a>
 800666a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800666e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006672:	4323      	orrs	r3, r4
 8006674:	d106      	bne.n	8006684 <__ieee754_acos+0x2c>
 8006676:	2d00      	cmp	r5, #0
 8006678:	f300 8211 	bgt.w	8006a9e <__ieee754_acos+0x446>
 800667c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80068d8 <__ieee754_acos+0x280>
 8006680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	ee10 2a10 	vmov	r2, s0
 8006688:	462b      	mov	r3, r5
 800668a:	ee10 0a10 	vmov	r0, s0
 800668e:	4629      	mov	r1, r5
 8006690:	f7f9 fdae 	bl	80001f0 <__aeabi_dsub>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	f7fa f88c 	bl	80007b4 <__aeabi_ddiv>
 800669c:	ec41 0b10 	vmov	d0, r0, r1
 80066a0:	e7ee      	b.n	8006680 <__ieee754_acos+0x28>
 80066a2:	49a8      	ldr	r1, [pc, #672]	; (8006944 <__ieee754_acos+0x2ec>)
 80066a4:	428b      	cmp	r3, r1
 80066a6:	f300 8087 	bgt.w	80067b8 <__ieee754_acos+0x160>
 80066aa:	4aa7      	ldr	r2, [pc, #668]	; (8006948 <__ieee754_acos+0x2f0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f340 81f9 	ble.w	8006aa4 <__ieee754_acos+0x44c>
 80066b2:	ee10 2a10 	vmov	r2, s0
 80066b6:	ee10 0a10 	vmov	r0, s0
 80066ba:	462b      	mov	r3, r5
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 ff4f 	bl	8000560 <__aeabi_dmul>
 80066c2:	a387      	add	r3, pc, #540	; (adr r3, 80068e0 <__ieee754_acos+0x288>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	4606      	mov	r6, r0
 80066ca:	460f      	mov	r7, r1
 80066cc:	f7f9 ff48 	bl	8000560 <__aeabi_dmul>
 80066d0:	a385      	add	r3, pc, #532	; (adr r3, 80068e8 <__ieee754_acos+0x290>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 fd8d 	bl	80001f4 <__adddf3>
 80066da:	4632      	mov	r2, r6
 80066dc:	463b      	mov	r3, r7
 80066de:	f7f9 ff3f 	bl	8000560 <__aeabi_dmul>
 80066e2:	a383      	add	r3, pc, #524	; (adr r3, 80068f0 <__ieee754_acos+0x298>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 fd82 	bl	80001f0 <__aeabi_dsub>
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	f7f9 ff36 	bl	8000560 <__aeabi_dmul>
 80066f4:	a380      	add	r3, pc, #512	; (adr r3, 80068f8 <__ieee754_acos+0x2a0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fd7b 	bl	80001f4 <__adddf3>
 80066fe:	4632      	mov	r2, r6
 8006700:	463b      	mov	r3, r7
 8006702:	f7f9 ff2d 	bl	8000560 <__aeabi_dmul>
 8006706:	a37e      	add	r3, pc, #504	; (adr r3, 8006900 <__ieee754_acos+0x2a8>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 fd70 	bl	80001f0 <__aeabi_dsub>
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	f7f9 ff24 	bl	8000560 <__aeabi_dmul>
 8006718:	a37b      	add	r3, pc, #492	; (adr r3, 8006908 <__ieee754_acos+0x2b0>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7f9 fd69 	bl	80001f4 <__adddf3>
 8006722:	4632      	mov	r2, r6
 8006724:	463b      	mov	r3, r7
 8006726:	f7f9 ff1b 	bl	8000560 <__aeabi_dmul>
 800672a:	a379      	add	r3, pc, #484	; (adr r3, 8006910 <__ieee754_acos+0x2b8>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	4680      	mov	r8, r0
 8006732:	4689      	mov	r9, r1
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7f9 ff12 	bl	8000560 <__aeabi_dmul>
 800673c:	a376      	add	r3, pc, #472	; (adr r3, 8006918 <__ieee754_acos+0x2c0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fd55 	bl	80001f0 <__aeabi_dsub>
 8006746:	4632      	mov	r2, r6
 8006748:	463b      	mov	r3, r7
 800674a:	f7f9 ff09 	bl	8000560 <__aeabi_dmul>
 800674e:	a374      	add	r3, pc, #464	; (adr r3, 8006920 <__ieee754_acos+0x2c8>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fd4e 	bl	80001f4 <__adddf3>
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	f7f9 ff00 	bl	8000560 <__aeabi_dmul>
 8006760:	a371      	add	r3, pc, #452	; (adr r3, 8006928 <__ieee754_acos+0x2d0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd43 	bl	80001f0 <__aeabi_dsub>
 800676a:	4632      	mov	r2, r6
 800676c:	463b      	mov	r3, r7
 800676e:	f7f9 fef7 	bl	8000560 <__aeabi_dmul>
 8006772:	4b76      	ldr	r3, [pc, #472]	; (800694c <__ieee754_acos+0x2f4>)
 8006774:	2200      	movs	r2, #0
 8006776:	f7f9 fd3d 	bl	80001f4 <__adddf3>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7fa f817 	bl	80007b4 <__aeabi_ddiv>
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	f7f9 fee9 	bl	8000560 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	a167      	add	r1, pc, #412	; (adr r1, 8006930 <__ieee754_acos+0x2d8>)
 8006794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006798:	f7f9 fd2a 	bl	80001f0 <__aeabi_dsub>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 fd24 	bl	80001f0 <__aeabi_dsub>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	a162      	add	r1, pc, #392	; (adr r1, 8006938 <__ieee754_acos+0x2e0>)
 80067ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b2:	f7f9 fd1d 	bl	80001f0 <__aeabi_dsub>
 80067b6:	e771      	b.n	800669c <__ieee754_acos+0x44>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	f280 80cb 	bge.w	8006954 <__ieee754_acos+0x2fc>
 80067be:	ee10 0a10 	vmov	r0, s0
 80067c2:	4b62      	ldr	r3, [pc, #392]	; (800694c <__ieee754_acos+0x2f4>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7f9 fd14 	bl	80001f4 <__adddf3>
 80067cc:	4b60      	ldr	r3, [pc, #384]	; (8006950 <__ieee754_acos+0x2f8>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	f7f9 fec6 	bl	8000560 <__aeabi_dmul>
 80067d4:	a342      	add	r3, pc, #264	; (adr r3, 80068e0 <__ieee754_acos+0x288>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	4604      	mov	r4, r0
 80067dc:	460d      	mov	r5, r1
 80067de:	f7f9 febf 	bl	8000560 <__aeabi_dmul>
 80067e2:	a341      	add	r3, pc, #260	; (adr r3, 80068e8 <__ieee754_acos+0x290>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fd04 	bl	80001f4 <__adddf3>
 80067ec:	4622      	mov	r2, r4
 80067ee:	462b      	mov	r3, r5
 80067f0:	f7f9 feb6 	bl	8000560 <__aeabi_dmul>
 80067f4:	a33e      	add	r3, pc, #248	; (adr r3, 80068f0 <__ieee754_acos+0x298>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fcf9 	bl	80001f0 <__aeabi_dsub>
 80067fe:	4622      	mov	r2, r4
 8006800:	462b      	mov	r3, r5
 8006802:	f7f9 fead 	bl	8000560 <__aeabi_dmul>
 8006806:	a33c      	add	r3, pc, #240	; (adr r3, 80068f8 <__ieee754_acos+0x2a0>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 fcf2 	bl	80001f4 <__adddf3>
 8006810:	4622      	mov	r2, r4
 8006812:	462b      	mov	r3, r5
 8006814:	f7f9 fea4 	bl	8000560 <__aeabi_dmul>
 8006818:	a339      	add	r3, pc, #228	; (adr r3, 8006900 <__ieee754_acos+0x2a8>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f7f9 fce7 	bl	80001f0 <__aeabi_dsub>
 8006822:	4622      	mov	r2, r4
 8006824:	462b      	mov	r3, r5
 8006826:	f7f9 fe9b 	bl	8000560 <__aeabi_dmul>
 800682a:	a337      	add	r3, pc, #220	; (adr r3, 8006908 <__ieee754_acos+0x2b0>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 fce0 	bl	80001f4 <__adddf3>
 8006834:	4622      	mov	r2, r4
 8006836:	462b      	mov	r3, r5
 8006838:	f7f9 fe92 	bl	8000560 <__aeabi_dmul>
 800683c:	ec45 4b10 	vmov	d0, r4, r5
 8006840:	4680      	mov	r8, r0
 8006842:	4689      	mov	r9, r1
 8006844:	f000 f968 	bl	8006b18 <__ieee754_sqrt>
 8006848:	a331      	add	r3, pc, #196	; (adr r3, 8006910 <__ieee754_acos+0x2b8>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	ec57 6b10 	vmov	r6, r7, d0
 8006856:	f7f9 fe83 	bl	8000560 <__aeabi_dmul>
 800685a:	a32f      	add	r3, pc, #188	; (adr r3, 8006918 <__ieee754_acos+0x2c0>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fcc6 	bl	80001f0 <__aeabi_dsub>
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	f7f9 fe7a 	bl	8000560 <__aeabi_dmul>
 800686c:	a32c      	add	r3, pc, #176	; (adr r3, 8006920 <__ieee754_acos+0x2c8>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fcbf 	bl	80001f4 <__adddf3>
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	f7f9 fe71 	bl	8000560 <__aeabi_dmul>
 800687e:	a32a      	add	r3, pc, #168	; (adr r3, 8006928 <__ieee754_acos+0x2d0>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fcb4 	bl	80001f0 <__aeabi_dsub>
 8006888:	4622      	mov	r2, r4
 800688a:	462b      	mov	r3, r5
 800688c:	f7f9 fe68 	bl	8000560 <__aeabi_dmul>
 8006890:	4b2e      	ldr	r3, [pc, #184]	; (800694c <__ieee754_acos+0x2f4>)
 8006892:	2200      	movs	r2, #0
 8006894:	f7f9 fcae 	bl	80001f4 <__adddf3>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7f9 ff88 	bl	80007b4 <__aeabi_ddiv>
 80068a4:	4632      	mov	r2, r6
 80068a6:	463b      	mov	r3, r7
 80068a8:	f7f9 fe5a 	bl	8000560 <__aeabi_dmul>
 80068ac:	a320      	add	r3, pc, #128	; (adr r3, 8006930 <__ieee754_acos+0x2d8>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 fc9d 	bl	80001f0 <__aeabi_dsub>
 80068b6:	4632      	mov	r2, r6
 80068b8:	463b      	mov	r3, r7
 80068ba:	f7f9 fc9b 	bl	80001f4 <__adddf3>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	f7f9 fc97 	bl	80001f4 <__adddf3>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	a103      	add	r1, pc, #12	; (adr r1, 80068d8 <__ieee754_acos+0x280>)
 80068cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d0:	e76f      	b.n	80067b2 <__ieee754_acos+0x15a>
 80068d2:	bf00      	nop
 80068d4:	f3af 8000 	nop.w
 80068d8:	54442d18 	.word	0x54442d18
 80068dc:	400921fb 	.word	0x400921fb
 80068e0:	0dfdf709 	.word	0x0dfdf709
 80068e4:	3f023de1 	.word	0x3f023de1
 80068e8:	7501b288 	.word	0x7501b288
 80068ec:	3f49efe0 	.word	0x3f49efe0
 80068f0:	b5688f3b 	.word	0xb5688f3b
 80068f4:	3fa48228 	.word	0x3fa48228
 80068f8:	0e884455 	.word	0x0e884455
 80068fc:	3fc9c155 	.word	0x3fc9c155
 8006900:	03eb6f7d 	.word	0x03eb6f7d
 8006904:	3fd4d612 	.word	0x3fd4d612
 8006908:	55555555 	.word	0x55555555
 800690c:	3fc55555 	.word	0x3fc55555
 8006910:	b12e9282 	.word	0xb12e9282
 8006914:	3fb3b8c5 	.word	0x3fb3b8c5
 8006918:	1b8d0159 	.word	0x1b8d0159
 800691c:	3fe6066c 	.word	0x3fe6066c
 8006920:	9c598ac8 	.word	0x9c598ac8
 8006924:	40002ae5 	.word	0x40002ae5
 8006928:	1c8a2d4b 	.word	0x1c8a2d4b
 800692c:	40033a27 	.word	0x40033a27
 8006930:	33145c07 	.word	0x33145c07
 8006934:	3c91a626 	.word	0x3c91a626
 8006938:	54442d18 	.word	0x54442d18
 800693c:	3ff921fb 	.word	0x3ff921fb
 8006940:	3fefffff 	.word	0x3fefffff
 8006944:	3fdfffff 	.word	0x3fdfffff
 8006948:	3c600000 	.word	0x3c600000
 800694c:	3ff00000 	.word	0x3ff00000
 8006950:	3fe00000 	.word	0x3fe00000
 8006954:	ee10 2a10 	vmov	r2, s0
 8006958:	462b      	mov	r3, r5
 800695a:	496d      	ldr	r1, [pc, #436]	; (8006b10 <__ieee754_acos+0x4b8>)
 800695c:	2000      	movs	r0, #0
 800695e:	f7f9 fc47 	bl	80001f0 <__aeabi_dsub>
 8006962:	4b6c      	ldr	r3, [pc, #432]	; (8006b14 <__ieee754_acos+0x4bc>)
 8006964:	2200      	movs	r2, #0
 8006966:	f7f9 fdfb 	bl	8000560 <__aeabi_dmul>
 800696a:	4604      	mov	r4, r0
 800696c:	460d      	mov	r5, r1
 800696e:	ec45 4b10 	vmov	d0, r4, r5
 8006972:	f000 f8d1 	bl	8006b18 <__ieee754_sqrt>
 8006976:	a34e      	add	r3, pc, #312	; (adr r3, 8006ab0 <__ieee754_acos+0x458>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	ec59 8b10 	vmov	r8, r9, d0
 8006984:	f7f9 fdec 	bl	8000560 <__aeabi_dmul>
 8006988:	a34b      	add	r3, pc, #300	; (adr r3, 8006ab8 <__ieee754_acos+0x460>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fc31 	bl	80001f4 <__adddf3>
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	f7f9 fde3 	bl	8000560 <__aeabi_dmul>
 800699a:	a349      	add	r3, pc, #292	; (adr r3, 8006ac0 <__ieee754_acos+0x468>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fc26 	bl	80001f0 <__aeabi_dsub>
 80069a4:	4622      	mov	r2, r4
 80069a6:	462b      	mov	r3, r5
 80069a8:	f7f9 fdda 	bl	8000560 <__aeabi_dmul>
 80069ac:	a346      	add	r3, pc, #280	; (adr r3, 8006ac8 <__ieee754_acos+0x470>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fc1f 	bl	80001f4 <__adddf3>
 80069b6:	4622      	mov	r2, r4
 80069b8:	462b      	mov	r3, r5
 80069ba:	f7f9 fdd1 	bl	8000560 <__aeabi_dmul>
 80069be:	a344      	add	r3, pc, #272	; (adr r3, 8006ad0 <__ieee754_acos+0x478>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fc14 	bl	80001f0 <__aeabi_dsub>
 80069c8:	4622      	mov	r2, r4
 80069ca:	462b      	mov	r3, r5
 80069cc:	f7f9 fdc8 	bl	8000560 <__aeabi_dmul>
 80069d0:	a341      	add	r3, pc, #260	; (adr r3, 8006ad8 <__ieee754_acos+0x480>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fc0d 	bl	80001f4 <__adddf3>
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	f7f9 fdbf 	bl	8000560 <__aeabi_dmul>
 80069e2:	a33f      	add	r3, pc, #252	; (adr r3, 8006ae0 <__ieee754_acos+0x488>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	4682      	mov	sl, r0
 80069ea:	468b      	mov	fp, r1
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7f9 fdb6 	bl	8000560 <__aeabi_dmul>
 80069f4:	a33c      	add	r3, pc, #240	; (adr r3, 8006ae8 <__ieee754_acos+0x490>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fbf9 	bl	80001f0 <__aeabi_dsub>
 80069fe:	4622      	mov	r2, r4
 8006a00:	462b      	mov	r3, r5
 8006a02:	f7f9 fdad 	bl	8000560 <__aeabi_dmul>
 8006a06:	a33a      	add	r3, pc, #232	; (adr r3, 8006af0 <__ieee754_acos+0x498>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 fbf2 	bl	80001f4 <__adddf3>
 8006a10:	4622      	mov	r2, r4
 8006a12:	462b      	mov	r3, r5
 8006a14:	f7f9 fda4 	bl	8000560 <__aeabi_dmul>
 8006a18:	a337      	add	r3, pc, #220	; (adr r3, 8006af8 <__ieee754_acos+0x4a0>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f7f9 fbe7 	bl	80001f0 <__aeabi_dsub>
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f7f9 fd9b 	bl	8000560 <__aeabi_dmul>
 8006a2a:	4b39      	ldr	r3, [pc, #228]	; (8006b10 <__ieee754_acos+0x4b8>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f7f9 fbe1 	bl	80001f4 <__adddf3>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4650      	mov	r0, sl
 8006a38:	4659      	mov	r1, fp
 8006a3a:	f7f9 febb 	bl	80007b4 <__aeabi_ddiv>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	f7f9 fd8d 	bl	8000560 <__aeabi_dmul>
 8006a46:	2600      	movs	r6, #0
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4630      	mov	r0, r6
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7f9 fd84 	bl	8000560 <__aeabi_dmul>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7f9 fbc6 	bl	80001f0 <__aeabi_dsub>
 8006a64:	4632      	mov	r2, r6
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4649      	mov	r1, r9
 8006a70:	f7f9 fbc0 	bl	80001f4 <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fe9a 	bl	80007b4 <__aeabi_ddiv>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4650      	mov	r0, sl
 8006a86:	4659      	mov	r1, fp
 8006a88:	f7f9 fbb4 	bl	80001f4 <__adddf3>
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f7f9 fbb0 	bl	80001f4 <__adddf3>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	f7f9 fbac 	bl	80001f4 <__adddf3>
 8006a9c:	e5fe      	b.n	800669c <__ieee754_acos+0x44>
 8006a9e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8006b00 <__ieee754_acos+0x4a8>
 8006aa2:	e5ed      	b.n	8006680 <__ieee754_acos+0x28>
 8006aa4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8006b08 <__ieee754_acos+0x4b0>
 8006aa8:	e5ea      	b.n	8006680 <__ieee754_acos+0x28>
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w
 8006ab0:	0dfdf709 	.word	0x0dfdf709
 8006ab4:	3f023de1 	.word	0x3f023de1
 8006ab8:	7501b288 	.word	0x7501b288
 8006abc:	3f49efe0 	.word	0x3f49efe0
 8006ac0:	b5688f3b 	.word	0xb5688f3b
 8006ac4:	3fa48228 	.word	0x3fa48228
 8006ac8:	0e884455 	.word	0x0e884455
 8006acc:	3fc9c155 	.word	0x3fc9c155
 8006ad0:	03eb6f7d 	.word	0x03eb6f7d
 8006ad4:	3fd4d612 	.word	0x3fd4d612
 8006ad8:	55555555 	.word	0x55555555
 8006adc:	3fc55555 	.word	0x3fc55555
 8006ae0:	b12e9282 	.word	0xb12e9282
 8006ae4:	3fb3b8c5 	.word	0x3fb3b8c5
 8006ae8:	1b8d0159 	.word	0x1b8d0159
 8006aec:	3fe6066c 	.word	0x3fe6066c
 8006af0:	9c598ac8 	.word	0x9c598ac8
 8006af4:	40002ae5 	.word	0x40002ae5
 8006af8:	1c8a2d4b 	.word	0x1c8a2d4b
 8006afc:	40033a27 	.word	0x40033a27
	...
 8006b08:	54442d18 	.word	0x54442d18
 8006b0c:	3ff921fb 	.word	0x3ff921fb
 8006b10:	3ff00000 	.word	0x3ff00000
 8006b14:	3fe00000 	.word	0x3fe00000

08006b18 <__ieee754_sqrt>:
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	ec55 4b10 	vmov	r4, r5, d0
 8006b20:	4e55      	ldr	r6, [pc, #340]	; (8006c78 <__ieee754_sqrt+0x160>)
 8006b22:	43ae      	bics	r6, r5
 8006b24:	ee10 0a10 	vmov	r0, s0
 8006b28:	ee10 3a10 	vmov	r3, s0
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4629      	mov	r1, r5
 8006b30:	d110      	bne.n	8006b54 <__ieee754_sqrt+0x3c>
 8006b32:	ee10 2a10 	vmov	r2, s0
 8006b36:	462b      	mov	r3, r5
 8006b38:	f7f9 fd12 	bl	8000560 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4620      	mov	r0, r4
 8006b42:	4629      	mov	r1, r5
 8006b44:	f7f9 fb56 	bl	80001f4 <__adddf3>
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	ec45 4b10 	vmov	d0, r4, r5
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	dc10      	bgt.n	8006b7a <__ieee754_sqrt+0x62>
 8006b58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b5c:	4330      	orrs	r0, r6
 8006b5e:	d0f5      	beq.n	8006b4c <__ieee754_sqrt+0x34>
 8006b60:	b15d      	cbz	r5, 8006b7a <__ieee754_sqrt+0x62>
 8006b62:	ee10 2a10 	vmov	r2, s0
 8006b66:	462b      	mov	r3, r5
 8006b68:	ee10 0a10 	vmov	r0, s0
 8006b6c:	f7f9 fb40 	bl	80001f0 <__aeabi_dsub>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	f7f9 fe1e 	bl	80007b4 <__aeabi_ddiv>
 8006b78:	e7e6      	b.n	8006b48 <__ieee754_sqrt+0x30>
 8006b7a:	1512      	asrs	r2, r2, #20
 8006b7c:	d074      	beq.n	8006c68 <__ieee754_sqrt+0x150>
 8006b7e:	07d4      	lsls	r4, r2, #31
 8006b80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006b84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b8c:	bf5e      	ittt	pl
 8006b8e:	0fda      	lsrpl	r2, r3, #31
 8006b90:	005b      	lslpl	r3, r3, #1
 8006b92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006b96:	2400      	movs	r4, #0
 8006b98:	0fda      	lsrs	r2, r3, #31
 8006b9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b9e:	107f      	asrs	r7, r7, #1
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	2516      	movs	r5, #22
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006baa:	1886      	adds	r6, r0, r2
 8006bac:	428e      	cmp	r6, r1
 8006bae:	bfde      	ittt	le
 8006bb0:	1b89      	suble	r1, r1, r6
 8006bb2:	18b0      	addle	r0, r6, r2
 8006bb4:	18a4      	addle	r4, r4, r2
 8006bb6:	0049      	lsls	r1, r1, #1
 8006bb8:	3d01      	subs	r5, #1
 8006bba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006bbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006bc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bc6:	d1f0      	bne.n	8006baa <__ieee754_sqrt+0x92>
 8006bc8:	462a      	mov	r2, r5
 8006bca:	f04f 0e20 	mov.w	lr, #32
 8006bce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006bd2:	4281      	cmp	r1, r0
 8006bd4:	eb06 0c05 	add.w	ip, r6, r5
 8006bd8:	dc02      	bgt.n	8006be0 <__ieee754_sqrt+0xc8>
 8006bda:	d113      	bne.n	8006c04 <__ieee754_sqrt+0xec>
 8006bdc:	459c      	cmp	ip, r3
 8006bde:	d811      	bhi.n	8006c04 <__ieee754_sqrt+0xec>
 8006be0:	f1bc 0f00 	cmp.w	ip, #0
 8006be4:	eb0c 0506 	add.w	r5, ip, r6
 8006be8:	da43      	bge.n	8006c72 <__ieee754_sqrt+0x15a>
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	db41      	blt.n	8006c72 <__ieee754_sqrt+0x15a>
 8006bee:	f100 0801 	add.w	r8, r0, #1
 8006bf2:	1a09      	subs	r1, r1, r0
 8006bf4:	459c      	cmp	ip, r3
 8006bf6:	bf88      	it	hi
 8006bf8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006bfc:	eba3 030c 	sub.w	r3, r3, ip
 8006c00:	4432      	add	r2, r6
 8006c02:	4640      	mov	r0, r8
 8006c04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006c08:	f1be 0e01 	subs.w	lr, lr, #1
 8006c0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006c18:	d1db      	bne.n	8006bd2 <__ieee754_sqrt+0xba>
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	d006      	beq.n	8006c2c <__ieee754_sqrt+0x114>
 8006c1e:	1c50      	adds	r0, r2, #1
 8006c20:	bf13      	iteet	ne
 8006c22:	3201      	addne	r2, #1
 8006c24:	3401      	addeq	r4, #1
 8006c26:	4672      	moveq	r2, lr
 8006c28:	f022 0201 	bicne.w	r2, r2, #1
 8006c2c:	1063      	asrs	r3, r4, #1
 8006c2e:	0852      	lsrs	r2, r2, #1
 8006c30:	07e1      	lsls	r1, r4, #31
 8006c32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006c36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006c3a:	bf48      	it	mi
 8006c3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006c40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006c44:	4614      	mov	r4, r2
 8006c46:	e781      	b.n	8006b4c <__ieee754_sqrt+0x34>
 8006c48:	0ad9      	lsrs	r1, r3, #11
 8006c4a:	3815      	subs	r0, #21
 8006c4c:	055b      	lsls	r3, r3, #21
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d0fa      	beq.n	8006c48 <__ieee754_sqrt+0x130>
 8006c52:	02cd      	lsls	r5, r1, #11
 8006c54:	d50a      	bpl.n	8006c6c <__ieee754_sqrt+0x154>
 8006c56:	f1c2 0420 	rsb	r4, r2, #32
 8006c5a:	fa23 f404 	lsr.w	r4, r3, r4
 8006c5e:	1e55      	subs	r5, r2, #1
 8006c60:	4093      	lsls	r3, r2
 8006c62:	4321      	orrs	r1, r4
 8006c64:	1b42      	subs	r2, r0, r5
 8006c66:	e78a      	b.n	8006b7e <__ieee754_sqrt+0x66>
 8006c68:	4610      	mov	r0, r2
 8006c6a:	e7f0      	b.n	8006c4e <__ieee754_sqrt+0x136>
 8006c6c:	0049      	lsls	r1, r1, #1
 8006c6e:	3201      	adds	r2, #1
 8006c70:	e7ef      	b.n	8006c52 <__ieee754_sqrt+0x13a>
 8006c72:	4680      	mov	r8, r0
 8006c74:	e7bd      	b.n	8006bf2 <__ieee754_sqrt+0xda>
 8006c76:	bf00      	nop
 8006c78:	7ff00000 	.word	0x7ff00000

08006c7c <fabs>:
 8006c7c:	ec51 0b10 	vmov	r0, r1, d0
 8006c80:	ee10 2a10 	vmov	r2, s0
 8006c84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c88:	ec43 2b10 	vmov	d0, r2, r3
 8006c8c:	4770      	bx	lr
	...

08006c90 <nan>:
 8006c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c98 <nan+0x8>
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	7ff80000 	.word	0x7ff80000

08006ca0 <abort>:
 8006ca0:	b508      	push	{r3, lr}
 8006ca2:	2006      	movs	r0, #6
 8006ca4:	f000 f986 	bl	8006fb4 <raise>
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f7fd fee9 	bl	8004a80 <_exit>
	...

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 f99a 	bl	8007008 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08007314 	.word	0x08007314
 8006cf8:	08007314 	.word	0x08007314
 8006cfc:	08007314 	.word	0x08007314
 8006d00:	08007318 	.word	0x08007318

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 b8a7 	b.w	8006e5c <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	2000000c 	.word	0x2000000c

08006d14 <free>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <free+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f000 b833 	b.w	8006d84 <_free_r>
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <memmove>:
 8006d40:	4288      	cmp	r0, r1
 8006d42:	b510      	push	{r4, lr}
 8006d44:	eb01 0402 	add.w	r4, r1, r2
 8006d48:	d902      	bls.n	8006d50 <memmove+0x10>
 8006d4a:	4284      	cmp	r4, r0
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	d807      	bhi.n	8006d60 <memmove+0x20>
 8006d50:	1e43      	subs	r3, r0, #1
 8006d52:	42a1      	cmp	r1, r4
 8006d54:	d008      	beq.n	8006d68 <memmove+0x28>
 8006d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d5e:	e7f8      	b.n	8006d52 <memmove+0x12>
 8006d60:	4402      	add	r2, r0
 8006d62:	4601      	mov	r1, r0
 8006d64:	428a      	cmp	r2, r1
 8006d66:	d100      	bne.n	8006d6a <memmove+0x2a>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d72:	e7f7      	b.n	8006d64 <memmove+0x24>

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <_free_r>:
 8006d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d86:	2900      	cmp	r1, #0
 8006d88:	d044      	beq.n	8006e14 <_free_r+0x90>
 8006d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8e:	9001      	str	r0, [sp, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f1a1 0404 	sub.w	r4, r1, #4
 8006d96:	bfb8      	it	lt
 8006d98:	18e4      	addlt	r4, r4, r3
 8006d9a:	f000 f929 	bl	8006ff0 <__malloc_lock>
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <_free_r+0x94>)
 8006da0:	9801      	ldr	r0, [sp, #4]
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x30>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	b003      	add	sp, #12
 8006dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db0:	f000 b924 	b.w	8006ffc <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x46>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1949      	addeq	r1, r1, r5
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x22>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x50>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x46>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1855      	adds	r5, r2, r1
 8006dd8:	42a5      	cmp	r5, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x70>
 8006ddc:	6824      	ldr	r4, [r4, #0]
 8006dde:	4421      	add	r1, r4
 8006de0:	1854      	adds	r4, r2, r1
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x26>
 8006de8:	681c      	ldr	r4, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	6053      	str	r3, [r2, #4]
 8006dee:	4421      	add	r1, r4
 8006df0:	6011      	str	r1, [r2, #0]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x26>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x78>
 8006df6:	230c      	movs	r3, #12
 8006df8:	6003      	str	r3, [r0, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x26>
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	1961      	adds	r1, r4, r5
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf04      	itt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	bf04      	itt	eq
 8006e0c:	1949      	addeq	r1, r1, r5
 8006e0e:	6021      	streq	r1, [r4, #0]
 8006e10:	6054      	str	r4, [r2, #4]
 8006e12:	e7ca      	b.n	8006daa <_free_r+0x26>
 8006e14:	b003      	add	sp, #12
 8006e16:	bd30      	pop	{r4, r5, pc}
 8006e18:	200001d0 	.word	0x200001d0

08006e1c <sbrk_aligned>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4e0e      	ldr	r6, [pc, #56]	; (8006e58 <sbrk_aligned+0x3c>)
 8006e20:	460c      	mov	r4, r1
 8006e22:	6831      	ldr	r1, [r6, #0]
 8006e24:	4605      	mov	r5, r0
 8006e26:	b911      	cbnz	r1, 8006e2e <sbrk_aligned+0x12>
 8006e28:	f000 f88c 	bl	8006f44 <_sbrk_r>
 8006e2c:	6030      	str	r0, [r6, #0]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 f887 	bl	8006f44 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d00a      	beq.n	8006e50 <sbrk_aligned+0x34>
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d007      	beq.n	8006e54 <sbrk_aligned+0x38>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f87c 	bl	8006f44 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d101      	bne.n	8006e54 <sbrk_aligned+0x38>
 8006e50:	f04f 34ff 	mov.w	r4, #4294967295
 8006e54:	4620      	mov	r0, r4
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	200001d4 	.word	0x200001d4

08006e5c <_malloc_r>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	1ccd      	adds	r5, r1, #3
 8006e62:	f025 0503 	bic.w	r5, r5, #3
 8006e66:	3508      	adds	r5, #8
 8006e68:	2d0c      	cmp	r5, #12
 8006e6a:	bf38      	it	cc
 8006e6c:	250c      	movcc	r5, #12
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	4607      	mov	r7, r0
 8006e72:	db01      	blt.n	8006e78 <_malloc_r+0x1c>
 8006e74:	42a9      	cmp	r1, r5
 8006e76:	d905      	bls.n	8006e84 <_malloc_r+0x28>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	4e2e      	ldr	r6, [pc, #184]	; (8006f40 <_malloc_r+0xe4>)
 8006e86:	f000 f8b3 	bl	8006ff0 <__malloc_lock>
 8006e8a:	6833      	ldr	r3, [r6, #0]
 8006e8c:	461c      	mov	r4, r3
 8006e8e:	bb34      	cbnz	r4, 8006ede <_malloc_r+0x82>
 8006e90:	4629      	mov	r1, r5
 8006e92:	4638      	mov	r0, r7
 8006e94:	f7ff ffc2 	bl	8006e1c <sbrk_aligned>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	d14d      	bne.n	8006f3a <_malloc_r+0xde>
 8006e9e:	6834      	ldr	r4, [r6, #0]
 8006ea0:	4626      	mov	r6, r4
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	d140      	bne.n	8006f28 <_malloc_r+0xcc>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4638      	mov	r0, r7
 8006eac:	eb04 0803 	add.w	r8, r4, r3
 8006eb0:	f000 f848 	bl	8006f44 <_sbrk_r>
 8006eb4:	4580      	cmp	r8, r0
 8006eb6:	d13a      	bne.n	8006f2e <_malloc_r+0xd2>
 8006eb8:	6821      	ldr	r1, [r4, #0]
 8006eba:	3503      	adds	r5, #3
 8006ebc:	1a6d      	subs	r5, r5, r1
 8006ebe:	f025 0503 	bic.w	r5, r5, #3
 8006ec2:	3508      	adds	r5, #8
 8006ec4:	2d0c      	cmp	r5, #12
 8006ec6:	bf38      	it	cc
 8006ec8:	250c      	movcc	r5, #12
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f7ff ffa5 	bl	8006e1c <sbrk_aligned>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d02b      	beq.n	8006f2e <_malloc_r+0xd2>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	442b      	add	r3, r5
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	e00e      	b.n	8006efc <_malloc_r+0xa0>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	1b52      	subs	r2, r2, r5
 8006ee2:	d41e      	bmi.n	8006f22 <_malloc_r+0xc6>
 8006ee4:	2a0b      	cmp	r2, #11
 8006ee6:	d916      	bls.n	8006f16 <_malloc_r+0xba>
 8006ee8:	1961      	adds	r1, r4, r5
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	bf18      	it	ne
 8006ef0:	6059      	strne	r1, [r3, #4]
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	bf08      	it	eq
 8006ef6:	6031      	streq	r1, [r6, #0]
 8006ef8:	5162      	str	r2, [r4, r5]
 8006efa:	604b      	str	r3, [r1, #4]
 8006efc:	4638      	mov	r0, r7
 8006efe:	f104 060b 	add.w	r6, r4, #11
 8006f02:	f000 f87b 	bl	8006ffc <__malloc_unlock>
 8006f06:	f026 0607 	bic.w	r6, r6, #7
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	1af2      	subs	r2, r6, r3
 8006f0e:	d0b6      	beq.n	8006e7e <_malloc_r+0x22>
 8006f10:	1b9b      	subs	r3, r3, r6
 8006f12:	50a3      	str	r3, [r4, r2]
 8006f14:	e7b3      	b.n	8006e7e <_malloc_r+0x22>
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	bf0c      	ite	eq
 8006f1c:	6032      	streq	r2, [r6, #0]
 8006f1e:	605a      	strne	r2, [r3, #4]
 8006f20:	e7ec      	b.n	8006efc <_malloc_r+0xa0>
 8006f22:	4623      	mov	r3, r4
 8006f24:	6864      	ldr	r4, [r4, #4]
 8006f26:	e7b2      	b.n	8006e8e <_malloc_r+0x32>
 8006f28:	4634      	mov	r4, r6
 8006f2a:	6876      	ldr	r6, [r6, #4]
 8006f2c:	e7b9      	b.n	8006ea2 <_malloc_r+0x46>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	4638      	mov	r0, r7
 8006f34:	f000 f862 	bl	8006ffc <__malloc_unlock>
 8006f38:	e7a1      	b.n	8006e7e <_malloc_r+0x22>
 8006f3a:	6025      	str	r5, [r4, #0]
 8006f3c:	e7de      	b.n	8006efc <_malloc_r+0xa0>
 8006f3e:	bf00      	nop
 8006f40:	200001d0 	.word	0x200001d0

08006f44 <_sbrk_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_sbrk_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fd fda0 	bl	8004a94 <_sbrk>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_sbrk_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_sbrk_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	200001dc 	.word	0x200001dc

08006f64 <_raise_r>:
 8006f64:	291f      	cmp	r1, #31
 8006f66:	b538      	push	{r3, r4, r5, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	d904      	bls.n	8006f78 <_raise_r+0x14>
 8006f6e:	2316      	movs	r3, #22
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f7a:	b112      	cbz	r2, 8006f82 <_raise_r+0x1e>
 8006f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f80:	b94b      	cbnz	r3, 8006f96 <_raise_r+0x32>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f830 	bl	8006fe8 <_getpid_r>
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f92:	f000 b817 	b.w	8006fc4 <_kill_r>
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00a      	beq.n	8006fb0 <_raise_r+0x4c>
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	d103      	bne.n	8006fa6 <_raise_r+0x42>
 8006f9e:	2316      	movs	r3, #22
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7e7      	b.n	8006f76 <_raise_r+0x12>
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fac:	4628      	mov	r0, r5
 8006fae:	4798      	blx	r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e7e0      	b.n	8006f76 <_raise_r+0x12>

08006fb4 <raise>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <raise+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bfd3 	b.w	8006f64 <_raise_r>
 8006fbe:	bf00      	nop
 8006fc0:	2000000c 	.word	0x2000000c

08006fc4 <_kill_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	; (8006fe4 <_kill_r+0x20>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f7fd fd45 	bl	8004a60 <_kill>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d102      	bne.n	8006fe0 <_kill_r+0x1c>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	b103      	cbz	r3, 8006fe0 <_kill_r+0x1c>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200001dc 	.word	0x200001dc

08006fe8 <_getpid_r>:
 8006fe8:	f7fd bd32 	b.w	8004a50 <_getpid>

08006fec <__retarget_lock_acquire_recursive>:
 8006fec:	4770      	bx	lr

08006fee <__retarget_lock_release_recursive>:
 8006fee:	4770      	bx	lr

08006ff0 <__malloc_lock>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__malloc_lock+0x8>)
 8006ff2:	f7ff bffb 	b.w	8006fec <__retarget_lock_acquire_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	200001d8 	.word	0x200001d8

08006ffc <__malloc_unlock>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__malloc_unlock+0x8>)
 8006ffe:	f7ff bff6 	b.w	8006fee <__retarget_lock_release_recursive>
 8007002:	bf00      	nop
 8007004:	200001d8 	.word	0x200001d8

08007008 <_init>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr

08007014 <_fini>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr
